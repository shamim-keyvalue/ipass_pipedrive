{"id":30754,"name":"testing-pipedriveSyncSubscription_batching","userId":27893,"accountId":24428,"createdDate":"2019-10-17T06:27:16Z","steps":[{"id":235923,"onSuccess":["addNoteFailed"],"onFailure":["addNoteFailed"],"name":"addNote","type":"httpRequest","properties":{"acceptableStatusCodes":"200,201,401,500","headers":"${steps.noteParams.noteConfig.header}","body":"${steps.noteParams.noteConfig.body}","query":"${steps.noteParams.noteConfig.query}","url":"${steps.noteParams.noteConfig.url}","method":"POST"}},{"id":235924,"onSuccess":["addNote2Failed"],"onFailure":["addNote2Failed"],"name":"addNote2","type":"httpRequest","properties":{"acceptableStatusCodes":"200,201,401,500","headers":"${steps.noteParams2.noteConfig.header}","body":"${steps.noteParams2.noteConfig.body}","query":"${steps.noteParams2.noteConfig.query}","url":"${steps.noteParams2.noteConfig.url}","method":"POST"}},{"id":240209,"onSuccess":["loopOverChangedSubscription"],"onFailure":["InvalidAccessToken"],"name":"addNote2Failed","type":"filter","properties":{"body":"done(steps.addNote2.response.code === 200 || steps.addNote2.response.code === 200);"}},{"id":235925,"onSuccess":["addNote3Failed"],"onFailure":["addNote3Failed"],"name":"addNote3","type":"httpRequest","properties":{"acceptableStatusCodes":"200,201,401,500","headers":"${steps.noteParams3.noteConfig.header}","body":"${steps.noteParams3.noteConfig.body}","query":"${steps.noteParams3.noteConfig.query}","url":"${steps.noteParams3.noteConfig.url}","method":"POST"}},{"id":240210,"onSuccess":["loopOverChangedSubscription"],"onFailure":["InvalidAccessToken"],"name":"addNote3Failed","type":"filter","properties":{"body":"done(steps.addNote3.response.code === 200 || steps.addNote3.response.code === 201);"}},{"id":235926,"onSuccess":["loopOverExistingDeals"],"onFailure":["InvalidAccessToken_1"],"name":"addNote4","type":"httpRequest","properties":{"acceptableStatusCodes":"200,201","headers":"${steps.noteParams4.noteConfig.header}","body":"${steps.noteParams4.noteConfig.body}","query":"","url":"${steps.noteParams4.noteConfig.url}","method":"POST"}},{"id":240222,"onSuccess":["loopOverChangedSubscription"],"onFailure":["InvalidAccessToken"],"name":"addNoteFailed","type":"filter","properties":{"body":"done(steps.addNote.response.code === 200 || steps.addNote.response.code === 201);"}},{"id":235927,"onSuccess":["noteParams"],"onFailure":["loopOverChangedSubscription"],"name":"addNotesConfigured","type":"filter","properties":{"body":"done(steps.ConfigParams.config.params.addNotesSubscription);"}},{"id":235928,"onSuccess":["noteParams2"],"onFailure":["loopOverChangedSubscription"],"name":"addNotesConfigured2","type":"filter","properties":{"body":"done(steps.ConfigParams.config.params.addNotesSubscription);"}},{"id":235929,"onSuccess":["noteParams3"],"onFailure":["loopOverChangedSubscription"],"name":"addNotesConfigured3","type":"filter","properties":{"body":"done(steps.ConfigParams.config.params.addNotesSubscription);"}},{"id":235930,"onSuccess":["noteParams4"],"onFailure":["loopOverExistingDeals"],"name":"addNotesConfigured4","type":"filter","properties":{"body":"done(steps.ConfigParams.config.params.addNotesSubscription);"}},{"id":235931,"onSuccess":[],"onFailure":[],"name":"ApiError","type":"script","properties":{"body":"let message = \"Error on Sync Customer Formula\";\n\nif((steps.requestNewPipedriveToken !== undefined) && (steps.requestNewPipedriveToken.response.code !== 200)){\n  message = \"requestNewPipedriveToken API Failed\";\n}\n\nif((steps.updateTpConfig_2 !== undefined) && (steps.updateTpConfig_2.response.code !== 200)){\n  message = \"chargebeeUpdate API Failed API Failed\";\n}\n\nif((steps.createDealField !== undefined) && (steps.createDealField.response.code !== 200)){\n  message = \"createDealField API Failed\";\n}\n\nif((steps.updateTpConfig_1 !== undefined) && (steps.updateTpConfig_1.response.code !== 200)){\n  message = \"updateTpConfig API Failed\";\n}\n\nif((steps.createDealPipedrive2 !== undefined) && (steps.createDealPipedrive2.response.code !== 200)){\n  message = \"createDealPipedrive API Failed\";\n}\n\nif((steps.updateDealPipedrive !== undefined) && (steps.updateDealPipedrive.response.code !== 200)){\n  message = \"updateDealPipedrive API Failed\";\n}\n\nif((steps.getDetailsOfDeal !== undefined) && (steps.getDetailsOfDeal.response.code !== 200)){\n  message = \"getDetailsOfDeal API Failed API Failed\";\n}\n\nif((steps.createDealPipedrive !== undefined) && (steps.createDealPipedrive.response.code !== 200)){\n  message = \"createDealPipedrive API Failed\";\n}\n\nif((steps.requestNewPipedriveToken1 !== undefined) && (steps.requestNewPipedriveToken1.response.code !== 200)){\n  message = \"requestNewPipedriveToken1 API Failed\";\n}\n\nif((steps.updateExistingDeal !== undefined) && (steps.updateExistingDeal.response.code !== 200)){\n  message = \"updateExistingDeal API Failed\";\n}\n\nif((steps.getExistingDealsInPipedrive !== undefined) && (steps.getExistingDealsInPipedrive.response.code !== 200)){\n  message = \"getExistingDealsInPipedrive API Failed\";\n}\n\nif((steps.getPersonsPipedrive !== undefined) && (steps.getPersonsPipedrive.response.code !== 200)){\n  message = \"getPersonsPipedrive API Failed\";\n}\n\nif((steps.getDealFieldsPipedrive !== undefined) && (steps.getDealFieldsPipedrive.response.code !== 200)){\n  message = \"getDealFieldsPipedrive API Failed\";\n}\n\nif((steps.getTpConfig !== undefined) && (steps.getTpConfig.response.code !== 200)){\n  message = \"getTpConfig API Failed\";\n}\n\nif((steps.retrieveTpEntityMappingForDeal2 !== undefined) && (steps.retrieveTpEntityMappingForDeal2.response.code !== 200)){\n  message = \"ThirdParty Entity Mapping API Failed\";\n}\n\nif((steps.retrieveTpEntityMappingForDeal !== undefined) && (steps.retrieveTpEntityMappingForDeal.response.code !== 200)){\n  message = \"ThirdParty Entity Mapping API Failed\";\n}\n\ndone({\n  message: message\n});"}},{"id":235932,"onSuccess":[],"onFailure":[],"name":"asdadsds","type":"script","properties":{"body":"asdsadsdassdsadsads"}},{"id":235933,"onSuccess":[],"onFailure":[],"name":"asdsad","type":"script","properties":{"body":"asdsa"}},{"id":236627,"onSuccess":[],"onFailure":[],"name":"BatchSuccess","type":"script","properties":{"body":"done(true);"}},{"id":235934,"onSuccess":["noDataToSync"],"onFailure":[],"name":"CBList","type":"script","properties":{"body":"let subscriptionList = (steps.subscriptionList.contactList !== undefined) ? steps.subscriptionList.contactList : null;\nlet errorList;\n\nif(steps.ErrorList !== undefined && steps.ErrorList.subscriptionList.length > 0){\n  errorList = steps.ErrorList.subscriptionList;\n  subscriptionList = subscriptionList.concat(errorList);\n}\n\n// -- To eliminate multiple entries for same customer, latest updated one will be selected\n\nfunction unixTime(unixtime) {\n  var u = new Date(unixtime*1000);\n  return u.getUTCFullYear() +\n    '-' +  ('0' + ( Number(u.getUTCMonth()) + 1))+\n    '-' + ('0' + u.getUTCDate()).slice(-2) + \n    ' ' + ('0' + u.getUTCHours()).slice(-2) +\n    ':' + ('0' + u.getUTCMinutes()).slice(-2) +\n    ':' + ('0' + u.getUTCSeconds()).slice(-2) ;\n}\n\nconst sortDate = array => array.sort((A, B) => new Date(unixTime(A.subscription.updated_at))*1 - new Date(unixTime(B.subscription.updated_at))*1)\nconst filter = array => [...new Map(array.map(x => [x.subscription.customer_id, x])).values()]\nconst outputRaw = filter(subscriptionList); \nconst outputSorted = sortDate(filter(sortDate(subscriptionList)));\n\n//--------------------------------------\n\ndone({\n  list: outputSorted\n});\n"}},{"id":235935,"onSuccess":["CBList"],"onFailure":["GetErrorParams"],"name":"CheckErrorRecords","type":"filter","properties":{"body":"let syncData = steps.LastSyncDetails.response.body.third_party_sync_detail.context.syncData || undefined;\n\nlet contactLength = steps.subscriptionList.contactList.length || 0;\nlet batch_size = steps.ConfigParams.tpConfig.third_party_configuration.config_json.batch.batch_size;\n\nif(syncData !== undefined && syncData.previousSyncStart !== undefined && syncData.previousSyncEnd !== undefined){\n  if(steps.GetTpError.response.body.list.length === 0){\n    done(true);\n  }else if(contactLength >= batch_size){\n  done(true);\n}else{\n  done(false);\n}\n}\ndone(true);"}},{"id":235936,"onSuccess":["CustomFieldParamsForErrorRecords"],"onFailure":["CBList"],"name":"CheckOffset","type":"filter","properties":{"body":"done(steps.GetFailedSubscription.response.body.next_offset !== undefined && (steps.GetFailedSubscription.request.query.offset !== steps.GetFailedSubscription.response.body.next_offset));"}},{"id":235937,"onSuccess":["TransformSubscriptionIds"],"onFailure":["GetErrorParams"],"name":"CheckOffsetValue","type":"filter","properties":{"body":"let contactLength = steps.invoiceList.contactList.length;\nlet ids = steps.FailedToSync.subscriptionIds.length;\nlet batch_size = steps.ConfigParams.tpConfig.third_party_configuration.config_json.batch.batch_size;\n\nif(steps.GetError.response.body.next_offset === undefined || batch_size <= (contactLength + ids)){\n  done(true);\n}\ndone(false);"}},{"id":235938,"onSuccess":["fetchSubscriptionParams"],"onFailure":[],"name":"clearSubscriptionInformation","type":"script","properties":{"body":"if(steps.subscriptionInformation !== undefined){\n  steps.subscriptionInformation.subscriptionData = null;\n  steps.subscriptionInformation.customerId = null;\n}\n\ndone(true);"}},{"id":235939,"onSuccess":["LastSyncDetails"],"onFailure":[],"name":"ConfigParams","type":"script","properties":{"body":"let config = {\n  params: steps.InputParams.input,\n  apiToken: steps.InputParams.input.apiToken,\n  records:{\n    customerIds :[],\n    customerSyncedIds:[],\n    errorCSV:[],\n    successCSV:[]\n  }\n}\n\nlet tpConfig = null;\n\nif(steps.getTpConfig.response.body.third_party_configuration !== undefined){\n  tpConfig = steps.getTpConfig.response.body;\n}\n\nif(steps.updateConfiguration !== undefined){\n  if(steps.updateConfiguration.OAuthData !== null){\n    tpConfig.third_party_configuration.config_json.cloudElements.OAuth_Parameters = steps.updateConfiguration.OAuthData.OAuthDetails;\n  }\n}\n\nlet syncRulesDeals = steps.getTpConfig.response.body.third_party_configuration.config_json.cloudElements.syncRulesDeals;\n\nconfig.params.events[0]['subscription_created']['pipeline'] = Number(syncRulesDeals.subCreatedPipeline) || 1;\nconfig.params.events[0]['subscription_created']['stage'] = Number(syncRulesDeals.subCreatedStage) || 1;\n\nconfig.params.events[0]['subscription_started']['pipeline'] = Number(syncRulesDeals.subUpdatedPipeline) || 1;\nconfig.params.events[0]['subscription_started']['stage'] = Number(syncRulesDeals.subUpdatedStage) || 1;\n\nconfig.params.events[0]['subscription_activated']['pipeline'] = Number(syncRulesDeals.subUpdatedPipeline) || 1;\nconfig.params.events[0]['subscription_activated']['stage'] = Number(syncRulesDeals.subUpdatedStage) || 1;\n\nconfig.params.events[0]['subscription_changed']['pipeline'] = Number(syncRulesDeals.subUpdatedPipeline) || 1;\nconfig.params.events[0]['subscription_changed']['stage'] = Number(syncRulesDeals.subUpdatedStage) || 1;\n\nconfig.params.events[0]['subscription_paused']['pipeline'] = Number(syncRulesDeals.subPausedPipeline) || 1;\nconfig.params.events[0]['subscription_paused']['stage'] = Number(syncRulesDeals.subPausedStage) || 1;\n\nconfig.params.events[0]['subscription_resumed']['pipeline'] = Number(syncRulesDeals.subResumedPipeline) || 1;\nconfig.params.events[0]['subscription_resumed']['stage'] = Number(syncRulesDeals.subResumedStage) || 1;\n\nconfig.params.events[0]['subscription_cancelled']['pipeline'] = Number(syncRulesDeals.subCancelledPipeline) || 1;\nconfig.params.events[0]['subscription_cancelled']['stage'] = Number(syncRulesDeals.subCancelledStage) || 1;\n\nconfig.params.events[0]['subscription_reactivated']['pipeline'] = Number(syncRulesDeals.subReactivatedPipeline) || 1;\nconfig.params.events[0]['subscription_reactivated']['stage'] = Number(syncRulesDeals.subReactivatedStage) || 1;\n\nconfig.params.events[0]['subscription_renewed']['pipeline'] = Number(syncRulesDeals.subUpdatedPipeline) || 1;\nconfig.params.events[0]['subscription_renewed']['stage'] = Number(syncRulesDeals.subUpdatedStage) || 1;\n\nconfig.params.events[0]['subscription_deleted']['pipeline'] = Number(syncRulesDeals.subDeletedPipeline) || 1;\nconfig.params.events[0]['subscription_deleted']['stage'] = Number(syncRulesDeals.subDeletedStage) || 1;\n\n\nlet subscriptionFields = [\"CB_Subscription_ID\",\"CB_Subscription_Status\",\"CB_Subscription_MRR\",\"Value\"]; //Subscription Status is Mandatory because inorder to determine the actions on change to subscriptions. Inorder to move deals between different stages we require status.\n\n// if(steps.InputParams.input.syncFields.subscriptionFields.length !== 0){\n//   subscriptionFields.concat(steps.InputParams.input.syncFields.subscriptionFields);\n// }\n\n// let subscriptionFields = steps.InputParams.input.syncFields.subscriptionFields;\n\nlet customFieldMap = steps.getTpConfig.response.body.third_party_configuration.config_json.cloudElements.customFieldMap || {\n    \"customerFields\":{},\n    \"organizationFields\":{},\n    \"dealFields\":{}\n  };\n\nconfig.dealFieldsApiConfig = {\n    url: \"https://api-proxy.pipedrive.com/dealFields\",\n    headers : {\n      \"Authorization\": tpConfig.third_party_configuration.config_json.cloudElements.OAuth_Parameters.access_token || null\n    }\n  }\n  \nlet getAccountInfomationPipedrive = {\n  url: \"https://api-proxy.pipedrive.com/users/me\",\n  headers : {\n    \"Authorization\": tpConfig.third_party_configuration.config_json.cloudElements.OAuth_Parameters.access_token || null\n  }\n}\n\ndone({\n  tpConfig: tpConfig,\n  config: config,\n  customFieldMap: customFieldMap,\n  subscriptionFields: subscriptionFields,\n  getAccountInfomationPipedrive: getAccountInfomationPipedrive\n});"}},{"id":235940,"onSuccess":["updateTpEntityParams_4"],"onFailure":["InvalidAccessToken"],"name":"createDeal2AuthError","type":"filter","properties":{"body":"if(steps.createDealPipedrive2.response.code === 401){\n  done(false);\n}\n\ndone(true);"}},{"id":235941,"onSuccess":["updateTpEntityParams_2"],"onFailure":["InvalidAccessToken"],"name":"createDealAuthError","type":"filter","properties":{"body":"if(steps.createDealPipedrive.response.code === 401){\n  done(false);\n}\n\ndone(true);"}},{"id":235942,"onSuccess":["loopOverPersons"],"onFailure":[],"name":"createDealFailed2","type":"script","properties":{"body":"let customer_id = steps.subscriptionInformation.customerId;\n\nlet chargebee_data_url = \"/admin-console/subscriptions/\"+customer_id;\nlet cb_link = \"<a href='\"+chargebee_data_url+\"'>\"+customer_id+\"</a>\"\n\nsteps.ConfigParams.config.records.errorCSV.push(cb_link + \",Subscription Creation Failed\");\n\ndone(steps.ConfigParams.config.records.errorCSV);"}},{"id":235943,"onSuccess":["isAuthErrorCreateDealField"],"onFailure":["isAuthErrorCreateDealField"],"name":"createDealField","type":"httpRequest","properties":{"acceptableStatusCodes":"200,401","retryAttempts":"5","retryStatusCodes":"401","retryDelay":"200","headers":"${steps.ConfigParams.config.dealFieldsApiConfig.headers}","retry":"true","body":"${steps.loopOverDealFieldsToCreate.entry}","url":"${steps.ConfigParams.config.dealFieldsApiConfig.url}","method":"POST"}},{"id":235944,"onSuccess":["createDealPipedrive"],"onFailure":[],"name":"createDealParams","type":"script","properties":{"body":"let fieldNameSubscriptionStatus = steps.ConfigParams.customFieldMap.dealFields.CB_Subscription_Status;\nlet fieldNameSubscriptionId = steps.ConfigParams.customFieldMap.dealFields.CB_Subscription_ID;\nlet fieldNameSubscriptionMRR = steps.ConfigParams.customFieldMap.dealFields.CB_Subscription_MRR;\nlet howToUpdateDealValue = steps.ConfigParams.tpConfig.third_party_configuration.config_json.cloudElements.syncRulesDeals.howToUpdateDealValue || \"option4\";\n\n// let subscriptionData = steps.subscriptionInformation.subscriptionData;\n\nlet subscriptionData = steps.loopOverChangedSubscription.entry.subscription;\n\n// let pipedrive_id = steps.loopOverPersons.entry['id'];\n\nlet pipedrive_id = steps.getTpEntityMappingOfCustomer.response.body.third_party_entity_mapping.third_party_entity_id;\nlet subscription_id = subscriptionData.id;\nlet currency_code = subscriptionData.currency_code;\nlet plan_amount = subscriptionData.plan_amount;\nlet subscription_status = subscriptionData.status;\nlet subscription_mrr = (subscriptionData.mrr !== undefined && subscriptionData.mrr > 0) ? parseFloat(parseInt(subscriptionData.mrr, 10) / 100).toFixed(2) : 0;\n\n\nlet createDealConfig = {\n  url: 'https://api-proxy.pipedrive.com/deals',\n  header:{\n    \"Authorization\": steps.ConfigParams.tpConfig.third_party_configuration.config_json.cloudElements.OAuth_Parameters.access_token || null\n  },\n  body:{\n    title: \"Chargebee Subscription ID: \" + subscription_id,\n    value: \"0\",\n    currency: currency_code,\n    person_id: pipedrive_id,\n  }\n}\n\nif(howToUpdateDealValue === \"option1\"){ //Update Deal Value with Recurring Items Total\n  createDealConfig.body.value = ((subscription_mrr * subscriptionData.billing_period)/100) || 0;\n}\n\nif(howToUpdateDealValue === \"option2\"){ //Update Deal Value with Invoice Amount\n  if(steps.latestDataChargebee.invoiceData !== null){\n    createDealConfig.body.value = ((steps.latestDataChargebee.invoiceData.total)/100) || 0;\n  }else{\n    createDealConfig.body.value = 0;\n  }\n}\n\nif(howToUpdateDealValue === \"option3\"){ //Update Deal Value with MRR\n  createDealConfig.body.value = subscription_mrr;\n}\n\nif(steps.getTpEntityMappingOfCustomer.response.body.third_party_entity_mapping.old_resource['org_id'] !== undefined){\n  let organization_id = steps.getTpEntityMappingOfCustomer.response.body.third_party_entity_mapping.old_resource['org_id'];\n  createDealConfig.body.org_id = organization_id;\n}\n\nif(steps.ConfigParams.config.params.events[0]['subscription_created']['stage'] !== undefined){\n  let stage_id = steps.ConfigParams.config.params.events[0]['subscription_created']['stage'];\n  createDealConfig.body.stage_id = stage_id;\n}\n\n\nif(fieldNameSubscriptionId !== undefined){\n  createDealConfig.body[fieldNameSubscriptionId] = subscription_id;\n}\n\nif(fieldNameSubscriptionMRR !== undefined){\n  createDealConfig.body[fieldNameSubscriptionMRR] = subscription_mrr;\n}\n\nif(fieldNameSubscriptionStatus !== undefined){\n  createDealConfig.body[fieldNameSubscriptionStatus] = subscription_status;\n}\n\ndone({\n  createDealConfig: createDealConfig\n});\n\n\n"}},{"id":235945,"onSuccess":["createDealPipedrive2"],"onFailure":[],"name":"createDealParams2","type":"script","properties":{"body":"let fieldNameSubscriptionStatus = steps.ConfigParams.customFieldMap.dealFields.CB_Subscription_Status;\nlet fieldNameSubscriptionId = steps.ConfigParams.customFieldMap.dealFields.CB_Subscription_ID;\nlet fieldNameSubscriptionMRR = steps.ConfigParams.customFieldMap.dealFields.CB_Subscription_MRR;\nlet howToUpdateDealValue = steps.ConfigParams.tpConfig.third_party_configuration.config_json.cloudElements.syncRulesDeals.howToUpdateDealValue || null;\n\n// let pipedrive_id = steps.loopOverPersons.entry['id'];\nlet pipedrive_id = steps.getTpEntityMappingOfCustomer.response.body.third_party_entity_mapping.third_party_entity_id;\n\nlet subscriptionData = steps.loopOverChangedSubscription.entry.subscription;\n\nlet subscription_id = subscriptionData.id;\nlet currency_code = subscriptionData.currency_code;\nlet plan_amount = subscriptionData.plan_amount;\nlet subscription_status = subscriptionData.status;\nlet subscription_mrr = (subscriptionData.mrr !== undefined && subscriptionData.mrr > 0) ? parseFloat(parseInt(subscriptionData.mrr, 10) / 100).toFixed(2) : 0;\n\nlet createDealConfig2 = {\n  url : 'https://api-proxy.pipedrive.com/deals',\n  header:{\n    \"Authorization\": steps.ConfigParams.tpConfig.third_party_configuration.config_json.cloudElements.OAuth_Parameters.access_token || null\n  },\n  body:{\n    title: subscription_id,\n    value: \"0\",\n    currency: currency_code,\n    person_id: pipedrive_id\n  }\n}\n\nif(steps.getTpEntityMappingOfCustomer.response.body.third_party_entity_mapping.old_resource['org_id'] !== undefined){\n  let organization_id = steps.getTpEntityMappingOfCustomer.response.body.third_party_entity_mapping.old_resource['org_id'];\n  createDealConfig2.body.org_id = organization_id;\n}\n\nif(steps.defineAction.configuration.stage !== undefined){\n  let stage_id = steps.defineAction.configuration.stage;\n  createDealConfig2.body.stage_id = stage_id;\n}\n\nif(howToUpdateDealValue === \"option1\"){ //Update Deal Value with Recurring Items Total\n  createDealConfig2.body.value = ((subscription_mrr * subscriptionData.billing_period)/100) || 0;\n}\n\nif(howToUpdateDealValue === \"option2\"){ //Update Deal Value with Invoice Amount\n  if(steps.latestDataChargebee.invoiceData !== null){\n      createDealConfig2.body.value = (steps.latestDataChargebee.invoiceData.total/100) || 0;\n  }else{\n    createDealConfig2.body.value = 0;\n  }\n}\n\nif(howToUpdateDealValue === \"option3\"){ //Update Deal Value with MRR\n  createDealConfig2.body.value = subscription_mrr;\n}\n\ncreateDealConfig2.body[fieldNameSubscriptionId] = subscription_id;\ncreateDealConfig2.body[fieldNameSubscriptionMRR] = subscription_mrr;\ncreateDealConfig2.body[fieldNameSubscriptionStatus] = subscription_status;\n\n\ndone({\n  createDealConfig2: createDealConfig2\n});\n\n"}},{"id":235946,"onSuccess":["createDealSuccess"],"onFailure":["createDealSuccess"],"name":"createDealPipedrive","type":"httpRequest","properties":{"acceptableStatusCodes":"200,201,401,500","headers":"${steps.createDealParams.createDealConfig.header}","body":"${steps.createDealParams.createDealConfig.body}","query":"${steps.createDealParams.createDealConfig.query}","url":"${steps.createDealParams.createDealConfig.url}","method":"POST"}},{"id":235947,"onSuccess":["createDealSuccess2"],"onFailure":["createDealSuccess2"],"name":"createDealPipedrive2","type":"httpRequest","properties":{"acceptableStatusCodes":"200,201,401,500","headers":"${steps.createDealParams2.createDealConfig2.header}","body":"${steps.createDealParams2.createDealConfig2.body}","query":"${steps.createDealParams2.createDealConfig2.query}","url":"${steps.createDealParams2.createDealConfig2.url}","method":"POST"}},{"id":235948,"onSuccess":["updateTpEntityParams_2"],"onFailure":["createDealAuthError"],"name":"createDealSuccess","type":"filter","properties":{"body":"if((steps.createDealPipedrive.response.code === 200) || (steps.createDealPipedrive.response.code === 201)){\n  done(true);\n}\n\ndone(false);"}},{"id":235949,"onSuccess":["updateTpEntityParams_4"],"onFailure":["createDeal2AuthError"],"name":"createDealSuccess2","type":"filter","properties":{"body":"if((steps.createDealPipedrive2.response.code === 200) || (steps.createDealPipedrive2.response.code === 201)){\n  done(true);\n}\n\ndone(false);"}},{"id":235950,"onSuccess":["loopOverPersons"],"onFailure":[],"name":"createFailedLog","type":"script","properties":{"body":"let customer_id = steps.subscriptionInformation.customerId;\n\nlet chargebee_data_url = \"/admin-console/customers/\"+customer_id;\nlet cb_link = \"<a href='\"+chargebee_data_url+\"'>\"+customer_id+\"</a>\"\n\nsteps.ConfigParams.config.records.errorCSV.push(cb_link + \",Failed to create a deal for Subscription\");\n\ndone(steps.ConfigParams.config.records.errorCSV);"}},{"id":235951,"onSuccess":["addNotesConfigured"],"onFailure":[],"name":"createLog","type":"script","properties":{"body":"let subscription_id = steps.loopOverChangedSubscription.entry.subscription.id;\n\nlet chargebee_data_url = \"/admin-console/subscriptions/\"+subscription_id;\nlet cb_link = \"<a href='\"+chargebee_data_url+\"'>\"+subscription_id+\"</a>\"\n\n// steps.ConfigParams.config.records.successCSV.push(cb_link + \",Deal Created\");\n\nlet pipedrive = steps.createDealPipedrive.response.body.data;\nlet person_id = pipedrive.person_id.value || 'undefined';\n\nlet company_domain = steps.getAccountInformationPipedrive.response.body.data.company_domain;\nlet pipedrive_data_url = \"https://\"+company_domain+\".pipedrive.com/deals/\" + pipedrive.id;\nlet pipedrive_link = \"<a href='\"+pipedrive_data_url+\"'>\"+pipedrive.id+\"</a>\";\n\nif((steps.createDealPipedrive.response.code === 200) || (steps.createDealPipedrive.response.code === 201)){\n  steps.ConfigParams.config.records.successCSV.push(\"Subscription \" + cb_link + \" on Chargebee is synced as deal \" + pipedrive_link + \" in Pipedrive\");\n  done(steps.ConfigParams.config.records.successCSV);\n}\n\nsteps.ConfigParams.config.records.errorCSV.push(cb_link + \" - Deal sync failed\");\ndone(steps.ConfigParams.config.records.errorCSV);\n\n"}},{"id":235952,"onSuccess":["addNotesConfigured3"],"onFailure":[],"name":"createLog2","type":"script","properties":{"body":"let subscription_id = steps.loopOverChangedSubscription.entry.subscription.id;\n\nlet chargebee_data_url = \"/admin-console/subscriptions/\"+subscription_id;\nlet cb_link = \"<a href='\"+chargebee_data_url+\"'>\"+subscription_id+\"</a>\"\n\n// steps.ConfigParams.config.records.successCSV.push(cb_link + \",Deal Created\");\n\nlet pipedrive = steps.createDealPipedrive2.response.body.data;\nlet person_id = pipedrive.person_id.value || 'undefined';\n\nlet company_domain = steps.getAccountInformationPipedrive.response.body.data.company_domain;\nlet pipedrive_data_url = \"https://\"+company_domain+\".pipedrive.com/deals/\" + pipedrive.id;\nlet pipedrive_link = \"<a href='\"+pipedrive_data_url+\"'>\"+pipedrive.id+\"</a>\";\n\nif((steps.createDealPipedrive2.response.code === 200) || (steps.createDealPipedrive2.response.code === 201)){\n  steps.ConfigParams.config.records.successCSV.push(\"Subscription \" + cb_link + \" on Chargebee is synced as deal \" + pipedrive_link + \" in Pipedrive\");\n  done(steps.ConfigParams.config.records.successCSV);\n}\n\nsteps.ConfigParams.config.records.errorCSV.push(cb_link + \" - Deal sync failed\");\ndone(steps.ConfigParams.config.records.errorCSV);\n\n"}},{"id":235953,"onSuccess":["GetFailedSubscription"],"onFailure":[],"name":"CustomFieldParamsForErrorRecords","type":"script","properties":{"body":"let params = {\n  query: {\n \t   limit: 10,\n \t   sort_by_asc : \"updated_at\",\n \t   id: steps.TransformSubscriptionIds.ids\n  }\n};\n\nif(steps.GetFailedSubscription !== undefined){\n  params.query.offset = steps.GetFailedSubscription.response.body.next_offset;\n}\n\ndone(params);\n"}},{"id":235954,"onSuccess":["loopOverDealFieldsToCreate"],"onFailure":[],"name":"dealFieldInformation","type":"script","properties":{"body":"let dealField = steps.createDealField.response.body.data;\n\nfieldName = dealField.name.replace(/ /g, \"_\");//Replacing white spaces in field name with underscore while saving customfield map to tpconfig\nfieldKey = dealField.key;\n\n\nsteps.ConfigParams.customFieldMap.dealFields[fieldName] = fieldKey;\n\ndone({\n  customFieldMap: steps.ConfigParams.customFieldMap,\n  dealFields: steps.ConfigParams.subscriptionFields\n});"}},{"id":235955,"onSuccess":["noDealFieldToCreate"],"onFailure":[],"name":"dealFieldsConfig","type":"script","properties":{"body":"let dealFieldsToCreate = [];\nlet dealFields = steps.ConfigParams.subscriptionFields;\nlet customFieldMap_Deals = steps.ConfigParams.customFieldMap.dealFields;\nlet dealFieldsInPipedrive = steps.getDealFieldsPipedrive.response.body.data;\n\nlet dealFieldName;\n\nfor(var i=0; i < dealFields.length; i++){\n  for(var j=0; j < dealFieldsInPipedrive.length ; j++){\n    dealFieldName = dealFields[i].replace(/_/g, \" \");//Removes underscores from field name before checking whether it exists in Pipedrive. Pipedrive will be having these  Field names without underscores.\n    if(dealFieldName !== dealFieldsInPipedrive[j]['name']){\n      if(j == dealFieldsInPipedrive.length-1){\n        fieldName = dealFieldName;\n        dealFieldParams = {\n          \"name\": fieldName,\n          \"field_type\": \"varchar\"\n        };\n       dealFieldsToCreate.push(dealFieldParams);\n      }\n    }else{\n      customFieldMap_Deals[dealFields[i]] = dealFieldsInPipedrive[j]['key'];\n      break;\n    }\n  }\n}\n\n// steps.ConfigParams.dealFieldsToCreate = dealFieldsToCreate;\n\ndone({\n  dealFieldsToCreate: dealFieldsToCreate\n});"}},{"id":235956,"onSuccess":["getExistingDealsInPipedrive"],"onFailure":["deriveActionSubCreate"],"name":"dealIdFoundInTpEntity","type":"filter","properties":{"body":"if(steps.getTpEntityMappingOfCustomer.response.body.third_party_entity_mapping.old_resource.subscription_deal_id === undefined){\n    done(false);\n}\n\ndone(true);"}},{"id":235957,"onSuccess":["deriveAction"],"onFailure":[],"name":"defineAction","type":"script","properties":{"body":"let event_name = '';\n\nlet fieldNameSubscriptionStatus = steps.ConfigParams.customFieldMap.dealFields.CB_Subscription_Status;\n\n// let subscription_status_pipedrive = steps.getExistingDealsInPipedrive.response.body.data[fieldNameSubscriptionStatus];\n\n// let subscription_status_pipedrive = steps.getTpEntityMappingOfSubscription.response.body.third_party_entity_mapping.old_resource.body[fieldNameSubscriptionStatus] || undefined;\n\nlet subscription_status_pipedrive = steps.getTpEntityMappingOfCustomer.response.body.third_party_entity_mapping.old_resource.subscription_status; //status of the last synced subscription deal to pipedrive, stored in tp entity mapping of customer\n\nlet subscriptionInformation = steps.loopOverChangedSubscription.entry;\n\nlet subscription_status_chargebee = subscriptionInformation.subscription.status;\n\nlet subscription_delete_status_chargebee = subscriptionInformation.subscription.deleted || false;\n\nif(subscription_status_pipedrive === undefined){\n  done(false);\n}\n\nif((subscription_status_pipedrive === \"future\") && (subscription_status_chargebee === \"in_trial\")){\n  event_name = \"subscription_activated\";\n}\n\nif((subscription_status_pipedrive === \"future\") && (subscription_status_chargebee === \"active\")){\n  event_name = \"subscription_activated\";\n}\n\nif((subscription_status_pipedrive === \"future\") && (subscription_status_chargebee === \"non_renewing\")){\n  event_name = \"subscription_activated\";\n}\n\nif((subscription_status_pipedrive === \"future\") && (subscription_status_chargebee === \"cancelled\")){\n  event_name = \"subscription_cancelled\";\n}\n\nif((subscription_status_pipedrive === \"in_trial\") && (subscription_status_chargebee === \"active\")){\n  event_name = \"subscription_activated\";\n}\n\nif(((subscription_status_pipedrive === \"in_trial\") && (subscription_status_chargebee === \"in_trial\")) && (subscriptionInformation.subscription.cancelled_at !== undefined)){\n  event_name = \"subscription_changed\";\n}\n\nif((subscription_status_pipedrive === \"in_trial\") && (subscription_status_chargebee === \"non_renewing\")){\n  event_name = \"subscription_activated\";\n}\n\nif((subscription_status_pipedrive === \"in_trial\") && (subscription_status_chargebee === \"cancelled\")){\n  event_name = \"subscription_cancelled\";\n}\n\nif((subscription_status_pipedrive === \"active\") && (subscription_status_chargebee === \"non_renewing\")){\n  event_name = \"subscription_changed\";\n}\n\nif((subscription_status_pipedrive === \"active\") && (subscription_status_chargebee === \"paused\")){\n  event_name = \"subscription_paused\";\n}\n\nif((subscription_status_pipedrive === \"active\") && (subscription_status_chargebee === \"cancelled\")){\n  event_name = \"subscription_cancelled\";\n}\n\nif((subscription_status_pipedrive === \"non_renewing\") && (subscription_status_chargebee === \"active\")){\n  event_name = \"subscription_changed\";\n}\n\nif((subscription_status_pipedrive === \"non_renewing\") && (subscription_status_chargebee === \"paused\")){\n  event_name = \"subscription_paused\";\n}\n\nif((subscription_status_pipedrive === \"non_renewing\") && (subscription_status_chargebee === \"cancelled\")){\n  event_name = \"subscription_cancelled\";\n}\n\nif((subscription_status_pipedrive === \"paused\") && (subscription_status_chargebee === \"active\")){\n  event_name = \"subscription_resumed\";\n}\n\nif((subscription_status_pipedrive === \"paused\") && (subscription_status_chargebee === \"non_renewing\")){\n  event_name = \"subscription_resumed\";\n}\n\nif((subscription_status_pipedrive === \"paused\") && (subscription_status_chargebee === \"cancelled\")){\n  event_name = \"subscription_cancelled\";\n}\n\nif((subscription_status_pipedrive === \"cancelled\") && (subscription_status_chargebee === \"future\")){\n  event_name = \"subscription_reactivated\";\n}\n\nif((subscription_status_pipedrive === \"cancelled\") && (subscription_status_chargebee === \"in_trial\")){\n  event_name = \"subscription_reactivated\";\n}\n\nif((subscription_status_pipedrive === \"cancelled\") && (subscription_status_chargebee === \"active\")){\n  event_name = \"subscription_reactivated\";\n}\n\nif((subscription_status_pipedrive === \"cancelled\") && (subscription_status_chargebee === \"non_renewing\")){\n  event_name = \"subscription_reactivated\";\n}\n\nif(subscription_delete_status_chargebee === true){\n  event_name = \"subscription_deleted\";\n}\n\nif(event_name === ''){\n  done({\n    configuration: {\n      action : \"do_nothing\"\n    }\n  });\n}\n\nlet configuration = steps.ConfigParams.config.params.events[0][event_name];\n\ndone({\n  event_name : event_name,\n  configuration: configuration\n});\n"}},{"id":235958,"onSuccess":["deriveActionForExistingDeals"],"onFailure":[],"name":"defineActionForExistingDeals","type":"script","properties":{"body":"let event_name = '';\n\nlet fieldNameSubscriptionStatus = steps.ConfigParams.customFieldMap.dealFields.CB_Subscription_Status;\n\n// let subscription_status_pipedrive = steps.getDetailsOfExistingDeal.response.body.data[fieldNameSubscriptionStatus];\n\nlet subscription_status_pipedrive = steps.loopOverExistingDeals.entry[fieldNameSubscriptionStatus];\n\nlet subscription_status_chargebee = steps.getSubscriptionOnChargebee.response.body.list[0]['subscription']['status'];\n\nlet subscription_delete_status_chargebee = steps.getSubscriptionOnChargebee.response.body.list[0]['subscription']['deleted'] || '';\n\nif(subscription_status_pipedrive === undefined){\n  done(false);\n}\n\nif((subscription_status_pipedrive === \"future\") && (subscription_status_chargebee === \"in_trial\")){\n  event_name = \"subscription_activated\";\n}\n\nif((subscription_status_pipedrive === \"future\") && (subscription_status_chargebee === \"active\")){\n  event_name = \"subscription_activated\";\n}\n\nif((subscription_status_pipedrive === \"future\") && (subscription_status_chargebee === \"non_renewing\")){\n  event_name = \"subscription_activated\";\n}\n\nif((subscription_status_pipedrive === \"future\") && (subscription_status_chargebee === \"cancelled\")){\n  event_name = \"subscription_cancelled\";\n}\n\nif(((subscription_status_pipedrive === \"in_trial\") && (subscription_status_chargebee === \"in_trial\")) && (steps.getSubscriptionOnChargebee.response.body.list[0]['subscription']['cancelled_at'] !== undefined)){\n  event_name = \"subscription_changed\";\n}\n\nif((subscription_status_pipedrive === \"in_trial\") && (subscription_status_chargebee === \"active\")){\n  event_name = \"subscription_activated\";\n}\n\nif((subscription_status_pipedrive === \"in_trial\") && (subscription_status_chargebee === \"non_renewing\")){\n  event_name = \"subscription_activated\";\n}\n\nif((subscription_status_pipedrive === \"in_trial\") && (subscription_status_chargebee === \"cancelled\")){\n  event_name = \"subscription_cancelled\";\n}\n\nif((subscription_status_pipedrive === \"active\") && (subscription_status_chargebee === \"non_renewing\")){\n  event_name = \"subscription_changed\";\n}\n\nif((subscription_status_pipedrive === \"active\") && (subscription_status_chargebee === \"paused\")){\n  event_name = \"subscription_paused\";\n}\n\nif((subscription_status_pipedrive === \"active\") && (subscription_status_chargebee === \"cancelled\")){\n  event_name = \"subscription_cancelled\";\n}\n\nif((subscription_status_pipedrive === \"non_renewing\") && (subscription_status_chargebee === \"active\")){\n  event_name = \"subscription_changed\";\n}\n\nif((subscription_status_pipedrive === \"non_renewing\") && (subscription_status_chargebee === \"paused\")){\n  event_name = \"subscription_paused\";\n}\n\nif((subscription_status_pipedrive === \"non_renewing\") && (subscription_status_chargebee === \"cancelled\")){\n  event_name = \"subscription_cancelled\";\n}\n\nif((subscription_status_pipedrive === \"paused\") && (subscription_status_chargebee === \"active\")){\n  event_name = \"subscription_resumed\";\n}\n\nif((subscription_status_pipedrive === \"paused\") && (subscription_status_chargebee === \"non_renewing\")){\n  event_name = \"subscription_resumed\";\n}\n\nif((subscription_status_pipedrive === \"paused\") && (subscription_status_chargebee === \"cancelled\")){\n  event_name = \"subscription_cancelled\";\n}\n\nif((subscription_status_pipedrive === \"cancelled\") && (subscription_status_chargebee === \"future\")){\n  event_name = \"subscription_reactivated\";\n}\n\nif((subscription_status_pipedrive === \"cancelled\") && (subscription_status_chargebee === \"in_trial\")){\n  event_name = \"subscription_reactivated\";\n}\n\nif((subscription_status_pipedrive === \"cancelled\") && (subscription_status_chargebee === \"active\")){\n  event_name = \"subscription_reactivated\";\n}\n\nif((subscription_status_pipedrive === \"cancelled\") && (subscription_status_chargebee === \"non_renewing\")){\n  event_name = \"subscription_reactivated\";\n}\n\nif(subscription_delete_status_chargebee === true){\n  event_name = \"subscription_deleted\";\n}\n\nif(event_name === ''){\n  done({\n    configuration: {\n      action : \"do_nothing\"\n    }\n  });\n}\n\nlet configuration = steps.ConfigParams.config.params.events[0][event_name];\n\ndone({\n  event_name : event_name,\n  configuration: configuration\n});"}},{"id":235959,"onSuccess":["updateOrCreate"],"onFailure":["loopOverChangedSubscription"],"name":"deriveAction","type":"filter","properties":{"body":"if(steps.defineAction === false){\n  done(false);\n}\n\nif(steps.defineAction.configuration.action === \"do_nothing\"){\n  done(false);\n}\nelse{\n  done(true);\n}"}},{"id":235960,"onSuccess":["updateTheExistingDeal_params"],"onFailure":["loopOverExistingDeals"],"name":"deriveActionForExistingDeals","type":"filter","properties":{"body":"if(steps.defineActionForExistingDeals === false){\n  done(false);\n}\n\nif(steps.defineActionForExistingDeals.configuration.action === \"do_nothing\"){\n  done(false);\n}\nelse{\n  done(true);\n}"}},{"id":235961,"onSuccess":["createDealParams"],"onFailure":["loopOverChangedSubscription"],"name":"deriveActionSubCreate","type":"filter","properties":{"body":"if(steps.ConfigParams.config.params.events[0]['subscription_created']!== undefined){\n  let action = steps.ConfigParams.config.params.events[0]['subscription_created']['action'];\n  if(action === 'do_nothing'){\n    done(false);\n  }else{\n    done(true);\n  }\n}else{\n  done(false);\n}\n\n\n\n"}},{"id":235962,"onSuccess":["CheckOffset"],"onFailure":[],"name":"ErrorList","type":"script","properties":{"body":"let subscriptionList = [];\n\nif(steps.ErrorList !== undefined){\n  subscriptionList = steps.ErrorList.subscriptionList;\n}\n\nif((steps.GetFailedSubscription.response.body.list !== undefined) && (steps.GetFailedSubscription.response.body.list.length > 0)){\n  if(subscriptionList.length === 0){\n    subscriptionList = steps.GetFailedSubscription.response.body.list;\n  }else{\n    //Handling Multiple Subscription for Same Customer\n    let changedSubscriptionList = steps.subscriptionList.contactList;\n    for(var i=0; i < changedSubscriptionList.length; i++){\n      for(var j=0; j < subscriptionList.length; j++){\n        if(changedSubscriptionList[i].subscription.customer_id === subscriptionList[j].subscription.customer_id){\n            subscriptionList.splice(subscriptionList[j],1);  //Removing the duplicate subscription\n        } \n      }\n    }\n    //---------------\n    subscriptionList = subscriptionList.concat(steps.GetFailedSubscription.response.body.list);\n  }\n}\n\ndone({\n  subscriptionList: subscriptionList\n});\n"}},{"id":235963,"onSuccess":[],"onFailure":[],"name":"FailedToGetAccessToken","type":"script","properties":{"body":"done({\n  message : \"Failed to Get New Access Token\"\n});"}},{"id":235964,"onSuccess":["CheckOffsetValue"],"onFailure":[],"name":"FailedToSync","type":"script","properties":{"body":"let details = steps.GetError.response.body.list;\nlet subscriptionIds = [];\nif(steps.FailedToSync !== undefined){\n  subscriptionIds = steps.FailedToSync.subscriptionIds;\n}\n\nif(details.length !== 0){\n    details.forEach(item => {\n    subscriptionIds.push(item.third_party_entity_mapping.entity_id);\n  });\n  \n}\n\ndone({subscriptionIds : subscriptionIds});\n\n"}},{"id":235965,"onSuccess":["subscriptionList"],"onFailure":["subscriptionList"],"name":"fetchChangedSubscription","type":"elementRequest","properties":{"api":"${steps.fetchChangedSubscription_params.fetchSubscriptionConfig.url}","elementInstanceId":"${config.chargebee}","query":"${steps.fetchChangedSubscription_params.fetchSubscriptionConfig.query}","method":"GET"}},{"id":235966,"onSuccess":["fetchChangedSubscription"],"onFailure":[],"name":"fetchChangedSubscription_params","type":"script","properties":{"body":"let configuration = steps.ConfigParams.tpConfig.third_party_configuration.config_json;\n// let fieldNameCustomerID = steps.ConfigParams.customFieldMap.customerFields.CB_Customer_ID;\n// let customer_id = steps.loopOverPersons.entry[fieldNameCustomerID];\n\n\n// if((steps.subscriptionInformation !== undefined) && ((steps.subscriptionInformation.customerId !== null) && (steps.subscriptionInformation.subscriptionData !== null))){\n//   subscriptionInformation = {\n//     customerId: steps.subscriptionInformation.customerId,\n//     subscriptionData: steps.subscriptionInformation.subscriptionData\n//   };\n// }else{\n//   subscriptionInformation = {\n//     customerId: null,\n//     subscriptionData: null\n//   };\n// }\n\nlet fetchSubscriptionConfig = {\n  url: '/subscriptions',\n  query:{\n    sort_by_asc:\"updated_at\",\n    limit: 10,\n\t  updated_at_after: steps.ConfigParams.tpConfig.third_party_configuration.config_json.cloudElements.formulas.formula_FullSyncRun.lastSyncTime\n  }\n}\n\nif(steps.setOffsetChangedSubscription !== undefined){\n  fetchSubscriptionConfig.offset = steps.setOffsetChangedSubscription.offset\n}else{\n  fetchSubscriptionConfig.offset = configuration.batch.sync_subscription.change_subscription || undefined;\n}\n\n// if(steps.InputParams.input.initialSync === false){\n  \n//   if(steps.ConfigParams.tpConfig.third_party_configuration.config_json.cloudElements.formulas.formula_FullSyncRun.lastSyncTime !== undefined){\n    \n//     // if(steps.ConfigParams.tpConfig.third_party_configuration.config_json.cloudElements.formulas.formula_FullSyncRun.firstFullSyncEndTime !== undefined){\n//     //   fetchSubscriptionConfig.query.created_at_after = steps.ConfigParams.tpConfig.third_party_configuration.config_json.cloudElements.formulas.formula_FullSyncRun.firstFullSyncEndTime;\n//     // }\n//       fetchSubscriptionConfig.query.updated_at_after = steps.ConfigParams.tpConfig.third_party_configuration.config_json.cloudElements.formulas.formula_FullSyncRun.lastSyncTime;\n//   }\n  \n//   if(steps.ConfigParams.config.params.events[0].subscription_deleted.action === \"create_deal\"){\n//     fetchSubscriptionConfig.query.include_deleted = true;\n//   } \n// }\n\ndone({\n  fetchSubscriptionConfig: fetchSubscriptionConfig\n});\n"}},{"id":235967,"onSuccess":["fetchDealsPipedrive"],"onFailure":[],"name":"fetchDealParams","type":"script","properties":{"body":"// let fieldNameCustomerID = steps.ConfigParams.customFieldMap.customerFields.CB_Customer_ID;\n// let customer_id = steps.loopOverPersons.entry[fieldNameCustomerID];\n\nlet pipedrive_id = steps.loopOverPersons.entry['id'];\nlet subscription_id = steps.subscriptionInformation.subscriptionData.list[0]['subscription']['id'];\n\n\nlet fetchDealConfig = {\n  url: 'https://api-proxy.pipedrive.com/deals/find',\n  header:{\n    \"Authorization\": steps.ConfigParams.tpConfig.third_party_configuration.config_json.cloudElements.OAuth_Parameters.access_token || null\n  },\n  query:{\n     term: \"Subscription ID: \" + subscription_id,\n     person_id: pipedrive_id\n  }\n}\n\nif(steps.loopOverPersons.entry['org_id'] !== null){\n    let organization_id = steps.loopOverPersons.entry['org_id']['value'];\n    fetchDealConfig.query.org_id = organization_id;\n}\n\ndone({\n  fetchDealConfig: fetchDealConfig\n});\n\n\n"}},{"id":235968,"onSuccess":["noTpEntityMappingFound"],"onFailure":["InvalidAccessToken"],"name":"fetchDealsPipedrive","type":"httpRequest","properties":{"acceptableStatusCodes":"200,404","headers":"${steps.fetchDealParams.fetchDealConfig.header}","query":"${steps.fetchDealParams.fetchDealConfig.query}","url":"${steps.fetchDealParams.fetchDealConfig.url}","method":"GET"}},{"id":235969,"onSuccess":["invoiceFound"],"onFailure":["isChargebeeAuthFailed"],"name":"fetchInvoiceChargebee","type":"elementRequest","properties":{"api":"${steps.fetchInvoiceParams.fetchInvoiceConfig.url}","elementInstanceId":"${config.chargebee}","retry":"false","query":"${steps.fetchInvoiceParams.fetchInvoiceConfig.query}","method":"GET"}},{"id":235970,"onSuccess":["fetchInvoiceChargebee"],"onFailure":[],"name":"fetchInvoiceParams","type":"script","properties":{"body":"let fieldNameCustomerID = steps.ConfigParams.customFieldMap.customerFields.CB_Customer_ID;\nlet customer_id = steps.loopOverPersons.entry[fieldNameCustomerID];\n\nlet fetchInvoiceConfig = {\n  url: '/invoices',\n  query:{\n    customer_id : customer_id,\n    limit: 1,\n    sort_by_desc: \"updated_at\"\n  }\n};\n\ndone({\n  fetchInvoiceConfig: fetchInvoiceConfig\n});\n\n"}},{"id":235971,"onSuccess":["subscriptionFound"],"onFailure":[],"name":"fetchSubscriptionChargebee","type":"httpRequest","properties":{"headers":"${steps.fetchSubscriptionParams.fetchSubscriptionConfig.auth}","query":"${steps.fetchSubscriptionParams.fetchSubscriptionConfig.query}","url":"${steps.fetchSubscriptionParams.fetchSubscriptionConfig.url}","method":"GET"}},{"id":235972,"onSuccess":["fetchSubscriptionChargebee"],"onFailure":[],"name":"fetchSubscriptionParams","type":"script","properties":{"body":"let fieldNameCustomerID = steps.ConfigParams.customFieldMap.customerFields.CB_Customer_ID;\nlet customer_id = steps.loopOverPersons.entry[fieldNameCustomerID];\n\n\n// if((steps.subscriptionInformation !== undefined) && ((steps.subscriptionInformation.customerId !== null) && (steps.subscriptionInformation.subscriptionData !== null))){\n//   subscriptionInformation = {\n//     customerId: steps.subscriptionInformation.customerId,\n//     subscriptionData: steps.subscriptionInformation.subscriptionData\n//   };\n// }else{\n//   subscriptionInformation = {\n//     customerId: null,\n//     subscriptionData: null\n//   };\n// }\n\nlet fetchSubscriptionConfig = {\n  url: \"https://\"+steps.InputParams.input.siteName+\".integrations.\"+steps.InputParams.input.siteDomain+\"/api/pipedrive/subscription\",\n  auth: {\n    \"Authorization\": \"Basic \" + CE.b64(steps.InputParams.input.cbApiKey + \":\" + \"\"),\n    \"api_key\": steps.InputParams.input.cbApiKey\n  },\n  query: {\n    customer_id : customer_id\n  }\n}\n\n// let fetchSubscriptionConfig = {\n//   url: '/subscriptions',\n//   query:{\n//     sort_by_asc:\"updated_at\",\n//     customer_id : customer_id,\n//     limit: 1,\n// \t  status : steps.loopOverSubStatusArray.entry\n//   }\n// }\n\n// if(steps.InputParams.input.initialSync === false){\n  \n//   if(steps.ConfigParams.tpConfig.third_party_configuration.config_json.cloudElements.formulas.formula_FullSyncRun.lastSyncTime !== undefined){\n    \n//     // if(steps.ConfigParams.tpConfig.third_party_configuration.config_json.cloudElements.formulas.formula_FullSyncRun.firstFullSyncEndTime !== undefined){\n//     //   fetchSubscriptionConfig.query.created_at_after = steps.ConfigParams.tpConfig.third_party_configuration.config_json.cloudElements.formulas.formula_FullSyncRun.firstFullSyncEndTime;\n//     // }\n//       fetchSubscriptionConfig.query.updated_at_after = steps.ConfigParams.tpConfig.third_party_configuration.config_json.cloudElements.formulas.formula_FullSyncRun.lastSyncTime;\n//   }\n  \n//   if(steps.ConfigParams.config.params.events[0].subscription_deleted.action === \"create_deal\"){\n//     fetchSubscriptionConfig.query.include_deleted = true;\n//   } \n// }\n\n// done({\n//   fetchSubscriptionConfig: fetchSubscriptionConfig,\n//   subscriptionInformation: subscriptionInformation\n// });\n\ndone({\n  fetchSubscriptionConfig: fetchSubscriptionConfig\n});\n\n\n"}},{"id":235973,"onSuccess":["isAuthFailed"],"onFailure":[],"name":"getAccountInformationPipedrive","type":"httpRequest","properties":{"acceptableStatusCodes":"200,401","headers":"${steps.ConfigParams.getAccountInfomationPipedrive.headers}","url":"${steps.ConfigParams.getAccountInfomationPipedrive.url}","method":"GET"}},{"id":235974,"onSuccess":["updateChargebeeElementParams"],"onFailure":[],"name":"getChargebeeElementInstance","type":"request","properties":{"api":"/instances/${steps.ConfigParams.tpConfig.third_party_configuration.config_json.chargebee.instance}","method":"GET"}},{"id":235975,"onSuccess":["isAuthErrorGetDealFieldsPipedrive"],"onFailure":["isAuthErrorGetDealFieldsPipedrive"],"name":"getDealFieldsPipedrive","type":"httpRequest","properties":{"acceptableStatusCodes":"200,401","retryAttempts":"5","retryStatusCodes":"401","retryDelay":"200","headers":"${steps.ConfigParams.config.dealFieldsApiConfig.headers}","retry":"true","url":"${steps.ConfigParams.config.dealFieldsApiConfig.url}","method":"GET"}},{"id":235976,"onSuccess":["isDealNotFound"],"onFailure":["InvalidAccessToken"],"name":"getDetailsApiAuthError","type":"filter","properties":{"body":"if(steps.getDetailsOfDeal.response.code === 401){\n  done(false);\n}\n\ndone(true);"}},{"id":235977,"onSuccess":["getDetailsApiAuthError"],"onFailure":["getDetailsApiAuthError"],"name":"getDetailsOfDeal","type":"httpRequest","properties":{"acceptableStatusCodes":"200,404,401","headers":"${steps.getDetailsOfDealParam.getDetailsOfDealConfig.header}","query":"${steps.getDetailsOfDealParam.getDetailsOfDealConfig.query}","url":"${steps.getDetailsOfDealParam.getDetailsOfDealConfig.url}","method":"GET"}},{"id":235978,"onSuccess":["isIdNull"],"onFailure":[],"name":"getDetailsOfDealParam","type":"script","properties":{"body":"// let id = steps.fetchDealsPipedrive.response.body.data[0]['id'];\n\nlet id = steps.retrieveTpEntityMappingForDeal2.response.body.third_party_entity_mapping.third_party_entity_id || undefined;\n\nif(id === undefined){\n  done(false);\n}\n\nlet getDetailsOfDealConfig = {\n  url: 'https://api-proxy.pipedrive.com/deals/'+id,\n  header:{\n    \"Authorization\": steps.ConfigParams.tpConfig.third_party_configuration.config_json.cloudElements.OAuth_Parameters.access_token || null\n  }\n}\n\n\ndone({\n  getDetailsOfDealConfig: getDetailsOfDealConfig\n});\n\n"}},{"id":235979,"onSuccess":["getSubscriptionOnChargebee_params"],"onFailure":["InvalidAccessToken_1"],"name":"getDetailsOfExistingDeal","type":"httpRequest","properties":{"acceptableStatusCodes":"200,404","headers":"${steps.getDetailsOfExistingDeal_params.getDetailsOfDealConfig.header}","url":"${steps.getDetailsOfExistingDeal_params.getDetailsOfDealConfig.url}","method":"GET"}},{"id":235980,"onSuccess":["getDetailsOfExistingDeal"],"onFailure":[],"name":"getDetailsOfExistingDeal_params","type":"script","properties":{"body":"let id = steps.loopOverExistingDeals.entry.id;\n\nif(id === undefined){\n  done(false);\n}\n\nlet getDetailsOfDealConfig = {\n  url: 'https://api-proxy.pipedrive.com/deals/'+id,\n  header:{\n    \"Authorization\": steps.ConfigParams.tpConfig.third_party_configuration.config_json.cloudElements.OAuth_Parameters.access_token || null\n  }\n}\n\n\ndone({\n  getDetailsOfDealConfig: getDetailsOfDealConfig\n});"}},{"id":235981,"onSuccess":["FailedToSync"],"onFailure":["ApiError"],"name":"GetError","type":"httpRequest","properties":{"headers":"${steps.GetErrorParams.params.config.auth}","query":"${steps.GetErrorParams.params.config.query}","url":"${steps.GetErrorParams.params.config.url}","method":"GET"}},{"id":235982,"onSuccess":["GetError"],"onFailure":[],"name":"GetErrorParams","type":"script","properties":{"body":"let params = steps.GetTpErrorParams.params;\nlet configuration =  steps.getTpConfig.response.body.third_party_configuration.config_json;\n\nif(steps.GetErrorParams !== undefined){\n  params.config.query.offset = steps.GetError.response.body.next_offset;\n}else{\n  params.config.query.offset = configuration.batch.sync_subscription.get_error || undefined;\n}\n\ndone({params: params});"}},{"id":235983,"onSuccess":["getTpEntityMappingOfSubscription"],"onFailure":["getTpEntityMappingOfSubscription"],"name":"getExistingDealsInPipedrive","type":"httpRequest","properties":{"retryAttempts":"5","acceptableStatusCodes":"200,401,404,500","retryDelay":"200","headers":"${steps.getExistingDealsParams.fetchDealConfig.header}","retry":"true","query":"","url":"${steps.getExistingDealsParams.fetchDealConfig.url}","method":"GET"}},{"id":240204,"onSuccess":["getTpEntityMappingOfSubscription"],"onFailure":[],"name":"getExistingDealsInPipedriveFailed","type":"filter","properties":{"body":"if(steps.getExistingDealsInPipedrive.response.code === 401){\n  done(false);\n}\n\ndone(true);"}},{"id":235984,"onSuccess":["clearSubscriptionInformation"],"onFailure":[],"name":"getExistingDealsOfPerson_params","type":"script","properties":{"body":"let pipedrive_id = steps.loopOverPersons.entry['id'];\n\nlet startValue = 0;\n\nif(steps.setOffsetForExistingDeals !== undefined){\n  startValue = steps.setOffsetForExistingDeals.offset;\n}\n\nlet fetchDealConfig = {\n  url: 'https://api-proxy.pipedrive.com/persons/'+pipedrive_id+'/deals',\n  header:{\n    \"Authorization\": steps.ConfigParams.tpConfig.third_party_configuration.config_json.cloudElements.OAuth_Parameters.access_token || null\n  },\n  query:{\n    start: startValue,\n    limit: \"10\",\n    status: \"open\"\n  }\n}\n\ndone({\n  fetchDealConfig: fetchDealConfig\n});"}},{"id":235985,"onSuccess":["dealIdFoundInTpEntity"],"onFailure":[],"name":"getExistingDealsParams","type":"script","properties":{"body":"// let pipedrive_id = steps.loopOverPersons.entry['id'];\n\n// let startValue = 0;\n\n// if(steps.setOffsetForExistingDeals !== undefined){\n//   startValue = steps.setOffsetForExistingDeals.offset;\n// }\n\n// let fetchDealConfig = {\n//   url: 'https://api-proxy.pipedrive.com/persons/'+pipedrive_id+'/deals',\n//   header:{\n//     \"Authorization\": steps.ConfigParams.tpConfig.third_party_configuration.config_json.cloudElements.OAuth_Parameters.access_token || null\n//   },\n//   query:{\n//     start: startValue,\n//     limit: \"10\",\n//     status: \"open\"\n//   }\n// }\n\n// done({\n//   fetchDealConfig: fetchDealConfig\n// });\n\nlet deal_id = steps.getTpEntityMappingOfCustomer.response.body.third_party_entity_mapping.old_resource.subscription_deal_id || null;\n\nlet fetchDealConfig = {\n  url: 'https://api-proxy.pipedrive.com/deals/'+deal_id,\n  header:{\n    \"Authorization\": steps.ConfigParams.tpConfig.third_party_configuration.config_json.cloudElements.OAuth_Parameters.access_token || null\n  }\n};\n\nlet apiKey = steps.InputParams.input.cbApiKey;\nlet siteName = steps.InputParams.input.siteName;\nlet siteDomain = steps.InputParams.input.siteDomain;\nlet integrationName = steps.InputParams.input.integrationName;\n\nlet password = \"\";\n\nlet subscriptionId = steps.loopOverChangedSubscription.entry.subscription.id;\n\nlet tpEntityPayload = {\n  url: \"https://\"+siteName+\".\"+siteDomain+\"/api/v2/third_party_entity_mappings/retrieve\",\n  auth:{\n    Authorization: \"Basic \" + CE.b64(apiKey + \":\" + password)\n  },\n  query:{\n    integration_name: integrationName,\n    entity_id: subscriptionId,\n    entity_type: \"subscription\"\n  }\n};\n\ndone({\n  fetchDealConfig: fetchDealConfig,\n  tpEntityPayload: tpEntityPayload\n});"}},{"id":235986,"onSuccess":["ErrorList"],"onFailure":[],"name":"GetFailedSubscription","type":"elementRequest","properties":{"api":"/subscriptions","elementInstanceId":"${config.chargebee}","query":"${steps.CustomFieldParamsForErrorRecords.query}","method":"GET"}},{"id":235987,"onSuccess":["latestDataChargebee"],"onFailure":["ApiError"],"name":"getLatestCustomerDataChargebee","type":"httpRequest","properties":{"headers":"${steps.getLatestCustomerDataChargebee_params.fetchSubscriptionConfig.auth}","query":"${steps.getLatestCustomerDataChargebee_params.fetchSubscriptionConfig.query}","url":"${steps.getLatestCustomerDataChargebee_params.fetchSubscriptionConfig.url}","method":"GET"}},{"id":235988,"onSuccess":["getLatestCustomerDataChargebee"],"onFailure":[],"name":"getLatestCustomerDataChargebee_params","type":"script","properties":{"body":"let customer_id = steps.loopOverChangedSubscription.entry.subscription.customer_id;\n\nlet fetchSubscriptionConfig = {\n  url: \"https://\"+steps.InputParams.input.siteName+\".integrations.\"+steps.InputParams.input.siteDomain+\"/api/pipedrive/subscription\",\n  auth: {\n    \"Authorization\": \"Basic \" + CE.b64(steps.InputParams.input.cbApiKey + \":\" + \"\"),\n    \"api_key\": steps.InputParams.input.cbApiKey\n  },\n  query: {\n    customer_id : customer_id\n  }\n};\n\ndone({\n  fetchSubscriptionConfig: fetchSubscriptionConfig\n});"}},{"id":235989,"onSuccess":["getThirdPartyInstanceDetails"],"onFailure":["FailedToGetAccessToken"],"name":"getNewToken","type":"httpRequest","properties":{"headers":"${steps.getNewToken_params.payload.headers}","body":"${steps.getNewToken_params.payload.body}","url":"${steps.getNewToken_params.payload.url}","method":"POST"}},{"id":235990,"onSuccess":["getNewToken"],"onFailure":["getNewToken"],"name":"getNewToken_params","type":"script","properties":{"body":"if(steps.getTpConfig.response.body.third_party_configuration.config_json.cloudElements.OAuth_Parameters === undefined){\n  done(false);\n}\n\n\nlet params = steps.getTpConfig.response.body.third_party_configuration.config_json.cloudElements.OAuth_Parameters;\n\nlet payload = {\n  url: \"https://oauth.pipedrive.com/oauth/token\",\n  headers : {\n    \"Content-Type\" : \"application/x-www-form-urlencoded\",\n    \"Authorization\" : \"Basic \" + CE.b64(params.client_info.client_id + \":\" + params.client_info.client_secret)\n  },\n  body : \"grant_type=refresh_token&refresh_token=\" + params.refresh_token\n};\n\ndone({\n  payload: payload\n});"}},{"id":235991,"onSuccess":["getPersonsPipedrive"],"onFailure":[],"name":"getPersonsConfig","type":"script","properties":{"body":"let getPersonPipedriveConfig = {\n  url: 'https://api-proxy.pipedrive.com/persons',\n  header:{\n    \"Authorization\": steps.ConfigParams.tpConfig.third_party_configuration.config_json.cloudElements.OAuth_Parameters.access_token || null\n  },\n  query:{\n    start: 0,\n \t  limit: 10\n  }\n}\n\n\nif(steps.setOffsetPerson !== undefined) {\n  getPersonPipedriveConfig.query.start = steps.setOffsetPerson.next_start;\n}\n\ndone({\n  getPersonPipedriveConfig: getPersonPipedriveConfig\n});\n\n\n"}},{"id":235992,"onSuccess":["isAnyPersonExist"],"onFailure":["isAnyPersonExist"],"name":"getPersonsPipedrive","type":"httpRequest","properties":{"headers":"${steps.getPersonsConfig.getPersonPipedriveConfig.header}","query":"${steps.getPersonsConfig.getPersonPipedriveConfig.query}","url":"${steps.getPersonsConfig.getPersonPipedriveConfig.url}","method":"GET"}},{"id":235993,"onSuccess":["updatePipedriveElementInstance_params"],"onFailure":[],"name":"getPipedriveElementInstance","type":"request","properties":{"api":"/instances/${steps.ConfigParams.tpConfig.third_party_configuration.config_json.cloudElements.thirdParty.instance}","method":"GET"}},{"id":235994,"onSuccess":["updatePipedriveElementInstance_params1"],"onFailure":[],"name":"getPipedriveElementInstance1","type":"request","properties":{"api":"/instances/${steps.ConfigParams.tpConfig.third_party_configuration.config_json.cloudElements.thirdParty.instance}","method":"GET"}},{"id":235995,"onSuccess":["subscriptionFoundOnChargebee"],"onFailure":[],"name":"getSubscriptionOnChargebee","type":"elementRequest","properties":{"retryAttempts":"5","retryDelay":"200","api":"${steps.getSubscriptionOnChargebee_params.fetchSubscriptionConfig.url}","elementInstanceId":"${config.chargebee}","retry":"true","query":"${steps.getSubscriptionOnChargebee_params.fetchSubscriptionConfig.query}","method":"GET"}},{"id":235996,"onSuccess":["getSubscriptionOnChargebee"],"onFailure":[],"name":"getSubscriptionOnChargebee_params","type":"script","properties":{"body":"let dealTitle = steps.loopOverExistingDeals.entry.title;\nlet subscriptionId = dealTitle.split(\": \")[1];\n\nlet fetchSubscriptionConfig = {\n  url: '/subscriptions',\n  query:{\n    subscription_id : subscriptionId,\n    include_deleted: true\n  }\n}\n\nif(steps.retrieveTpEntityMappingForDeal.response.body.third_party_entity_mapping.last_sync_at !== undefined){\n    fetchSubscriptionConfig.query.updated_at_after = steps.retrieveTpEntityMappingForDeal.response.body.third_party_entity_mapping.last_sync_at;\n}\n\n// if((steps.InputParams.input.initialSync === false) && (steps.ConfigParams.tpConfig.third_party_configuration.config_json.cloudElements.formulas.formula_FullSyncRun.lastSyncTime !== undefined)){\n//   fetchSubscriptionConfig.query.updated_at_after = steps.ConfigParams.tpConfig.third_party_configuration.config_json.cloudElements.formulas.formula_FullSyncRun.lastSyncTime;\n// }\n\ndone({\n  fetchSubscriptionConfig: fetchSubscriptionConfig\n});\n\n\n"}},{"id":235997,"onSuccess":["updateElementInstanceParams"],"onFailure":[],"name":"getThirdPartyInstanceDetails","type":"request","properties":{"api":"/instances/${steps.getTpConfig.response.body.third_party_configuration.config_json.cloudElements.thirdParty.instance}","method":"GET"}},{"id":235998,"onSuccess":["isTokenAboutToExpire"],"onFailure":["ApiError"],"name":"getTpConfig","type":"httpRequest","properties":{"retryAttempts":"5","retryDelay":"200","headers":"${steps.InputParams.getTpConfigParams.auth}","retry":"true","query":"${steps.InputParams.getTpConfigParams.query}","url":"${steps.InputParams.getTpConfigParams.url}","method":"GET"}},{"id":235999,"onSuccess":["TpEntityMappingFound"],"onFailure":[],"name":"getTpEntityMappingOfCustomer","type":"httpRequest","properties":{"headers":"${steps.getTpEntityMappingOfCustomer_params.payload.auth}","query":"${steps.getTpEntityMappingOfCustomer_params.payload.query}","url":"${steps.getTpEntityMappingOfCustomer_params.payload.url}","method":"GET"}},{"id":240372,"onSuccess":["getTpEntityMappingOfCustomers_2"],"onFailure":[],"name":"getTpEntityMappingOfCustomer2_params","type":"script","properties":{"body":"let apiKey = steps.InputParams.input.cbApiKey;\nlet siteName = steps.InputParams.input.siteName;\nlet siteDomain = steps.InputParams.input.siteDomain;\nlet integrationName = steps.InputParams.input.integrationName;\n\nlet password = \"\";\n\nlet customerId = steps.loopOverChangedSubscription.entry.subscription.customer_id;\n\nlet payload = {\n  url: \"https://\"+siteName+\".\"+siteDomain+\"/api/v2/third_party_entity_mappings/retrieve\",\n  auth:{\n    Authorization: \"Basic \" + CE.b64(apiKey + \":\" + password)\n  },\n  query:{\n    integration_name: integrationName,\n    entity_id: customerId,\n    entity_type: \"customer\",\n  }\n};\n\n//--Get Subscription ---\n\nlet subscriptionId = steps.loopOverChangedSubscription.entry.subscription.id;\n\nlet tpEntityPayload = {\n  url: \"https://\"+siteName+\".\"+siteDomain+\"/api/v2/third_party_entity_mappings/retrieve\",\n  auth:{\n    Authorization: \"Basic \" + CE.b64(apiKey + \":\" + password)\n  },\n  query:{\n    integration_name: integrationName,\n    entity_id: subscriptionId,\n    entity_type: \"subscription\"\n  }\n};\n\ndone({\n  payload: payload,\n  tpEntityPayload: tpEntityPayload\n});\n\n\n"}},{"id":236000,"onSuccess":["getTpEntityMappingOfCustomer"],"onFailure":[],"name":"getTpEntityMappingOfCustomer_params","type":"script","properties":{"body":"let apiKey = steps.InputParams.input.cbApiKey;\nlet siteName = steps.InputParams.input.siteName;\nlet siteDomain = steps.InputParams.input.siteDomain;\nlet integrationName = steps.InputParams.input.integrationName;\n\nlet password = \"\";\n\nlet customerId = steps.loopOverChangedSubscription.entry.subscription.customer_id;\n\nlet payload = {\n  url: \"https://\"+siteName+\".\"+siteDomain+\"/api/v2/third_party_entity_mappings/retrieve\",\n  auth:{\n    Authorization: \"Basic \" + CE.b64(apiKey + \":\" + password)\n  },\n  query:{\n    integration_name: integrationName,\n    entity_id: customerId,\n    entity_type: \"customer\",\n  }\n};\n\ndone({\n  payload: payload\n});\n\n\n"}},{"id":240371,"onSuccess":["getTpEntityMappingOfSubscription_2"],"onFailure":[],"name":"getTpEntityMappingOfCustomers_2","type":"httpRequest","properties":{"headers":"${steps.getTpEntityMappingOfCustomer2_params.payload.auth}","query":"${steps.getTpEntityMappingOfCustomer2_params.payload.query}","url":"${steps.getTpEntityMappingOfCustomer2_params.payload.url}","method":"GET"}},{"id":236001,"onSuccess":["noDealExist"],"onFailure":["ApiError"],"name":"getTpEntityMappingOfSubscription","type":"httpRequest","properties":{"headers":"${steps.getExistingDealsParams.tpEntityPayload.auth}","query":"${steps.getExistingDealsParams.tpEntityPayload.query}","url":"${steps.getExistingDealsParams.tpEntityPayload.url}","method":"GET"}},{"id":240374,"onSuccess":["updateTpEntityFailedParams"],"onFailure":[],"name":"getTpEntityMappingOfSubscription_2","type":"httpRequest","properties":{"headers":"${steps.getTpEntityMappingOfCustomer2_params.tpEntityPayload.auth}","query":"${steps.getTpEntityMappingOfCustomer2_params.tpEntityPayload.query}","url":"${steps.getTpEntityMappingOfCustomer2_params.tpEntityPayload.url}","method":"GET"}},{"id":240379,"onSuccess":["getTpEntityMappingOfSubscription_2"],"onFailure":[],"name":"getTpEntityMappingOfSubscription2_params","type":"script","properties":{"body":"let apiKey = steps.InputParams.input.cbApiKey;\nlet siteName = steps.InputParams.input.siteName;\nlet siteDomain = steps.InputParams.input.siteDomain;\nlet integrationName = steps.InputParams.input.integrationName;\n\nlet password = \"\";\n\nlet subscriptionId = steps.loopOverChangedSubscription.entry.subscription.id;\n\nlet tpEntityPayload = {\n  url: \"https://\"+siteName+\".\"+siteDomain+\"/api/v2/third_party_entity_mappings/retrieve\",\n  auth:{\n    Authorization: \"Basic \" + CE.b64(apiKey + \":\" + password)\n  },\n  query:{\n    integration_name: integrationName,\n    entity_id: subscriptionId,\n    entity_type: \"subscription\"\n  }\n};\n\ndone({\n  tpEntityPayload: tpEntityPayload\n});"}},{"id":236002,"onSuccess":["CheckErrorRecords"],"onFailure":[],"name":"GetTpError","type":"httpRequest","properties":{"headers":"${steps.GetTpErrorParams.params.config.auth}","query":"${steps.GetTpErrorParams.params.config.query}","url":"${steps.GetTpErrorParams.params.config.url}","method":"GET"}},{"id":236003,"onSuccess":["GetTpError"],"onFailure":[],"name":"GetTpErrorParams","type":"script","properties":{"body":"let apiKey = steps.InputParams.input.cbApiKey;\nlet siteName = steps.InputParams.input.siteName;\nlet siteDomain = steps.InputParams.input.siteDomain;\nlet integrationName = steps.InputParams.input.integrationName;\n\nlet password = \"\";\nlet startTime;\nlet endTime;\nlet syncStatus = steps.LastSyncDetails.response.body.third_party_sync_detail;\n\nlet params = {\n\n  config: {\n    url: \"https://\" + siteName + \".\" + siteDomain + \"/api/v2/third_party_entity_mappings/list_all\",\n    auth: {\n      Authorization: \"Basic \" + CE.b64(apiKey + \":\" + password)\n    },\n    query: {\n      \"integration_name\": integrationName,\n      \"status[is]\": \"update_failed\",\n      \"entity_type\": \"subscription\",\n      \"modified_at[after]\": syncStatus.context.syncData.previousSyncStart,\n      \"modified_at[before]\": syncStatus.context.syncData.previousSyncEnd\n    }\n  }\n\n};\n\ndone({\n  params: params\n});\n\n\n"}},{"id":236623,"onSuccess":["updateTpConfigParams_2"],"onFailure":["UpdateOffsetParams"],"name":"hasBatchingFinished","type":"filter","properties":{"body":"let batch_size = steps.ConfigParams.tpConfig.third_party_configuration.config_json.batch.batch_size ;\n\nif((steps.fetchChangedSubscription && steps.fetchChangedSubscription.response.body.next_offset !== undefined ) || (steps.GetError && steps.GetError.response.body.next_offset !== undefined)){\ndone(false);\n}else if(steps.subscriptionList && steps.subscriptionList.contactList && steps.subscriptionList.contactList.length >= batch_size){\n  done(false);\n}\nelse{\n  done(true);\n}\n\n\n\n\n\n\n"}},{"id":236004,"onSuccess":["setOffsetPerson"],"onFailure":["updateTpConfigParams_2"],"name":"HasNextOffset","type":"filter","properties":{"body":"if(steps.getPersonsPipedrive.response.body.additional_data.pagination.more_items_in_collection === true){\n  done(true);\n}\n\nif(steps.InputParams.input.initialSync === true){\n  done(false);\n}\n\n\ndone(false);\n"}},{"id":236005,"onSuccess":["GetTpErrorParams"],"onFailure":["setOffsetChangedSubscription"],"name":"hasNextOffsetChangedSubscription","type":"filter","properties":{"body":"let configuration = steps.ConfigParams.tpConfig.third_party_configuration.config_json;\nlet batch_size = configuration.batch.batch_size;\nlet contactLength = steps.subscriptionList.contactList.length;\n\n\nif(steps.fetchChangedSubscription.response.body.next_offset !== undefined){\n if(((steps.setOffsetChangedSubscription) && (steps.setOffsetChangedSubscription.offset === steps.fetchChangedSubscription.response.body.next_offset)) || contactLength >= batch_size || configuration.batch.sync_subscription.change_subscription === null ){\n   done(true);\n } else{\n   done(false);\n }\n \n}\n\ndone(true);"}},{"id":236006,"onSuccess":["setOffsetForExistingDeals"],"onFailure":["fetchSubscriptionParams"],"name":"hasNextOffsetForExistingDeals","type":"filter","properties":{"body":"if(steps.getExistingDealsInPipedrive.response.body.additional_data.pagination.more_items_in_collection === true){\n  done(true);\n}\n\ndone(false);"}},{"id":236007,"onSuccess":["getTpConfig"],"onFailure":[],"name":"InputParams","type":"script","properties":{"body":"let triggerInput = trigger.args;\n\nlet apiToken = triggerInput.apiToken;\nlet cbApiKey = triggerInput.cbApiKey;\nlet password = triggerInput.cbPassword;\nlet initialSync = triggerInput.initialSync;\nlet integrationName = triggerInput.integrationName;\nlet siteName = triggerInput.siteName;\nlet siteDomain = triggerInput.siteDomain;\nlet syncFields = triggerInput.syncFields;\n\n\nfunction getAction(input){\n  var action;\n  if(input === \"option1\"){\n    action = \"create_deal\";\n  }\n  if(input === \"option2\"){\n    action = \"update_deal\";\n  }\n  if(input === \"option3\"){\n    action = \"do_nothing\";\n  }\n  return action;\n}\n\nlet addNotesSubscription = false;\nif(triggerInput.rules.addNotesSubscription === \"true\"){\n  addNotesSubscription = true;\n}\n\nlet updateDealValue = false;\nif(triggerInput.rules.howToUpdateDealValue === \"option1\"){\n  updateDealValue = true;\n}\n\nlet subscription_created = getAction(triggerInput.rules.subCreated);\nlet subscription_started = getAction(triggerInput.rules.subUpdated);\nlet subscription_activated = getAction(triggerInput.rules.subUpdated);\nlet subscription_changed = getAction(triggerInput.rules.subUpdated);\nlet subscription_paused = getAction(triggerInput.rules.subPaused);\nlet subscription_resumed = getAction(triggerInput.rules.subResumed);\nlet subscription_cancelled = getAction(triggerInput.rules.subCancelled);\nlet subscription_reactivated = getAction(triggerInput.rules.subReactivated);\nlet subscription_renewed = getAction(triggerInput.rules.subUpdated);\nlet subscription_deleted = getAction(triggerInput.rules.subDeleted);\n\n\nlet input = {\n  cbApiKey: cbApiKey,\n  apiToken: apiToken,\n  initialSync: initialSync,\n  integrationName: integrationName,\n  siteName: siteName,\n  siteDomain: siteDomain,\n  syncFields: syncFields,\n  addNotesSubscription: addNotesSubscription,\n  syncSubscription: true,\n  linkSubAttributesToPerson: false,\n  updateDealValue: updateDealValue,\n  events:[{\n    subscription_created:{\n      action: subscription_created, //create_deal,update_deal,do_nothing\n      pipeline: 1,\n      stage: 4\n    },\n    subscription_started:{\n      action: subscription_started, //create_deal,update_deal,do_nothing\n      pipeline: 1,\n      stage: 4\n    },\n    subscription_activated:{\n      action: subscription_activated, //create_deal,update_deal,do_nothing\n      pipeline: 1,\n      stage: 4\n    },\n    subscription_changed:{\n      action: subscription_changed, //create_deal,update_deal,do_nothing\n      pipeline: 1,\n      stage: 4\n    },\n    subscription_paused:{\n      action: subscription_paused, //create_deal,update_deal,do_nothing\n      pipeline: 1,\n      stage: 5\n    },\n    subscription_resumed:{\n      action: subscription_resumed, //create_deal,update_deal,do_nothing\n      pipeline: 1,\n      stage: 4\n    },\n    subscription_cancelled:{\n      action: subscription_cancelled, //create_deal,update_deal,do_nothing\n      pipeline: 1,\n      stage: 2\n    },\n    subscription_reactivated:{\n      action: subscription_reactivated, //create_deal,update_deal,do_nothing\n      pipeline: 1,\n      stage: 5\n    },\n    subscription_renewed:{\n      action: subscription_renewed, //create_deal,update_deal,do_nothing\n      pipeline: 1,\n      stage: 4\n    },\n    subscription_deleted:{\n      action: subscription_deleted, //create_deal,update_deal,do_nothing\n      pipeline: 1,\n      stage: 4\n    }\n  }]\n};\n\nlet getTpConfigParams = {\n    url: \"https://\"+siteName+\".\"+siteDomain+\"/api/v2/third_party_configurations\",\n    auth:{\n      Authorization: \"Basic \" + CE.b64(cbApiKey + \":\" + password)\n    },\n    query:{\n      integration_name: integrationName\n    }\n};\n\nlet tpConfigUpdateParams = {\n  url: \"https://\"+siteName+\".integrations.\"+siteDomain+\"/integrations/update_tp_integ_conf\",\n  headers: {\n    \"Content-Type\": \"application/json\",\n    \"cache-control\": \"no-cache\"\n  },\n  body:  {\n     site_name: siteName,\n     api_key: cbApiKey,\n     integration_name: integrationName\n  }\n};\n\nlet syncParams = {\n  url: \"https://\" + siteName + \".\" + siteDomain + \"/api/v2/third_party_sync_details/retrieve_latest_sync\",\n  auth: {\n    Authorization: \"Basic \" + CE.b64(cbApiKey + \":\" + password)\n  },\n  query: {\n    'third_party_configuration[integration_name]': integrationName\n  }\n};\n\ndone({\n  input: input,\n  getTpConfigParams: getTpConfigParams,\n  tpConfigUpdateParams: tpConfigUpdateParams,\n  syncParams: syncParams\n});"}},{"id":236008,"onSuccess":["requestNewPipedriveToken_params"],"onFailure":["getTpEntityMappingOfCustomer2_params"],"name":"InvalidAccessToken","type":"filter","properties":{"body":"if((steps.getExistingDealsInPipedrive !== undefined) && (steps.getExistingDealsInPipedrive.response.code === 401)){\n  done(true);\n}\n\nif((steps.fetchDealsPipedrive !== undefined) && (steps.fetchDealsPipedrive.response.code === 401)){\n  done(true);\n}\n\nif((steps.createDealPipedrive !== undefined) && (steps.createDealPipedrive.response.code === 401)){\n  done(true);\n}\n\nif((steps.addNote !== undefined) && (steps.addNote.response.code === 401)){\n  done(true);\n}\n\nif((steps.updateDealPipedrive !== undefined) && (steps.updateDealPipedrive.response.code === 401)){\n  done(true);\n}\n\nif((steps.addNote2 !== undefined) && (steps.addNote2.response.code === 401)){\n  done(true);\n}\n\nif((steps.createDealPipedrive2 !== undefined) && (steps.createDealPipedrive2.response.code === 401)){\n  done(true);\n}\n\nif((steps.addNote3 !== undefined) && (steps.addNote3.response.code === 401)){\n  done(true);\n}\n\nif((steps.getDetailsOfDeal !== undefined) && (steps.getDetailsOfDeal.response.code === 401)){\n  done(true);\n}\n\ndone(false);"}},{"id":236009,"onSuccess":["requestNewPipedriveToken_params1"],"onFailure":[],"name":"InvalidAccessToken_1","type":"filter","properties":{"body":"if((steps.getDetailsOfExistingDeal !== undefined) && (steps.getDetailsOfExistingDeal.response.code === 401)){\n  done(true);\n}\n\nif((steps.updateExistingDeal !== undefined) && (steps.updateExistingDeal.response.code === 401)){\n  done(true);\n}\n\nif((steps.addNote4 !== undefined) && (steps.addNote4.response.code === 401)){\n  done(true);\n}\n\ndone(false);"}},{"id":236010,"onSuccess":["invoiceInformation"],"onFailure":["invoiceInformation"],"name":"invoiceFound","type":"filter","properties":{"body":"if(steps.fetchInvoiceChargebee.response.code !== 200){\n  done(false);\n}\n\nif(steps.fetchInvoiceChargebee.response.body.list === undefined){\n  done(false);\n}\n\ndone(true);"}},{"id":236011,"onSuccess":[],"onFailure":[],"name":"invoiceInformation","type":"script","properties":{"body":"let customer_id = steps.fetchInvoiceChargebee.request.query.customer_id;\nlet invoiceData = null;\n\nif(steps.invoiceFound.continue === true){\n  invoiceData = steps.fetchInvoiceChargebee.response.body.list[0];\n}else{\n  invoiceData = null;\n}\n\n\ndone({\n  customerId: customer_id,\n  invoiceData :invoiceData\n});"}},{"id":236012,"onSuccess":["loopOverPersons"],"onFailure":["isAuthErrorGetPersonPipedrive"],"name":"isAnyPersonExist","type":"filter","properties":{"body":"if(steps.getPersonsPipedrive.response.code === 200){\n  if(steps.getPersonsPipedrive.response.body.data !== null){\n    done(true);\n  }\n}\n\ndone(false);\n"}},{"id":236013,"onSuccess":["defineAction"],"onFailure":["InvalidAccessToken"],"name":"isAuthenticationError","type":"filter","properties":{"body":"if(steps.getExistingDealsInPipedrive.response.code === 200){\n  done(true);\n}\n\ndone(false);"}},{"id":236014,"onSuccess":["dealFieldInformation"],"onFailure":["getNewToken_params"],"name":"isAuthErrorCreateDealField","type":"filter","properties":{"body":"if(steps.createDealField.response.code === 401){\n  done(false);\n}\n\ndone(true);"}},{"id":236015,"onSuccess":["dealFieldsConfig"],"onFailure":["getNewToken_params"],"name":"isAuthErrorGetDealFieldsPipedrive","type":"filter","properties":{"body":"if(steps.getDealFieldsPipedrive.response.code === 401){\n  done(false);\n}\n\ndone(true);"}},{"id":236016,"onSuccess":["updateTpConfigParams_2"],"onFailure":["getNewToken_params"],"name":"isAuthErrorGetPersonPipedrive","type":"filter","properties":{"body":"if(steps.getPersonsPipedrive.response.code === 401){\n  done(false);\n}\n\ndone(true);"}},{"id":236017,"onSuccess":["updateTpEntityParams_1"],"onFailure":["InvalidAccessToken_1"],"name":"isAuthErrorUpdateExistingDeal","type":"filter","properties":{"body":"if(steps.updateExistingDeal.response.code === 401){\n  done(false);\n}\n\ndone(true);"}},{"id":236018,"onSuccess":["syncSubscription"],"onFailure":["getNewToken_params"],"name":"isAuthFailed","type":"filter","properties":{"body":"if(steps.getAccountInformationPipedrive.response.code === 401){\n  done(false);\n}\n\ndone(true);"}},{"id":236019,"onSuccess":["getChargebeeElementInstance"],"onFailure":[],"name":"isChargebeeAuthFailed","type":"filter","properties":{"body":"if(steps.fetchInvoiceChargebee.response.code === 401){\n  done(true);\n}\n\ndone(false);"}},{"id":236020,"onSuccess":["isDealOpen"],"onFailure":["deriveActionSubCreate"],"name":"isDealNotFound","type":"filter","properties":{"body":"if(steps.getDetailsOfDeal.response.code === 404){\n  done(false);\n}\n\ndone(true);"}},{"id":236021,"onSuccess":["defineAction"],"onFailure":["updateErrorLog"],"name":"isDealOpen","type":"filter","properties":{"body":"if(steps.getDetailsOfDeal.response.code !== 200){\n  done(false);\n}\n\nif(steps.getDetailsOfDeal.response.code === 200){\n  if(steps.getDetailsOfDeal.response.body.data.status !== 'won'){\n    done(true);\n  }\n}\n\ndone(false);"}},{"id":236022,"onSuccess":["getDetailsOfExistingDeal_params"],"onFailure":[],"name":"isExistingDealOpen","type":"filter","properties":{"body":"if(steps.loopOverExistingDeals.entry.status === \"open\"){\n  done(steps.loopOverExistingDeals.entry.title.startsWith(\"Subscription ID:\"));//If string start with Subscription ID, then true, otherwise skip (false)\n}\n\ndone(false);"}},{"id":236023,"onSuccess":["getDetailsOfDeal"],"onFailure":["deriveActionSubCreate"],"name":"isIdNull","type":"filter","properties":{"body":"if(steps.getDetailsOfDealParam.id === null){\n  done(false);\n}\n\ndone(true);"}},{"id":240323,"onSuccess":["updateLoopIndex"],"onFailure":["ApiError"],"name":"isServerTimeout","type":"filter","properties":{"body":"if((steps.getExistingDealsInPipedrive !== undefined) && (steps.getExistingDealsInPipedrive.response.code === 500)){\n  done(true);\n}\n\nif((steps.fetchDealsPipedrive !== undefined) && (steps.fetchDealsPipedrive.response.code === 500)){\n  done(true);\n}\n\nif((steps.createDealPipedrive !== undefined) && (steps.createDealPipedrive.response.code === 500)){\n  done(true);\n}\n\nif((steps.addNote !== undefined) && (steps.addNote.response.code === 500)){\n  done(true);\n}\n\nif((steps.updateDealPipedrive !== undefined) && (steps.updateDealPipedrive.response.code === 500)){\n  done(true);\n}\n\nif((steps.addNote2 !== undefined) && (steps.addNote2.response.code === 500)){\n  done(true);\n}\n\nif((steps.createDealPipedrive2 !== undefined) && (steps.createDealPipedrive2.response.code === 500)){\n  done(true);\n}\n\nif((steps.addNote3 !== undefined) && (steps.addNote3.response.code === 500)){\n  done(true);\n}\n\nif((steps.getDetailsOfDeal !== undefined) && (steps.getDetailsOfDeal.response.code === 500)){\n  done(true);\n}\n\ndone(false);"}},{"id":236024,"onSuccess":["retrieveTpEntityMappingForDeal_params"],"onFailure":["loopOverExistingDeals"],"name":"isSubscriptionDeal","type":"filter","properties":{"body":"let fieldNameSubscriptionStatus = steps.ConfigParams.customFieldMap.dealFields.CB_Subscription_Status;\nif(steps.loopOverExistingDeals.entry[fieldNameSubscriptionStatus] === null){\n  done(false);\n}\n\ndone(true);"}},{"id":236025,"onSuccess":["ConfigParams"],"onFailure":["getNewToken_params"],"name":"isTokenAboutToExpire","type":"filter","properties":{"body":"let currentTime = Math.round((new Date().getTime())/1000);\nlet expiryTime = steps.getTpConfig.response.body.third_party_configuration.config_json.cloudElements.OAuth_Parameters.expiry_time || 0;\n\nconsole.log(currentTime);\nconsole.log(expiryTime);\n\nif((expiryTime - currentTime) > (50 * 60)){ //Difference greater than 30 minutes (Unix Timestamp)\n  done(true);\n}\n\ndone(false);"}},{"id":236026,"onSuccess":["getAccountInformationPipedrive"],"onFailure":[],"name":"LastSyncDetails","type":"httpRequest","properties":{"headers":"${steps.InputParams.syncParams.auth}","query":"${steps.InputParams.syncParams.query}","url":"${steps.InputParams.syncParams.url}","method":"GET"}},{"id":236027,"onSuccess":["getExistingDealsParams"],"onFailure":[],"name":"latestDataChargebee","type":"script","properties":{"body":"// let customer_id = steps.fetchSubscriptionChargebee.request.query.customer_id;\nlet subscriptionData = steps.getLatestCustomerDataChargebee.response.body.subscription;\nlet invoiceData = (steps.getLatestCustomerDataChargebee.response.body.invoice !== undefined) ? steps.getLatestCustomerDataChargebee.response.body.invoice : null;\n\ndone({\n  subscriptionData: subscriptionData,\n  invoiceData: invoiceData\n});"}},{"id":236028,"onSuccess":["getTpEntityMappingOfCustomer_params"],"onFailure":["hasBatchingFinished"],"name":"loopOverChangedSubscription","type":"loop","properties":{"list":"${steps.CBList.list}"}},{"id":236029,"onSuccess":["createDealField"],"onFailure":["updateTpConfigParams_1"],"name":"loopOverDealFieldsToCreate","type":"loop","properties":{"list":"${steps.dealFieldsConfig.dealFieldsToCreate}"}},{"id":236030,"onSuccess":["isSubscriptionDeal"],"onFailure":["hasNextOffsetForExistingDeals"],"name":"loopOverExistingDeals","type":"loop","properties":{"list":"${steps.getExistingDealsInPipedrive.response.body.data}"}},{"id":236031,"onSuccess":[],"onFailure":["HasNextOffset"],"name":"loopOverPersons","type":"loop","properties":{"list":"${steps.getPersonsPipedrive.response.body.data}"}},{"id":236032,"onSuccess":["fetchSubscriptionParams"],"onFailure":["noSubscriptionInformation"],"name":"loopOverSubStatusArray","type":"loop","properties":{"list":"${steps.subscriptionStatusArray.array}"}},{"id":236033,"onSuccess":["loopOverChangedSubscription"],"onFailure":["hasBatchingFinished"],"name":"noDataToSync","type":"filter","properties":{"body":"// if(steps.fetchChangedSubscription.response.body.list === undefined){\n//   done(false);\n// }\n\n// done(true);\n\n\nif(steps.CBList.list === null){\n  done(false);\n}\n\ndone(true);"}},{"id":236034,"onSuccess":["deriveActionSubCreate"],"onFailure":["isAuthenticationError"],"name":"noDealExist","type":"filter","properties":{"body":"// if((steps.getTpEntityMappingOfSubscription.response.code === 404) || ((steps.getTpEntityMappingOfSubscription.response.body.third_party_entity_mapping.third_party_entity_id === undefined) && (steps.getExistingDealsInPipedriv.response.code === 404))){\n//   done(true);\n// }\n\n// done(false);\n\n\n// let flag = false;\n\n// if(steps.getTpEntityMappingOfSubscription.response.code === 404){\n//   flag = true;\n//   done(flag);\n// }\n\n// if(steps.getTpEntityMappingOfSubscription.response.body.third_party_entity_mapping.third_party_entity_id === undefined){\n//   flag = true;\n// }else{\n//   flag = false;\n//   if(steps.getExistingDealsInPipedrive.response.code === 404){\n//     flag = true;\n//   }\n// }\n// done(flag);\n\n\nlet flag = false;\n\nif(steps.getTpEntityMappingOfSubscription.response.code === 404){\n  flag = true;\n  done(flag);\n}\n\nif(steps.getTpEntityMappingOfCustomer.response.body.third_party_entity_mapping.old_resource.subscription_status === undefined){\n  flag = true;\n}else{\n  if(steps.getExistingDealsInPipedrive.response.code === 200){\n    if(steps.getExistingDealsInPipedrive.response.body.data.status !== \"open\"){\n      flag = true;\n      done(flag);\n    }\n  }\n  flag = false;\n  // if(steps.getTpEntityMappingOfCustomer.response.body.third_party_entity_mapping.old_resource.subscription_status === undefined){\n  //   flag = true;\n  // }\n}\ndone(flag);\n"}},{"id":236035,"onSuccess":["fetchChangedSubscription_params"],"onFailure":["loopOverDealFieldsToCreate"],"name":"noDealFieldToCreate","type":"filter","properties":{"body":"if(steps.dealFieldsConfig.dealFieldsToCreate.length !== 0){\n  done(false);\n}\n\ndone(true);"}},{"id":236036,"onSuccess":["fetchDealParams"],"onFailure":["loopOverPersons"],"name":"noSubscriptionInformation","type":"filter","properties":{"body":"if(steps.subscriptionInformation === undefined){\n  console.log(\"hi\");\n  done(false);\n}\n\n// if(steps.subscriptionFound.continue === false){\n//   done(false);\n// }\n\nif((steps.subscriptionInformation.customerId === null) || (steps.subscriptionInformation.subscriptionData === null)){\n  console.log(\"hii\");\n  done(false);\n}\n\nif(steps.subscriptionInformation.subscriptionData === undefined){\n  console.log(\"hiii\");\n  done(false);\n}\n\ndone(true);"}},{"id":236037,"onSuccess":["addNote"],"onFailure":["loopOverChangedSubscription"],"name":"noteParams","type":"script","properties":{"body":"let deal_id = steps.createDealPipedrive.response.body.data.id;\nlet cb_id = steps.createDealPipedrive.response.body.data.title;\nlet org_id = steps.createDealPipedrive.request.body.org_id || '';\nlet person_id = steps.createDealPipedrive.request.body.person_id || '';\n\nlet cb_subscription_id = steps.loopOverChangedSubscription.entry.subscription.id;\nlet deal_value = steps.createDealPipedrive.response.body.data.value || \"0\";\nlet currency_code = steps.createDealPipedrive.response.body.data.currency;\n\nlet event_name = \"subscription_created\";\nif(steps.defineAction !== undefined){\n  event_name = steps.defineAction.event_name;\n}\n\nlet content = \"Deal Worth \" + currency_code + \" \" + deal_value + \" created due to subscription(\" + cb_subscription_id + \") \" + \" created in Chargebee\";\n\nlet noteConfig = {\n  url : 'https://api-proxy.pipedrive.com/notes/',\n  header:{\n    \"Authorization\": steps.ConfigParams.tpConfig.third_party_configuration.config_json.cloudElements.OAuth_Parameters.access_token || null\n  },\n  body:{\n    content : content,\n    deal_id : deal_id,\n    org_id: org_id,\n    person_id: person_id\n  }\n}\n\ndone({\n  noteConfig: noteConfig\n});"}},{"id":236038,"onSuccess":["addNote2"],"onFailure":["loopOverChangedSubscription"],"name":"noteParams2","type":"script","properties":{"body":"let deal_id = steps.updateDealPipedrive.response.body.data.id;\n// let cb_id = steps.updateDealPipedrive.response.body.data.title;\nlet org_id = steps.updateDealPipedrive.request.body.org_id || '';\nlet person_id = steps.updateDealPipedrive.request.body.person_id || '';\n\nlet cb_subscription_id = steps.loopOverChangedSubscription.entry.subscription.id;\nlet deal_value = (steps.updateDealPipedrive.response.body.data.value)/100;\nlet currency_code = steps.updateDealPipedrive.response.body.data.currency;\n\nlet event_name = steps.defineAction.event_name;\n\nlet content = \"Deal Worth \" + currency_code + \" \" + deal_value + \" updated due to subscription(\" + cb_subscription_id + \") \" + event_name.split(\"_\")[1] + \" in Chargebee\";\n\nlet noteConfig = {\n  url : 'https://api-proxy.pipedrive.com/notes/',\n  header:{\n    \"Authorization\": steps.ConfigParams.tpConfig.third_party_configuration.config_json.cloudElements.OAuth_Parameters.access_token || null\n  },\n  body:{\n    content : content,\n    deal_id : deal_id,\n    org_id: org_id,\n    person_id: person_id\n  }\n}\n\ndone({\n  noteConfig: noteConfig\n});"}},{"id":236039,"onSuccess":["addNote3"],"onFailure":["loopOverChangedSubscription"],"name":"noteParams3","type":"script","properties":{"body":"let deal_id = steps.createDealPipedrive2.response.body.data.id;\n// let cb_id = steps.createDealPipedrive2.response.body.data.title;\nlet org_id = steps.createDealPipedrive2.request.body.org_id || '';\nlet person_id = steps.createDealPipedrive2.request.body.person_id || '';\n\nlet cb_subscription_id = steps.loopOverChangedSubscription.entry.subscription.id;\nlet deal_value = (steps.createDealPipedrive2.response.body.data.value)/100;\nlet currency_code = steps.createDealPipedrive2.response.body.data.currency;\n\nlet event_name = steps.defineAction.event_name;\n\nlet content = \"Deal Worth \" + currency_code + \" \" + deal_value + \" created due to subscription(\" + cb_subscription_id + \") \" + event_name.split(\"_\")[1] + \" in Chargebee\";\n\nlet noteConfig = {\n  url : 'https://api-proxy.pipedrive.com/notes/',\n  header:{\n    \"Authorization\": steps.ConfigParams.tpConfig.third_party_configuration.config_json.cloudElements.OAuth_Parameters.access_token || null\n  },\n  body:{\n    content : content,\n    deal_id : deal_id,\n    org_id: org_id,\n    person_id: person_id\n  }\n}\n\ndone({\n  noteConfig: noteConfig\n});"}},{"id":236040,"onSuccess":["addNote4"],"onFailure":["loopOverExistingDeals"],"name":"noteParams4","type":"script","properties":{"body":"let deal_id = steps.updateExistingDeal.response.body.data.id;\nlet org_id = steps.updateExistingDeal.request.body.org_id || '';\nlet person_id = steps.updateExistingDeal.request.body.person_id || '';\n\nlet cb_subscription_id = steps.getSubscriptionOnChargebee.response.body.list[0]['subscription']['id'];\nlet deal_value = (steps.loopOverExistingDeals.entry.value)/100;\nlet currency_code = steps.loopOverExistingDeals.entry.currency;\n\nlet event_name = steps.defineActionForExistingDeals.event_name;\n\nlet content = \"Deal Worth \" + currency_code + \" \" + deal_value + \" updated due to subscription(\" + cb_subscription_id + \") \" + event_name.split(\"_\")[1] + \" in Chargebee\";\n\nlet noteConfig = {\n  url : 'https://api-proxy.pipedrive.com/notes/',\n  header:{\n    \"Authorization\": steps.ConfigParams.tpConfig.third_party_configuration.config_json.cloudElements.OAuth_Parameters.access_token || null\n  },\n  body:{\n    content : content,\n    deal_id : deal_id,\n    org_id: org_id,\n    person_id: person_id\n  }\n}\n\ndone({\n  noteConfig: noteConfig\n});"}},{"id":236041,"onSuccess":["deriveActionSubCreate"],"onFailure":["getDetailsOfDealParam"],"name":"noTpEntityMappingFound","type":"filter","properties":{"body":"// if(steps.fetchDealsPipedrive.response.body.data === null){\n//   done(true);\n// }else{\n//   done(false);\n// }\n\nif((steps.retrieveTpEntityMappingForDeal2.response.code === 200) && (steps.retrieveTpEntityMappingForDeal2.response.body.third_party_entity_mapping.third_party_entity_id === undefined)){\n  done(true);\n}\n\n\nif(steps.retrieveTpEntityMappingForDeal2.response.code === 404){\n  done(true);\n}\n\ndone(false);"}},{"id":236042,"onSuccess":["getPipedriveElementInstance"],"onFailure":["ApiError"],"name":"requestNewPipedriveToken","type":"httpRequest","properties":{"headers":"${steps.requestNewPipedriveToken_params.payload.headers}","body":"${steps.requestNewPipedriveToken_params.payload.body}","url":"${steps.requestNewPipedriveToken_params.payload.url}","method":"POST"}},{"id":236043,"onSuccess":["getPipedriveElementInstance1"],"onFailure":["ApiError"],"name":"requestNewPipedriveToken1","type":"httpRequest","properties":{"headers":"${steps.requestNewPipedriveToken_params1.payload.headers}","body":"${steps.requestNewPipedriveToken_params1.payload.body}","url":"${steps.requestNewPipedriveToken_params1.payload.url}","method":"GET"}},{"id":236044,"onSuccess":["requestNewPipedriveToken"],"onFailure":[],"name":"requestNewPipedriveToken_params","type":"script","properties":{"body":"let tpConfig = steps.ConfigParams.tpConfig;\n\nif(tpConfig.third_party_configuration.config_json.cloudElements.OAuth_Parameters === undefined){\n  done(false);\n}\n\nlet params = tpConfig.third_party_configuration.config_json.cloudElements.OAuth_Parameters;\n\nlet payload = {\n  url: \"https://oauth.pipedrive.com/oauth/token\",\n  headers : {\n    \"Content-Type\" : \"application/x-www-form-urlencoded\",\n    \"Authorization\" : \"Basic \" + CE.b64(params.client_info.client_id + \":\" + params.client_info.client_secret)\n  },\n  body : \"grant_type=refresh_token&refresh_token=\" + params.refresh_token\n};\n\ndone({\n  payload: payload\n});"}},{"id":236045,"onSuccess":["requestNewPipedriveToken1"],"onFailure":[],"name":"requestNewPipedriveToken_params1","type":"script","properties":{"body":"let tpConfig = steps.ConfigParams.tpConfig;\n\nif(tpConfig.third_party_configuration.config_json.cloudElements.OAuth_Parameters === undefined){\n  done(false);\n}\n\nlet params = tpConfig.third_party_configuration.config_json.cloudElements.OAuth_Parameters;\n\nlet payload = {\n  url: \"https://oauth.pipedrive.com/oauth/token\",\n  headers : {\n    \"Content-Type\" : \"application/x-www-form-urlencoded\",\n    \"Authorization\" : \"Basic \" + CE.b64(params.client_info.client_id + \":\" + params.client_info.client_secret)\n  },\n  body : \"grant_type=refresh_token&refresh_token=\" + params.refresh_token\n};\n\ndone({\n  payload: payload\n});"}},{"id":236046,"onSuccess":["TpEntityMappingFound1"],"onFailure":["TpEntityMappingFound"],"name":"retrieveTpEntityMappingForDeal","type":"httpRequest","properties":{"headers":"${steps.retrieveTpEntityMappingForDeal_params.payload.auth}","query":"${steps.retrieveTpEntityMappingForDeal_params.payload.query}","url":"${steps.retrieveTpEntityMappingForDeal_params.payload.url}","method":"GET"}},{"id":236047,"onSuccess":["noTpEntityMappingFound"],"onFailure":["ApiError"],"name":"retrieveTpEntityMappingForDeal2","type":"httpRequest","properties":{"headers":"${steps.retrieveTpEntityMappingForDeal_params2.payload.auth}","query":"${steps.retrieveTpEntityMappingForDeal_params2.payload.query}","url":"${steps.retrieveTpEntityMappingForDeal_params2.payload.url}","method":"GET"}},{"id":236048,"onSuccess":["retrieveTpEntityMappingForDeal"],"onFailure":[],"name":"retrieveTpEntityMappingForDeal_params","type":"script","properties":{"body":"let apiKey = steps.InputParams.input.cbApiKey;\nlet siteName = steps.InputParams.input.siteName;\nlet siteDomain = steps.InputParams.input.siteDomain;\nlet integrationName = steps.InputParams.input.integrationName;\n\nlet password = \"\";\n\nlet dealTitle = steps.loopOverExistingDeals.entry.title;\nlet subscriptionId = dealTitle.split(\": \")[1];\n\nlet payload = {\n  url: \"https://\"+siteName+\".\"+siteDomain+\"/api/v2/third_party_entity_mappings/retrieve\",\n  auth:{\n    Authorization: \"Basic \" + CE.b64(apiKey + \":\" + password)\n  },\n  query:{\n    integration_name: integrationName,\n    entity_id: subscriptionId,\n    entity_type: \"subscription\",\n  }\n};\n\ndone({\n  payload: payload\n});\n"}},{"id":236049,"onSuccess":["retrieveTpEntityMappingForDeal2"],"onFailure":[],"name":"retrieveTpEntityMappingForDeal_params2","type":"script","properties":{"body":"let apiKey = steps.InputParams.input.cbApiKey;\nlet siteName = steps.InputParams.input.siteName;\nlet siteDomain = steps.InputParams.input.siteDomain;\nlet integrationName = steps.InputParams.input.integrationName;\n\nlet password = \"\";\n\nlet subscriptionId = steps.fetchSubscriptionChargebee.response.body.subscription.id;\n\nlet payload = {\n  url: \"https://\"+siteName+\".\"+siteDomain+\"/api/v2/third_party_entity_mappings/retrieve\",\n  auth:{\n    Authorization: \"Basic \" + CE.b64(apiKey + \":\" + password)\n  },\n  query:{\n    integration_name: integrationName,\n    entity_id: subscriptionId,\n    entity_type: \"subscription\",\n  }\n};\n\ndone({\n  payload: payload\n});\n"}},{"id":236050,"onSuccess":[],"onFailure":[],"name":"sadsad","type":"script","properties":{"body":"asdasa"}},{"id":236051,"onSuccess":[],"onFailure":[],"name":"sdfdsf","type":"script","properties":{"body":"sdfsddff"}},{"id":236052,"onSuccess":["fetchChangedSubscription_params"],"onFailure":[],"name":"setOffsetChangedSubscription","type":"script","properties":{"body":"let offset = steps.fetchChangedSubscription.response.body.next_offset;\n\ndone({\n  offset: offset\n});"}},{"id":236053,"onSuccess":["getExistingDealsParams"],"onFailure":[],"name":"setOffsetForExistingDeals","type":"script","properties":{"body":"done({\n  offset: steps.getExistingDealsInPipedrive.response.body.additional_data.pagination.next_start\n});"}},{"id":236054,"onSuccess":["getPersonsConfig"],"onFailure":[],"name":"setOffsetPerson","type":"script","properties":{"body":"done(steps.getPersonsPipedrive.response.body.additional_data.pagination);"}},{"id":236055,"onSuccess":["updateLoopIndex"],"onFailure":[],"name":"storeLatestAuthData","type":"script","properties":{"body":"let OAuth_Parameters = {\n  \"OAuthDetails\": steps.ConfigParams.tpConfig.third_party_configuration.config_json.cloudElements.OAuth_Parameters\n};\n\nOAuth_Parameters.OAuthDetails.access_token = steps.requestNewPipedriveToken.response.body.token_type + \" \" + steps.requestNewPipedriveToken.response.body.access_token;\nOAuth_Parameters.OAuthDetails.expiry_time = Math.round((new Date().getTime())/1000) + Number(steps.requestNewPipedriveToken.response.body.expires_in);\nOAuth_Parameters.OAuthDetails.refresh_token = steps.requestNewPipedriveToken.response.body.refresh_token;\nOAuth_Parameters.OAuthDetails.scope = steps.requestNewPipedriveToken.response.body.scope;\nOAuth_Parameters.OAuthDetails.token_type = steps.requestNewPipedriveToken.response.body.token_type;\n\nsteps.ConfigParams.tpConfig.third_party_configuration.config_json.cloudElements.OAuth_Parameters = OAuth_Parameters.OAuthDetails;\n\ndone(steps.ConfigParams.tpConfig.third_party_configuration.config_json.cloudElements.OAuth_Parameters);"}},{"id":236056,"onSuccess":["updateLoopIndex1"],"onFailure":[],"name":"storeLatestAuthData1","type":"script","properties":{"body":"let OAuth_Parameters = {\n  \"OAuthDetails\": steps.ConfigParams.tpConfig.third_party_configuration.config_json.cloudElements.OAuth_Parameters\n};\n\nOAuth_Parameters.OAuthDetails.access_token = steps.requestNewPipedriveToken1.response.body.token_type + \" \" + steps.requestNewPipedriveToken1.response.body.access_token;\nOAuth_Parameters.OAuthDetails.expiry_time = Math.round((new Date().getTime())/1000) + Number(steps.requestNewPipedriveToken1.response.body.expires_in);\nOAuth_Parameters.OAuthDetails.refresh_token = steps.requestNewPipedriveToken1.response.body.refresh_token;\nOAuth_Parameters.OAuthDetails.scope = steps.requestNewPipedriveToken1.response.body.scope;\nOAuth_Parameters.OAuthDetails.token_type = steps.requestNewPipedriveToken1.response.body.token_type;\n\nsteps.ConfigParams.tpConfig.third_party_configuration.config_json.cloudElements.OAuth_Parameters = OAuth_Parameters.OAuthDetails;\n\ndone(steps.ConfigParams.tpConfig.third_party_configuration.config_json.cloudElements.OAuth_Parameters);"}},{"id":236057,"onSuccess":["subscriptionInformation"],"onFailure":["loopOverPersons"],"name":"subscriptionFound","type":"filter","properties":{"body":"if(steps.fetchSubscriptionChargebee.response.code !== 200){\n  done(false);\n}\n\nif((steps.fetchSubscriptionChargebee.response.body.status === \"failuare\") || (steps.fetchSubscriptionChargebee.response.body.status === \"failure\")){\n  done(false);\n}\n\ndone(true);"}},{"id":236058,"onSuccess":["defineActionForExistingDeals"],"onFailure":["loopOverExistingDeals"],"name":"subscriptionFoundOnChargebee","type":"filter","properties":{"body":"if(steps.getSubscriptionOnChargebee.response.body.list === undefined){\n  done(false);\n}\n\ndone(true);"}},{"id":236059,"onSuccess":["retrieveTpEntityMappingForDeal_params2"],"onFailure":[],"name":"subscriptionInformation","type":"script","properties":{"body":"// let customer_id;\n// let subscriptionData;\n\n// if(steps.subscriptionFound.continue === false){\n//   customer_id = steps.fetchSubscriptionParams.subscriptionInformation.customerId;\n//   subscriptionData = steps.fetchSubscriptionParams.subscriptionInformation.subscriptionData;\n// }else{\n  \n//   subscriptionData = steps.fetchSubscriptionChargebee.response.body;\n// }\n\n// done({\n//   customerId: customer_id,\n//   subscriptionData :subscriptionData\n// });\n\n\nlet customer_id = steps.fetchSubscriptionChargebee.request.query.customer_id;\nlet subscriptionData = steps.fetchSubscriptionChargebee.response.body.subscription;\nlet invoiceData = (steps.fetchSubscriptionChargebee.response.body.invoice !== undefined) ? steps.fetchSubscriptionChargebee.response.body.invoice : null;\n\ndone({\n  subscriptionData: subscriptionData,\n  invoiceData: invoiceData\n});"}},{"id":236060,"onSuccess":["hasNextOffsetChangedSubscription"],"onFailure":[],"name":"subscriptionList","type":"script","properties":{"body":"let contactList = [];\nlet configuration = steps.ConfigParams.tpConfig.third_party_configuration.config_json;\n\nif(steps.subscriptionList !== undefined){\n  contactList = steps.subscriptionList.contactList;\n}\n\nif(((steps.fetchChangedSubscription.response.body.list !== undefined) && (steps.fetchChangedSubscription.response.body.list.length > 0)) && configuration.batch.sync_subscription.change_subscription !== null){\n  if(contactList.length === 0){\n    contactList = steps.fetchChangedSubscription.response.body.list;\n  }else if(contactList.length < configuration.batch.batch_size){\n    contactList = contactList.concat(steps.fetchChangedSubscription.response.body.list);\n  }else{\n    done({\n        contactList: contactList\n     });\n  }\n}\n\ndone({\n  contactList: contactList\n});"}},{"id":236061,"onSuccess":["loopOverSubStatusArray"],"onFailure":[],"name":"subscriptionStatusArray","type":"script","properties":{"body":"done({\n  array:[\"active\",\"non_renewing\",\"in_trial\",\"future\",\"paused\",\"cancelled\"]\n });"}},{"id":236062,"onSuccess":[],"onFailure":[],"name":"Success","type":"script","properties":{"body":"let successCSV = steps.ConfigParams.config.records.successCSV || '';\nif(successCSV !== ''){\n  successCSVLength = successCSV.length;\n}else{\n  successCSVLength = 0;\n  successCSV= null;\n}\n\nlet errorCSV =  steps.ConfigParams.config.records.errorCSV || '';\nif(errorCSV !== ''){\n  errorCSVLength = errorCSV.length;\n}else{\n  errorCSVLength = 0;\n  errorCSV= null;\n}\n\nlet sync_result = {\n  \"successCSVLength\": successCSVLength,\n  \"errorCSVLength\" : errorCSVLength,\n  \"listContent_successCSV\": successCSV,\n  \"listContent_errorCSV\": errorCSV\n};\n\ndone(sync_result);"}},{"id":236063,"onSuccess":["getDealFieldsPipedrive"],"onFailure":["Success"],"name":"syncSubscription","type":"filter","properties":{"body":"done(steps.ConfigParams.config.params.syncSubscription);"}},{"id":236064,"onSuccess":["getLatestCustomerDataChargebee_params"],"onFailure":["updateTpEntityError_params"],"name":"TpEntityMappingFound","type":"filter","properties":{"body":"if((steps.getTpEntityMappingOfCustomer.response.code === 200) && (steps.getTpEntityMappingOfCustomer.response.body.third_party_entity_mapping.third_party_entity_id !== undefined)){\n  if(steps.getTpEntityMappingOfCustomer.response.body.third_party_entity_mapping.status === \"update_failed\"){\n    done(false);\n  }\n  done(true);\n}\n\n\nif(steps.getTpEntityMappingOfCustomer.response.code === 404){\n  done(false);\n}\n\ndone(false);"}},{"id":236065,"onSuccess":["getSubscriptionOnChargebee_params"],"onFailure":["loopOverExistingDeals"],"name":"TpEntityMappingFound1","type":"filter","properties":{"body":"if((steps.retrieveTpEntityMappingForDeal.response.code !== 200) || (steps.retrieveTpEntityMappingForDeal.response.body.third_party_entity_mapping === undefined)){\n  done(false);\n}\n\ndone(true);"}},{"id":236066,"onSuccess":["CustomFieldParamsForErrorRecords"],"onFailure":[],"name":"TransformSubscriptionIds","type":"script","properties":{"body":"let subscriptionList = steps.subscriptionList.contactList;\nlet list;\nlet ids;\nlet errorList = steps.FailedToSync.subscriptionIds;\n\nif(errorList.length > 0){\n  for(let i = 0; i < subscriptionList.length; ++i){\n    if(errorList.indexOf(subscriptionList[i].subscription.id) > -1){\n       errorList.splice(errorList.indexOf(subscriptionList[i].subscription.id),1);\n    }\n  } \n}\n\nif(errorList.length > 0){\n  ids = \"[\";\nfor( let i = 0; i < errorList.length; ++i){\n  ids += errorList[i];\n  if(i+1 !==  errorList.length){\n    ids += \",\";\n  }\n}\n ids += \"]\";\n}\n\ndone({errorList: errorList,\n  ids : ids\n});\n\n\n"}},{"id":236067,"onSuccess":["fetchInvoiceChargebee"],"onFailure":[],"name":"updateChargebeeElementInstance","type":"request","properties":{"api":"${steps.updateChargebeeElementParams.updateParams.url}","body":"${steps.updateChargebeeElementParams.updateParams.body}","method":"PUT"}},{"id":236068,"onSuccess":["updateChargebeeElementInstance"],"onFailure":[],"name":"updateChargebeeElementParams","type":"script","properties":{"body":"let chargebeeInstanceId = steps.ConfigParams.tpConfig.third_party_configuration.config_json.chargebee.instance || null;\n\nlet config = steps.getChargebeeElementInstance.response.body;\n\nlet username  = steps.InputParams.input.cbApiKey;\n\nconfig.configuration['username'] = username;\n\nlet updateParams={\n  url: \"/instances/\"+chargebeeInstanceId,\n  body: config\n};\n\ndone({\n  updateParams: updateParams\n});"}},{"id":236069,"onSuccess":["ConfigParams"],"onFailure":[],"name":"updateConfiguration","type":"script","properties":{"body":"let OAuth_Parameters = {\n  \"OAuthDetails\": steps.getTpConfig.response.body.third_party_configuration.config_json.cloudElements.OAuth_Parameters\n};\n\nOAuth_Parameters.OAuthDetails.access_token = steps.getNewToken.response.body.token_type + \" \" + steps.getNewToken.response.body.access_token;\nOAuth_Parameters.OAuthDetails.expiry_time = Math.round((new Date().getTime())/1000) + Number(steps.getNewToken.response.body.expires_in);\nOAuth_Parameters.OAuthDetails.refresh_token = steps.getNewToken.response.body.refresh_token;\nOAuth_Parameters.OAuthDetails.scope = steps.getNewToken.response.body.scope;\nOAuth_Parameters.OAuthDetails.token_type = steps.getNewToken.response.body.token_type;\n\ndone({\n  OAuthData: OAuth_Parameters\n});"}},{"id":236070,"onSuccess":["updateTpEntityParams_3"],"onFailure":["InvalidAccessToken"],"name":"updateDealAuthError","type":"filter","properties":{"body":"if(steps.updateDealPipedrive.response.code === 401){\n  done(false);\n}\n\ndone(true);"}},{"id":236071,"onSuccess":["updateDealPipedrive"],"onFailure":[],"name":"updateDealParams","type":"script","properties":{"body":"let fieldNameSubscriptionStatus = steps.ConfigParams.customFieldMap.dealFields.CB_Subscription_Status;\nlet fieldNameSubscriptionId = steps.ConfigParams.customFieldMap.dealFields.CB_Subscription_ID;\nlet fieldNameSubscriptionMRR = steps.ConfigParams.customFieldMap.dealFields.CB_Subscription_MRR;\nlet howToUpdateDealValue = steps.ConfigParams.tpConfig.third_party_configuration.config_json.cloudElements.syncRulesDeals.howToUpdateDealValue || null;\n\n// let pipedrive_id = steps.loopOverPersons.entry['id'];\n\nlet pipedrive_id = steps.getTpEntityMappingOfCustomer.response.body.third_party_entity_mapping.third_party_entity_id;\n\nlet subscriptionData = steps.loopOverChangedSubscription.entry.subscription;\n\n// let subscriptionData = steps.subscriptionInformation.subscriptionData;\n\nlet subscription_id = subscriptionData.id;\nlet currency_code = subscriptionData.currency_code;\nlet plan_amount = subscriptionData.plan_amount;\nlet subscription_status = subscriptionData.status;\nlet subscription_mrr = (subscriptionData.mrr !== undefined && subscriptionData.mrr > 0) ? parseFloat(parseInt(subscriptionData.mrr, 10) / 100).toFixed(2) : 0;\n\nlet deal_id = steps.getTpEntityMappingOfCustomer.response.body.third_party_entity_mapping.old_resource.subscription_deal_id;\n\nlet updateDealConfig = {\n  url : 'https://api-proxy.pipedrive.com/deals/'+deal_id,\n  header:{\n    \"Authorization\": steps.ConfigParams.tpConfig.third_party_configuration.config_json.cloudElements.OAuth_Parameters.access_token || null\n  },\n  body:{\n    title: \"Chargebee Subscription ID: \" + subscription_id,\n    currency: currency_code,\n    person_id: pipedrive_id\n  }\n}\n\nif(steps.ConfigParams.config.params.updateDealValue === true){\n  updateDealConfig.body.value = plan_amount;\n}\n\nif(steps.getTpEntityMappingOfCustomer.response.body.third_party_entity_mapping.old_resource['org_id'] !== undefined){\n  let organization_id = steps.getTpEntityMappingOfCustomer.response.body.third_party_entity_mapping.old_resource['org_id'];\n  updateDealConfig.body.org_id = organization_id;\n}\n\nif(steps.defineAction.configuration.stage !== undefined){\n  let stage_id = steps.defineAction.configuration.stage;\n  updateDealConfig.body.stage_id = stage_id;\n}\n\nif(howToUpdateDealValue === \"option1\"){ //Update Deal Value with Recurring Items Total\n  updateDealConfig.body.value = ((subscription_mrr * subscriptionData.billing_period)/100) || 0;\n}\n\nif(howToUpdateDealValue === \"option2\"){ //Update Deal Value with Invoice Amount\n  if(steps.latestDataChargebee.invoiceData !== null){\n    updateDealConfig.body.value = (steps.latestDataChargebee.invoiceData.total/100) || 0;\n  }else{\n    updateDealConfig.body.value = 0;\n  }\n}\n\nif(howToUpdateDealValue === \"option3\"){ //Update Deal Value with MRR\n  updateDealConfig.body.value = subscription_mrr;\n}\n\nupdateDealConfig.body[fieldNameSubscriptionStatus] = subscription_status;\nupdateDealConfig.body[fieldNameSubscriptionId] = subscription_id;\nupdateDealConfig.body[fieldNameSubscriptionMRR] = subscription_mrr;\n\n\ndone({\n  updateDealConfig: updateDealConfig\n});\n\n"}},{"id":236072,"onSuccess":["updateSuccess"],"onFailure":["updateSuccess"],"name":"updateDealPipedrive","type":"httpRequest","properties":{"acceptableStatusCodes":"200,201,401,500","headers":"${steps.updateDealParams.updateDealConfig.header}","body":"${steps.updateDealParams.updateDealConfig.body}","query":"${steps.updateDealParams.updateDealConfig.query}","url":"${steps.updateDealParams.updateDealConfig.url}","method":"PUT"}},{"id":236073,"onSuccess":["fetchInvoiceParams"],"onFailure":["getExistingDealsParams"],"name":"updateDealValueWithInvoice","type":"filter","properties":{"body":"if(steps.ConfigParams.tpConfig.third_party_configuration.config_json.cloudElements.syncRulesDeals.howToUpdateDealValue === \"option2\"){\n  done(true);\n}\n\ndone(false);"}},{"id":236074,"onSuccess":["updateThirdPartyInstance"],"onFailure":[],"name":"updateElementInstanceParams","type":"script","properties":{"body":"let thirdPartyElementId = steps.getTpConfig.response.body.third_party_configuration.config_json.cloudElements.thirdParty.instance || null;\n\nlet config = steps.getThirdPartyInstanceDetails.response.body;\n\nlet accessToken  = steps.getNewToken.response.body.access_token;\nlet tokenType = steps.getNewToken.response.body.token_type;\n\nconfig.configuration['access_token'] = tokenType + \" \" + accessToken;\n\nlet updateParams={\n  url: \"/instances/\"+thirdPartyElementId,\n  body: config\n};\n\ndone({\n  updateParams: updateParams\n});"}},{"id":236075,"onSuccess":["loopOverPersons"],"onFailure":[],"name":"updateErrorLog","type":"script","properties":{"body":"let subscription_id = steps.subscriptionInformation.subscriptionData.id;\n\nlet chargebee_data_url = \"/admin-console/subscriptions/\"+subscription_id;\nlet cb_link = \"<a href='\"+chargebee_data_url+\"'>\"+subscription_id+\"</a>\"\n\nsteps.ConfigParams.config.records.errorCSV.push(cb_link + \", - Deal sync failed\");\n\ndone(steps.ConfigParams.config.records.errorCSV);"}},{"id":236076,"onSuccess":["updateExistingDealSuccess"],"onFailure":["updateExistingDealSuccess"],"name":"updateExistingDeal","type":"httpRequest","properties":{"headers":"${steps.updateTheExistingDeal_params.updateDealConfig.header}","body":"${steps.updateTheExistingDeal_params.updateDealConfig.body}","url":"${steps.updateTheExistingDeal_params.updateDealConfig.url}","method":"PUT"}},{"id":236077,"onSuccess":["loopOverExistingDeals"],"onFailure":[],"name":"updateExistingDeal_FailedLog","type":"script","properties":{"body":"let customer_id = steps.getSubscriptionOnChargebee.response.body.list[0]['subscription']['id'];\n\nlet chargebee_data_url = \"/admin-console/subscriptions/\"+customer_id;\nlet cb_link = \"<a href='\"+chargebee_data_url+\"'>\"+customer_id+\"</a>\";\n\nlet deal_id = 'undefined';\ndeal_id = steps.loopOverExistingDeals.entry.id;\n\nlet pipedrive_data_url = \"https://chargebee-keyvaluedevelopment-sandbox-3fa22b.pipedrive.com/deals/\" + deal_id;\nlet pipedrive_link = \"<a href='\"+pipedrive_data_url+\"'>\"+deal_id+\"</a>\";\n\nsteps.ConfigParams.config.records.errorCSV.push(\"Failed to Update the Subscription \" + cb_link + \" on Chargebee as deal \" + pipedrive_link + \" in Pipedrive\");\n\ndone(steps.ConfigParams.config.records.errorCSV);"}},{"id":236078,"onSuccess":["addNotesConfigured4"],"onFailure":[],"name":"updateExistingDealLog","type":"script","properties":{"body":"let subscription_id = steps.getSubscriptionOnChargebee.response.body.list[0]['subscription']['id'];\n\nlet chargebee_data_url = \"/admin-console/subscriptions/\"+subscription_id;\nlet cb_link = \"<a href='\"+chargebee_data_url+\"'>\"+subscription_id+\"</a>\";\n\nlet deal_id = steps.loopOverExistingDeals.entry.id;\n\nlet company_domain = steps.getAccountInformationPipedrive.response.body.data.company_domain;\nlet pipedrive_data_url = \"https://\"+company_domain+\".pipedrive.com/deals/\" + deal_id;\nlet pipedrive_link = \"<a href='\"+pipedrive_data_url+\"'>\"+deal_id+\"</a>\";\n\nif((steps.updateExistingDeal.response.code === 200) || (steps.updateExistingDeal.response.code === 201)){\n  steps.ConfigParams.config.records.successCSV.push(\"Subscription \" + cb_link + \" on Chargebee is synced as deal \" + pipedrive_link + \" in Pipedrive\");\n  done(steps.ConfigParams.config.records.successCSV);\n}\n\nsteps.ConfigParams.config.records.errorCSV.push(cb_link + \" - Deal sync failed\");\ndone(steps.ConfigParams.config.records.errorCSV);\n\n"}},{"id":236079,"onSuccess":["updateTpEntityParams_1"],"onFailure":["isAuthErrorUpdateExistingDeal"],"name":"updateExistingDealSuccess","type":"filter","properties":{"body":"if((steps.updateExistingDeal.response.code === 200) || (steps.updateExistingDeal.response.code === 201)){\n  done(true);\n}\n\ndone(false);"}},{"id":236080,"onSuccess":[],"onFailure":[],"name":"updateFailedLog","type":"script","properties":{"body":"let customer_id = steps.subscriptionInformation.customerId;\n\nlet chargebee_data_url = \"/admin-console/subscriptions/\"+customer_id;\nlet cb_link = \"<a href='\"+chargebee_data_url+\"'>\"+customer_id+\"</a>\"\n\nsteps.ConfigParams.config.records.errorCSV.push(cb_link + \",Subscription Update Failed\");\n\ndone(steps.ConfigParams.config.records.errorCSV);"}},{"id":236081,"onSuccess":["addNotesConfigured2"],"onFailure":[],"name":"updateLog","type":"script","properties":{"body":"let subscription_id = steps.loopOverChangedSubscription.entry.subscription.id;\n\nlet chargebee_data_url = \"/admin-console/subscriptions/\"+subscription_id;\nlet cb_link = \"<a href='\"+chargebee_data_url+\"'>\"+subscription_id+\"</a>\"\n\n// steps.ConfigParams.config.records.successCSV.push(cb_link + \",Deal Created\");\n\nlet pipedrive = steps.updateDealPipedrive.response.body.data;\nlet person_id = pipedrive.person_id.value || 'undefined';\n\nlet company_domain = steps.getAccountInformationPipedrive.response.body.data.company_domain;\nlet pipedrive_data_url = \"https://\"+company_domain+\".pipedrive.com/deals/\" + pipedrive.id;\nlet pipedrive_link = \"<a href='\"+pipedrive_data_url+\"'>\"+pipedrive.id+\"</a>\";\n\nif((steps.updateDealPipedrive.response.code === 200) || (steps.updateDealPipedrive.response.code === 201)){\n  steps.ConfigParams.config.records.successCSV.push(\"Subscription \" + cb_link + \" on Chargebee is synced as deal \" + pipedrive_link + \" in Pipedrive\");\n  done(steps.ConfigParams.config.records.successCSV);\n}\n\nsteps.ConfigParams.config.records.errorCSV.push(cb_link + \" - Deal sync failed\");\ndone(steps.ConfigParams.config.records.errorCSV);\n\n"}},{"id":236082,"onSuccess":["loopOverChangedSubscription"],"onFailure":[],"name":"updateLoopIndex","type":"script","properties":{"body":"steps.loopOverPersons.index = (steps.loopOverChangedSubscription.index-1);\n\ndone(steps.loopOverChangedSubscription.index);"}},{"id":236083,"onSuccess":["loopOverExistingDeals"],"onFailure":[],"name":"updateLoopIndex1","type":"script","properties":{"body":"steps.loopOverExistingDeals.index = (steps.loopOverExistingDeals.index-1);\n\ndone(steps.loopOverExistingDeals.index);"}},{"id":236626,"onSuccess":["BatchSuccess"],"onFailure":[],"name":"UpdateOffset","type":"httpRequest","properties":{"headers":"${steps.UpdateOffsetParams.tpConfigUpdateParams.headers}","body":"${steps.UpdateOffsetParams.tpConfigUpdateParams.body}","url":"${steps.UpdateOffsetParams.tpConfigUpdateParams.url}","method":"POST"}},{"id":236625,"onSuccess":["UpdateOffset"],"onFailure":[],"name":"UpdateOffsetParams","type":"script","properties":{"body":"let offset;\n\nlet apiKey = steps.InputParams.input.cbApiKey;\nlet siteName = steps.InputParams.input.siteName;\nlet siteDomain = steps.InputParams.input.siteDomain;\nlet type = steps.InputParams.input.integrationName;\n\nlet configuration = steps.ConfigParams.tpConfig.third_party_configuration.config_json;\nlet batch_size = configuration.batch.batch_size;\n\nif(steps.fetchChangedSubscription && steps.fetchChangedSubscription.response.body.next_offset !== undefined) {\n  offset = steps.fetchChangedSubscription.response.body.next_offset;\n   configuration.batch.sync_subscription.change_subscription = offset;\n}\nelse if(steps.GetError && steps.GetError.response.body.next_offset !== undefined){\n  offset =  steps.GetError.response.body.next_offset;\n   configuration.batch.sync_subscription={\n     \"get_error\" : offset,\n     \"get_customer\":null,\n     \"change_subscription\" : null,\n     \"batch_size\":batch_size\n   }\n     ;\n}\n\nelse{\n  \n   if(steps.subscriptionList && steps.subscriptionList.contactList.length >= batch_size){\n  configuration.batch.sync_subscription = {\n     \"change_subscription\" : null,\n     \"batch_size\":batch_size\n   };\n}\n\n}\n\n// configuration.batch.batch_no =configuration.batch.batch_no + 1;\nconfiguration.batch.sync_subscription.status = \"running\"\n\nlet tpConfigUpdateParams = {\n  url: \"https://\" + siteName + \".integrations.\" + siteDomain + \"/integrations/update_tp_integ_conf\",\n  headers: {\n    \"Content-Type\": \"application/json\",\n    \"cache-control\": \"no-cache\"\n  },\n  body: {\n    integration_name: type,\n    site_name: siteName,\n    api_key: apiKey,\n    config_json: configuration\n  }\n};\n\ndone({\n  tpConfigUpdateParams: tpConfigUpdateParams\n});\n\n\n\n"}},{"id":236084,"onSuccess":["updateDealParams"],"onFailure":["createDealParams2"],"name":"updateOrCreate","type":"filter","properties":{"body":"if(steps.defineAction.configuration.action === \"create_deal\"){\n  done(false);\n}\nelse{\n  done(true);\n}"}},{"id":236085,"onSuccess":["storeLatestAuthData"],"onFailure":[],"name":"updatePipedriveElementInstance","type":"request","properties":{"api":"${steps.updatePipedriveElementInstance_params.updateParams.url}","body":"${steps.updatePipedriveElementInstance_params.updateParams.body}","method":"PUT"}},{"id":236086,"onSuccess":["storeLatestAuthData1"],"onFailure":[],"name":"updatePipedriveElementInstance1","type":"request","properties":{"api":"${steps.updatePipedriveElementInstance_params1.updateParams.url}","body":"${steps.updatePipedriveElementInstance_params1.updateParams.body}","method":"PUT"}},{"id":236087,"onSuccess":["updatePipedriveElementInstance"],"onFailure":[],"name":"updatePipedriveElementInstance_params","type":"script","properties":{"body":"let thirdPartyElementId = steps.ConfigParams.tpConfig.third_party_configuration.config_json.cloudElements.thirdParty.instance || null;\n\nlet config = steps.getPipedriveElementInstance.response.body;\n\nlet accessToken  = steps.requestNewPipedriveToken.response.body.access_token;\nlet tokenType = steps.requestNewPipedriveToken.response.body.token_type;\n\nconfig.configuration['access_token'] = tokenType + \" \" + accessToken;\n\nlet updateParams={\n  url: \"/instances/\"+thirdPartyElementId,\n  body: config\n};\n\ndone({\n  updateParams: updateParams\n});"}},{"id":236088,"onSuccess":["updatePipedriveElementInstance1"],"onFailure":[],"name":"updatePipedriveElementInstance_params1","type":"script","properties":{"body":"let thirdPartyElementId = steps.ConfigParams.tpConfig.third_party_configuration.config_json.cloudElements.thirdParty.instance || null;\n\nlet config = steps.getPipedriveElementInstance1.response.body;\n\nlet accessToken  = steps.requestNewPipedriveToken1.response.body.access_token;\nlet tokenType = steps.requestNewPipedriveToken1.response.body.token_type;\n\nconfig.configuration['access_token'] = tokenType + \" \" + accessToken;\n\nlet updateParams={\n  url: \"/instances/\"+thirdPartyElementId,\n  body: config\n};\n\ndone({\n  updateParams: updateParams\n});"}},{"id":236089,"onSuccess":["updateTpEntityParams_3"],"onFailure":["updateDealAuthError"],"name":"updateSuccess","type":"filter","properties":{"body":"if((steps.updateDealPipedrive.response.code === 200) || (steps.updateDealPipedrive.response.code === 201)){\n  done(true);\n}\n\ndone(false);"}},{"id":236090,"onSuccess":["updateExistingDeal"],"onFailure":[],"name":"updateTheExistingDeal_params","type":"script","properties":{"body":"let fieldNameSubscriptionStatus = steps.ConfigParams.customFieldMap.dealFields.CB_Subscription_Status;\nlet fieldNameSubscriptionId = steps.ConfigParams.customFieldMap.dealFields.CB_Subscription_ID;\nlet fieldNameSubscriptionMRR = steps.ConfigParams.customFieldMap.dealFields.CB_Subscription_MRR;\nlet howToUpdateDealValue = steps.ConfigParams.tpConfig.third_party_configuration.config_json.cloudElements.syncRulesDeals.howToUpdateDealValue || null;\n\nlet subscriptionInfo = steps.getSubscriptionOnChargebee.response.body.list[0]['subscription'];\n\nlet pipedrive_id = steps.loopOverPersons.entry['id'];\nlet subscription_id = steps.getSubscriptionOnChargebee.response.body.list[0]['subscription']['id'];\nlet currency_code = steps.getSubscriptionOnChargebee.response.body.list[0]['subscription']['currency_code'];\nlet plan_amount = steps.getSubscriptionOnChargebee.response.body.list[0]['subscription']['plan_amount'];\nlet subscription_status = steps.getSubscriptionOnChargebee.response.body.list[0]['subscription']['status'];\nlet subscription_mrr =  steps.getSubscriptionOnChargebee.response.body.list[0]['subscription']['mrr'] || '0';\n\nlet deal_id = steps.loopOverExistingDeals.entry.id;\n\nlet updateDealConfig = {\n  url : 'https://api-proxy.pipedrive.com/deals/'+deal_id,\n  header:{\n    \"Authorization\": steps.ConfigParams.tpConfig.third_party_configuration.config_json.cloudElements.OAuth_Parameters.access_token || null\n  },\n  body:{\n    title: \"Subscription ID: \" + subscription_id,\n    currency: currency_code,\n    person_id: pipedrive_id\n  }\n}\n\nif(steps.ConfigParams.config.params.updateDealValue === true){\n  updateDealConfig.body.value = plan_amount;\n}\n\nif(steps.loopOverPersons.entry['org_id'] !== null){\n  let organization_id = steps.loopOverPersons.entry['org_id']['value'];\n  updateDealConfig.body.org_id = organization_id;\n}\n\nif(steps.defineActionForExistingDeals.configuration.stage !== undefined){\n  let stage_id = steps.defineActionForExistingDeals.configuration.stage;\n  updateDealConfig.body.stage_id = stage_id;\n}\n\nif(howToUpdateDealValue === \"option1\"){ //Update Deal Value with Recurring Items Total\n  updateDealConfig.body.value = ((steps.subscriptionInformation.subscriptionData.list[0]['subscription']['mrr'] * steps.subscriptionInformation.subscriptionData.list[0]['subscription']['billing_period'])/100) || 0;\n}\n\nif(howToUpdateDealValue === \"option2\"){ //Update Deal Value with Invoice Amount\n  if(steps.invoiceInformation !== undefined){\n    if(steps.invoiceInformation.invoiceData !== null){\n      updateDealConfig.body.value = (steps.invoiceInformation.invoiceData.list[0]['invoice']['total']/100) || 0;\n    }\n  }else{\n    updateDealConfig.body.value = 0;\n  }\n}\n\nif(howToUpdateDealValue === \"option3\"){ //Update Deal Value with MRR\n  updateDealConfig.body.value = (steps.subscriptionInformation.subscriptionData.list[0]['subscription']['mrr']/100) || 0;\n}\n\nupdateDealConfig.body[fieldNameSubscriptionStatus] = subscription_status;\nupdateDealConfig.body[fieldNameSubscriptionId] = subscription_id;\nupdateDealConfig.body[fieldNameSubscriptionMRR] = subscription_mrr;\n\ndone({\n  updateDealConfig: updateDealConfig\n});\n\n"}},{"id":236091,"onSuccess":["updateConfiguration"],"onFailure":[],"name":"updateThirdPartyInstance","type":"request","properties":{"api":"${steps.updateElementInstanceParams.updateParams.url}","body":"${steps.updateElementInstanceParams.updateParams.body}","method":"PUT"}},{"id":236092,"onSuccess":["fetchChangedSubscription_params"],"onFailure":["ApiError"],"name":"updateTpConfig_1","type":"httpRequest","properties":{"retryAttempts":"5","retryDelay":"200","headers":"${steps.updateTpConfigParams_1.tpConfigUpdateParams.headers}","retry":"true","body":"${steps.updateTpConfigParams_1.tpConfigUpdateParams.body}","url":"${steps.updateTpConfigParams_1.tpConfigUpdateParams.url}","method":"POST"}},{"id":236093,"onSuccess":["Success"],"onFailure":["ApiError"],"name":"updateTpConfig_2","type":"httpRequest","properties":{"retryAttempts":"5","retryDelay":"200","headers":"${steps.updateTpConfigParams_2.tpConfigUpdateParams.headers}","retry":"true","body":"${steps.updateTpConfigParams_2.tpConfigUpdateParams.body}","url":"${steps.updateTpConfigParams_2.tpConfigUpdateParams.url}","method":"POST"}},{"id":236094,"onSuccess":["updateTpConfig_1"],"onFailure":[],"name":"updateTpConfigParams_1","type":"script","properties":{"body":"let customFieldMap = steps.ConfigParams.customFieldMap;\nlet configJson = steps.ConfigParams.tpConfig.third_party_configuration.config_json;\n\nconfigJson.cloudElements.customFieldMap = customFieldMap;\n\nlet tpConfigUpdateParams = steps.InputParams.tpConfigUpdateParams;\n\ntpConfigUpdateParams.body.config_json = configJson;\n\ndone({\n  tpConfigUpdateParams: tpConfigUpdateParams\n});\n"}},{"id":236095,"onSuccess":["updateTpConfig_2"],"onFailure":[],"name":"updateTpConfigParams_2","type":"script","properties":{"body":"let customFieldMap = steps.ConfigParams.customFieldMap;\nlet configJson =  steps.getTpConfig.response.body.third_party_configuration.config_json;\n\nconfigJson.cloudElements.customFieldMap = customFieldMap;\n\nlet tpConfigUpdateParams = steps.InputParams.tpConfigUpdateParams;\n\nconfigJson.batch.sync_subscription = {\n     \"get_error\" : null,\n     \"change_subscription\" : null,\n    \"status\":\"success\"\n   };\n   \ntpConfigUpdateParams.body.config_json = configJson;\n\ndone({\n  tpConfigUpdateParams: tpConfigUpdateParams\n});\n"}},{"id":236096,"onSuccess":["updateExistingDealLog"],"onFailure":[],"name":"updateTpEntity1","type":"httpRequest","properties":{"headers":"${steps.updateTpEntityParams_1.payload.auth}","query":"${steps.updateTpEntityParams_1.payload.query}","url":"${steps.updateTpEntityParams_1.payload.url}","method":"POST"}},{"id":236097,"onSuccess":["updateTpEntityCustomer2"],"onFailure":[],"name":"updateTpEntity2","type":"httpRequest","properties":{"headers":"${steps.updateTpEntityParams_2.payload.auth}","query":"${steps.updateTpEntityParams_2.payload.query}","url":"${steps.updateTpEntityParams_2.payload.url}","method":"POST"}},{"id":236098,"onSuccess":["updateTpEntityCustomer3"],"onFailure":[],"name":"updateTpEntity3","type":"httpRequest","properties":{"headers":"${steps.updateTpEntityParams_3.payload.auth}","query":"${steps.updateTpEntityParams_3.payload.query}","url":"${steps.updateTpEntityParams_3.payload.url}","method":"POST"}},{"id":236099,"onSuccess":["updateTpEntityCustomer4"],"onFailure":[],"name":"updateTpEntity4","type":"httpRequest","properties":{"headers":"${steps.updateTpEntityParams_4.payload.auth}","query":"${steps.updateTpEntityParams_4.payload.query}","url":"${steps.updateTpEntityParams_4.payload.url}","method":"POST"}},{"id":236100,"onSuccess":["createLog"],"onFailure":[],"name":"updateTpEntityCustomer2","type":"httpRequest","properties":{"headers":"${steps.updateTpEntityParams_2.updateCustomerTpEntityParams.auth}","query":"${steps.updateTpEntityParams_2.updateCustomerTpEntityParams.query}","url":"${steps.updateTpEntityParams_2.updateCustomerTpEntityParams.url}","method":"POST"}},{"id":236101,"onSuccess":["updateLog"],"onFailure":[],"name":"updateTpEntityCustomer3","type":"httpRequest","properties":{"headers":"${steps.updateTpEntityParams_3.updateCustomerTpEntityParams.auth}","query":"${steps.updateTpEntityParams_3.updateCustomerTpEntityParams.query}","url":"${steps.updateTpEntityParams_3.updateCustomerTpEntityParams.url}","method":"POST"}},{"id":236102,"onSuccess":["createLog2"],"onFailure":[],"name":"updateTpEntityCustomer4","type":"httpRequest","properties":{"headers":"${steps.updateTpEntityParams_4.updateCustomerTpEntityParams.auth}","query":"${steps.updateTpEntityParams_4.updateCustomerTpEntityParams.query}","url":"${steps.updateTpEntityParams_4.updateCustomerTpEntityParams.url}","method":"POST"}},{"id":236103,"onSuccess":["loopOverChangedSubscription"],"onFailure":[],"name":"updateTpEntityError","type":"httpRequest","properties":{"headers":"${steps.updateTpEntityError_params.payload.auth}","query":"${steps.updateTpEntityError_params.payload.query}","url":"${steps.updateTpEntityError_params.payload.url}","method":"POST"}},{"id":236104,"onSuccess":["updateTpEntityError"],"onFailure":[],"name":"updateTpEntityError_params","type":"script","properties":{"body":"let apiKey = steps.InputParams.input.cbApiKey;\nlet siteName = steps.InputParams.input.siteName;\nlet siteDomain = steps.InputParams.input.siteDomain;\nlet integrationName = steps.InputParams.input.integrationName;\n\nlet password = \"\";\n\nlet subscriptionId = steps.loopOverChangedSubscription.entry.subscription.id;\nlet chargebee_data_url = \"/admin-console/subscriptions/\"+subscriptionId;\nlet cb_link = \"<a href='\"+chargebee_data_url+\"' target=\\\"blank\\\">\"+subscriptionId+\"</a>\";\n\nlet syncStatus = \"update_failed\";\nlet errorMessage = cb_link + \" - Deal sync failed\";\n\nlet params = {\n  url: \"https://\"+siteName+\".\"+siteDomain+\"/api/v2/third_party_entity_mappings/update_entity\",\n  auth:{\n    Authorization: \"Basic \" + CE.b64(apiKey + \":\" + password)\n  },\n  query:{\n    integration_name: integrationName,\n    entity_id: subscriptionId,\n    entity_type: \"subscription\",\n    status: syncStatus,\n    error_message: errorMessage\n  }\n};\n\n\ndone({\n  payload: params\n});"}},{"id":240367,"onSuccess":["updateTpEntityFailedSubscription"],"onFailure":[],"name":"updateTpEntityFailedParams","type":"script","properties":{"body":"let apiKey = steps.InputParams.input.cbApiKey;\nlet siteName = steps.InputParams.input.siteName;\nlet siteDomain = steps.InputParams.input.siteDomain;\nlet integrationName = steps.InputParams.input.integrationName;\n\nlet password = \"\";\n\nlet tpEntityId = (steps.getTpEntityMappingOfSubscription_2.response.body.third_party_entity_mapping !== undefined) ? steps.getTpEntityMappingOfSubscription_2.response.body.third_party_entity_mapping.third_party_entity_id : undefined;\n\nlet subscriptionId = steps.loopOverChangedSubscription.entry.subscription.id;\nlet syncStatus = \"update_failed\";\nlet chargebee_data_url = \"/admin-console/subscriptions/\"+subscriptionId;\nlet cb_link = \"<a href='\"+chargebee_data_url+\"' target=\\\"blank\\\">\"+subscriptionId+\"</a>\";\nlet errorMessage = cb_link + \" - Deal sync failed\";\n\nlet params = {\n  url: \"https://\"+siteName+\".\"+siteDomain+\"/api/v2/third_party_entity_mappings/update_entity\",\n  auth:{\n    Authorization: \"Basic \" + CE.b64(apiKey + \":\" + password)\n  },\n  query:{\n    integration_name: integrationName,\n    entity_id: subscriptionId,\n    entity_type: \"subscription\",\n    third_party_entity_id: (tpEntityId !== undefined) ? tpEntityId : undefined,\n    status: syncStatus,\n    error_message: errorMessage\n  }\n};\n\n\n// // ----------------- Customer Tp Entity Update --------\n\n// let customerId = steps.loopOverChangedSubscription.entry.subscription.customer_id;\n\n// let tpEntityIdOfCustomer = steps.getTpEntityMappingOfCustomers_2.response.body.third_party_entity_mapping.third_party_entity_id;\n\n// let customerResource = steps.getTpEntityMappingOfCustomers_2.response.body.third_party_entity_mapping.old_resource;\n\n// // customerResource.subscription_deal_id = (tpEntityId !== undefined) ? tpEntityId : undefined;\n\n// // customerResource.subscription_status = (steps.loopOverChangedSubscription.entry.subscription !== undefined) ? steps.loopOverChangedSubscription.entry.subscription.status : undefined;\n\n// // customerResource.subscription_id = (steps.loopOverChangedSubscription.entry.subscription !== undefined) ? steps.loopOverChangedSubscription.entry.subscription.id : undefined;\n\n\n// let updateCustomerTpEntityParams = {\n//   url: \"https://\"+siteName+\".\"+siteDomain+\"/api/v2/third_party_entity_mappings/update_entity\",\n//   auth:{\n//     Authorization: \"Basic \" + CE.b64(apiKey + \":\" + password)\n//   },\n//   query:{\n//     integration_name: integrationName,\n//     entity_id: customerId,\n//     entity_type: \"customer\",\n//     third_party_entity_id: tpEntityIdOfCustomer,\n//     status: \"synced\",\n//     old_resource: JSON.stringify(customerResource)\n//   }\n// }\n\ndone({\n  payload: params\n});"}},{"id":240397,"onSuccess":["loopOverChangedSubscription"],"onFailure":[],"name":"updateTpEntityFailedSubscription","type":"httpRequest","properties":{"retryAttempts":"5","retryStatusCodes":"429","retryDelay":"200","headers":"${steps.updateTpEntityFailedParams.payload.auth}","retry":"true","query":"${steps.updateTpEntityFailedParams.payload.query}","url":"${steps.updateTpEntityFailedParams.payload.url}","method":"POST"}},{"id":236105,"onSuccess":["updateTpEntity1"],"onFailure":[],"name":"updateTpEntityParams_1","type":"script","properties":{"body":"let apiKey = steps.InputParams.input.cbApiKey;\nlet siteName = steps.InputParams.input.siteName;\nlet siteDomain = steps.InputParams.input.siteDomain;\nlet integrationName = steps.InputParams.input.integrationName;\n\nlet password = \"\";\n\nlet resource = steps.updateTheExistingDeal_params.updateDealConfig;\nlet syncStatus = \"synced\";\nlet tpEntityId = steps.updateExistingDeal.response.body.data.id || '';\nlet errorMessage;\n\nlet subscriptionId = steps.retrieveTpEntityMappingForDeal.response.body.third_party_entity_mapping.entity_id;\n\nlet chargebee_data_url = \"/admin-console/subscriptions/\"+subscriptionId;\nlet cb_link = \"<a href='\"+chargebee_data_url+\"' target=\\\"blank\\\">\"+subscriptionId+\"</a>\";\n\nif((steps.updateExistingDeal.response.code !== 200) && (steps.updateExistingDeal.response.code !== 201)){\n  syncStatus = \"update_failed\";\n  errorMessage = cb_link + \" - Deal update failed\"\n}\n\nlet params = {\n  url: \"https://\"+siteName+\".\"+siteDomain+\"/api/v2/third_party_entity_mappings/update_entity\",\n  auth:{\n    Authorization: \"Basic \" + CE.b64(apiKey + \":\" + password)\n  },\n  query:{\n    integration_name: integrationName,\n    entity_id: subscriptionId,\n    entity_type: \"subscription\",\n    third_party_entity_id: syncStatus !== \"update_failed\"? tpEntityId : undefined,\n    status: syncStatus,\n    old_resource: syncStatus !== \"update_failed\"? JSON.stringify(resource): undefined,\n    error_message: errorMessage\n  }\n};\n\ndone({\n  payload: params\n});"}},{"id":236106,"onSuccess":["updateTpEntity2"],"onFailure":[],"name":"updateTpEntityParams_2","type":"script","properties":{"body":"let apiKey = steps.InputParams.input.cbApiKey;\nlet siteName = steps.InputParams.input.siteName;\nlet siteDomain = steps.InputParams.input.siteDomain;\nlet integrationName = steps.InputParams.input.integrationName;\n\nlet password = \"\";\n\nlet resource = steps.createDealParams.createDealConfig;\nlet syncStatus = \"synced\";\nlet tpEntityId = steps.createDealPipedrive.response.body.data.id || undefined;\nlet errorMessage;\n\n// let subscriptionId = steps.subscriptionInformation.subscriptionData.id;\n\nlet subscriptionId = steps.loopOverChangedSubscription.entry.subscription.id;\n\nlet chargebee_data_url = \"/admin-console/subscriptions/\"+subscriptionId;\nlet cb_link = \"<a href='\"+chargebee_data_url+\"' target=\\\"blank\\\">\"+subscriptionId+\"</a>\";\n\nif((steps.createDealPipedrive.response.code !== 200) && (steps.createDealPipedrive.response.code !== 201)){\n  syncStatus = \"update_failed\";\n  errorMessage = cb_link + \" - Deal sync failed\"\n}\n\nlet params = {\n  url: \"https://\"+siteName+\".\"+siteDomain+\"/api/v2/third_party_entity_mappings/update_entity\",\n  auth:{\n    Authorization: \"Basic \" + CE.b64(apiKey + \":\" + password)\n  },\n  query:{\n    integration_name: integrationName,\n    entity_id: subscriptionId,\n    entity_type: \"subscription\",\n    third_party_entity_id: syncStatus !== \"update_failed\"? tpEntityId : undefined,\n    status: syncStatus,\n    old_resource: syncStatus !== \"update_failed\"? JSON.stringify(resource): undefined,\n    error_message: errorMessage\n  }\n};\n\n\n// ----------------- Customer Tp Entity Update --------\n\nlet customerId = steps.loopOverChangedSubscription.entry.subscription.customer_id;\nlet tpEntityIdOfCustomer = steps.getTpEntityMappingOfCustomer.response.body.third_party_entity_mapping.third_party_entity_id;\nlet customerResource = steps.getTpEntityMappingOfCustomer.response.body.third_party_entity_mapping.old_resource;\ncustomerResource.subscription_deal_id = (tpEntityId !== undefined) ? tpEntityId : undefined;\ncustomerResource.subscription_status = (steps.loopOverChangedSubscription.entry.subscription !== undefined) ? steps.loopOverChangedSubscription.entry.subscription.status : undefined;\ncustomerResource.subscription_id = (steps.loopOverChangedSubscription.entry.subscription !== undefined) ? steps.loopOverChangedSubscription.entry.subscription.id : undefined;\n\n\nlet updateCustomerTpEntityParams = {\n  url: \"https://\"+siteName+\".\"+siteDomain+\"/api/v2/third_party_entity_mappings/update_entity\",\n  auth:{\n    Authorization: \"Basic \" + CE.b64(apiKey + \":\" + password)\n  },\n  query:{\n    integration_name: integrationName,\n    entity_id: customerId,\n    entity_type: \"customer\",\n    third_party_entity_id: tpEntityIdOfCustomer,\n    status: \"synced\",\n    old_resource: JSON.stringify(customerResource)\n  }\n}\n\ndone({\n  payload: params,\n  updateCustomerTpEntityParams: updateCustomerTpEntityParams\n});"}},{"id":236107,"onSuccess":["updateTpEntity3"],"onFailure":[],"name":"updateTpEntityParams_3","type":"script","properties":{"body":"let apiKey = steps.InputParams.input.cbApiKey;\nlet siteName = steps.InputParams.input.siteName;\nlet siteDomain = steps.InputParams.input.siteDomain;\nlet integrationName = steps.InputParams.input.integrationName;\n\nlet password = \"\";\n\nlet resource = steps.updateDealParams.updateDealConfig;\nlet syncStatus = \"synced\";\n\n// let tpEntityId = steps.getTpEntityMappingOfSubscription.response.body.third_party_entity_mapping.third_party_entity_id;\n\nlet tpEntityId = steps.updateDealPipedrive.response.body.data.id;\n\n// let tpEntityId = steps.retrieveTpEntityMappingForDeal2.response.body.third_party_entity_mapping.entity_id || '';\n\nlet errorMessage;\n\n// let subscriptionId = steps.subscriptionInformation.subscriptionData.id;\n\nlet subscriptionId = steps.loopOverChangedSubscription.entry.subscription.id;\n\nlet chargebee_data_url = \"/admin-console/subscriptions/\"+subscriptionId;\nlet cb_link = \"<a href='\"+chargebee_data_url+\"' target=\\\"blank\\\">\"+subscriptionId+\"</a>\";\n\nif((steps.updateDealPipedrive.response.code !== 200) && (steps.updateDealPipedrive.response.code !== 201)){\n  syncStatus = \"update_failed\";\n  errorMessage = cb_link + \" - Deal sync failed\"\n}\n\nlet params = {\n  url: \"https://\"+siteName+\".\"+siteDomain+\"/api/v2/third_party_entity_mappings/update_entity\",\n  auth:{\n    Authorization: \"Basic \" + CE.b64(apiKey + \":\" + password)\n  },\n  query:{\n    integration_name: integrationName,\n    entity_id: subscriptionId,\n    entity_type: \"subscription\",\n    third_party_entity_id: syncStatus !== \"update_failed\"? tpEntityId : undefined,\n    status: syncStatus,\n    old_resource: syncStatus !== \"update_failed\"? JSON.stringify(resource): undefined,\n    error_message: errorMessage\n  }\n};\n\n// --------------------- Customer Tp Entity Update ----------\n\nlet customerId = steps.loopOverChangedSubscription.entry.subscription.customer_id;\nlet tpEntityIdOfCustomer = steps.getTpEntityMappingOfCustomer.response.body.third_party_entity_mapping.third_party_entity_id;\nlet customerResource = steps.getTpEntityMappingOfCustomer.response.body.third_party_entity_mapping.old_resource;\ncustomerResource.subscription_deal_id = (tpEntityId !== undefined) ? tpEntityId : undefined;\n\ncustomerResource.subscription_status = (steps.loopOverChangedSubscription.entry.subscription !== undefined) ? steps.loopOverChangedSubscription.entry.subscription.status : undefined;\ncustomerResource.subscription_id = (steps.loopOverChangedSubscription.entry.subscription !== undefined) ? steps.loopOverChangedSubscription.entry.subscription.id : undefined;\n\n\nlet updateCustomerTpEntityParams = {\n  url: \"https://\"+siteName+\".\"+siteDomain+\"/api/v2/third_party_entity_mappings/update_entity\",\n  auth:{\n    Authorization: \"Basic \" + CE.b64(apiKey + \":\" + password)\n  },\n  query:{\n    integration_name: integrationName,\n    entity_id: customerId,\n    entity_type: \"customer\",\n    third_party_entity_id: tpEntityIdOfCustomer,\n    status: \"synced\",\n    old_resource: JSON.stringify(customerResource)\n  }\n}\n\ndone({\n  payload: params,\n  updateCustomerTpEntityParams: updateCustomerTpEntityParams\n});"}},{"id":236108,"onSuccess":["updateTpEntity4"],"onFailure":[],"name":"updateTpEntityParams_4","type":"script","properties":{"body":"let apiKey = steps.InputParams.input.cbApiKey;\nlet siteName = steps.InputParams.input.siteName;\nlet siteDomain = steps.InputParams.input.siteDomain;\nlet integrationName = steps.InputParams.input.integrationName;\n\nlet password = \"\";\n\nlet resource = steps.createDealParams2.createDealConfig2;\nlet syncStatus = \"synced\";\nlet tpEntityId = steps.createDealPipedrive2.response.body.data.id || undefined;\nlet errorMessage;\n\nlet subscriptionId = steps.loopOverChangedSubscription.entry.subscription.id;\n\nlet chargebee_data_url = \"/admin-console/subscriptions/\"+subscriptionId;\nlet cb_link = \"<a href='\"+chargebee_data_url+\"' target=\\\"blank\\\">\"+subscriptionId+\"</a>\";\n\nif((steps.createDealPipedrive2.response.code !== 200) && (steps.createDealPipedrive2.response.code !== 201)){\n  syncStatus = \"update_failed\";\n  errorMessage = cb_link + \" - Deal sync failed\"\n}\n\nlet params = {\n  url: \"https://\"+siteName+\".\"+siteDomain+\"/api/v2/third_party_entity_mappings/update_entity\",\n  auth:{\n    Authorization: \"Basic \" + CE.b64(apiKey + \":\" + password)\n  },\n  query:{\n    integration_name: integrationName,\n    entity_id: subscriptionId,\n    entity_type: \"subscription\",\n    third_party_entity_id: syncStatus !== \"update_failed\"? tpEntityId : undefined,\n    status: syncStatus,\n    old_resource: syncStatus !== \"update_failed\"? JSON.stringify(resource): undefined,\n    error_message: errorMessage\n  }\n};\n\n\n// ----------------- Customer Tp Entity Update --------\n\nlet customerId = steps.loopOverChangedSubscription.entry.subscription.customer_id;\nlet tpEntityIdOfCustomer = steps.getTpEntityMappingOfCustomer.response.body.third_party_entity_mapping.third_party_entity_id;\nlet customerResource = steps.getTpEntityMappingOfCustomer.response.body.third_party_entity_mapping.old_resource;\ncustomerResource.subscription_deal_id = (tpEntityId !== undefined) ? tpEntityId : undefined;\n\ncustomerResource.subscription_status = (steps.loopOverChangedSubscription.entry.subscription !== undefined) ? steps.loopOverChangedSubscription.entry.subscription.status : undefined;\ncustomerResource.subscription_id = (steps.loopOverChangedSubscription.entry.subscription !== undefined) ? steps.loopOverChangedSubscription.entry.subscription.id : undefined;\n\nlet updateCustomerTpEntityParams = {\n  url: \"https://\"+siteName+\".\"+siteDomain+\"/api/v2/third_party_entity_mappings/update_entity\",\n  auth:{\n    Authorization: \"Basic \" + CE.b64(apiKey + \":\" + password)\n  },\n  query:{\n    integration_name: integrationName,\n    entity_id: customerId,\n    entity_type: \"customer\",\n    third_party_entity_id: tpEntityIdOfCustomer,\n    status: \"synced\",\n    old_resource: JSON.stringify(customerResource)\n  }\n}\n\n\ndone({\n  payload: params,\n  updateCustomerTpEntityParams: updateCustomerTpEntityParams\n});"}}],"triggers":[{"id":27242,"onSuccess":["InputParams"],"onFailure":[],"type":"manual","async":true,"name":"trigger","properties":{}}],"engine":"v3","active":true,"debugLoggingEnabled":true,"singleThreaded":false,"configuration":[{"id":56881,"key":"chargebee","name":"chargebee","type":"elementInstance","required":true},{"id":56882,"key":"pipedrive","name":"pipedrive","type":"elementInstance","required":true}]}