{"id":29413,"name":"testing-pipedriveFullSyncRun","userId":27893,"accountId":24428,"createdDate":"2019-09-05T07:01:43Z","steps":[{"id":229114,"onSuccess":["isIgnoreAll"],"onFailure":[],"name":"CheckOffset","type":"filter","properties":{"body":"done(steps.GetThirdPartyErrorDetails.response.body.next_offset === undefined);"}},{"id":215843,"onSuccess":["hasError"],"onFailure":[],"name":"checkStatus","type":"script","properties":{"body":"let input = {\n  error : false,\n  isStopSync: false,\n  done: false,\n  url : \"https://\"+steps.InputParams.params.input.siteName+\".\"+steps.InputParams.params.input.siteDomain+\"/api/v2/third_party_sync_details/\" +steps.lastSyncDetails.response.body.third_party_sync_detail.id,\n  auth: {\n    Authorization: \"Basic \" + CE.b64(steps.InputParams.params.input.apiKey + \":\" + \"\")\n  },\n  body: steps.lastSyncDetails.response.body.third_party_sync_detail,\n};\n\nif(steps.executionStatus.response.body.status === undefined) {\n  input.error = true;\n  input.done = true;\n  input.body.status = \"failed\";\n}else if(steps.executionStatus.response.body.status === \"failed\"){\n  input.error = true;\n  input.done = true;\n  input.body.status = \"failed\";\n}else if(steps.executionStatus.response.body.status === \"success\"){\n  \n  for(var i=0;i<steps.executionStatus.response.body.stepExecutions.length;i++){\n    if(steps.executionStatus.response.body.stepExecutions[i][\"stepName\"] ===\"Success\") {\n      // input.result = steps.executionStatus.response.body.stepExecutions[i];\n      input.done = true;\n      input.error = false;\n      input.body.status = \"succeeded\";\n      break;\n    }\n    if(steps.executionStatus.response.body.stepExecutions[i][\"stepName\"] ===\"Failed\") {\n        input.error = true;\n        input.isStopSync=true;\n        input.done = true;\n        input.body.status = \"failed\";\n        break;\n    }\n  }\n  \n  \n  if(steps.getTpConfig.response.body.third_party_configuration.config_json.batch.status === \"SUCCESS\"){\n    input.error = false;\n    input.done = true;\n    input.body.status = \"succeeded\";\n  }\n  \n  if(steps.getTpConfig.response.body.third_party_configuration.config_json.batch.status === \"FAILED\"){\n    input.error = true;\n    input.done = true;\n    input.body.status = \"failed\";\n  }\n  \n}else if(steps.executionStatus.response.body.status === \"pending\"){\n  input.error = false;\n  input.done = false;\n  input.body.status = \"running\";\n}\n\n\ndone({\n  settings: input\n});"}},{"id":222659,"onSuccess":["lastSyncDetails"],"onFailure":[],"name":"ConfigParams","type":"script","properties":{"body":"let unlink =  {\n        \"id\": \"unlink\",\n        \"display\": \"Unlink Integration\",\n        \"buttonLook\": \"MUTTED\",\n        \"type\": \"POP_UP\",\n        \"popUp\": {\n            \"type\": \"SIMPLE\",\n            \"title\": \"Do you really want to unlink the integration?\",\n            \"submitButton\": \"Unlink\",\n            \"cancelButton\": \"Dismiss\",\n            \"description\": \"This will remove all the configuration details such as login authentication, configurations mapping etc. If you want to sync again, you will have to start the sync process from the beginning.\",\n            \"apiEndPoint\": {\n                \"apiUrl\": steps.EnvProps.cloudElementsUrl+\"/pipedrive/unlink\",\n                \"type\": \"GET\",\n                \"headers\": {\n                    \"Elements-Formula-Instance-Id\": steps.getTpConfig.response.body.third_party_configuration.config_json.cloudElements.formulas.formula_unlinkIntegration.instance || null\n                },\n                \"input\": {\n                    \"integrationName\": steps.InputParams.params.input.integrationName,\n                    \"siteDomain\": steps.InputParams.params.input.siteDomain,\n                    \"apiKey\" : steps.InputParams.params.input.apiKey,\n                    \"siteName\": steps.InputParams.params.input.siteName\n                }\n            }\n        }\n  }\n\ndone({\n  unlink: unlink\n});"}},{"id":240076,"onSuccess":["isDispatcherInstanceCreated"],"onFailure":[],"name":"createNewDispatcherInstance","type":"request","properties":{"method":"POST","api":"${steps.createNewDispatcherInstance_params.createInstanceConfig.url}","body":"${steps.createNewDispatcherInstance_params.createInstanceConfig.body}"}},{"id":240075,"onSuccess":["createNewDispatcherInstance"],"onFailure":["sendFailedCard"],"name":"createNewDispatcherInstance_params","type":"script","properties":{"body":"let formulaId = steps.formulaInformation.formulaId || null;\n\n\nif(formulaId === undefined){\n  done(false);\n}\n\nlet createInstanceConfig = {\n  url: \"/formulas/\"+formulaId+\"/instances\",\n  body: steps.formulaInformation.formula_SyncDispatcher\n};\n\n\ndone({\n  createInstanceConfig: createInstanceConfig\n});"}},{"id":215844,"onSuccess":["isSyncStarted"],"onFailure":[],"name":"createNewSyncDetails","type":"httpRequest","properties":{"retry":"true","url":"${steps.createNewSyncDetails_params.newSyncDetailsParams.url}","method":"POST","query":"${steps.createNewSyncDetails_params.newSyncDetailsParams.query}","retryAttempts":"5","headers":"${steps.createNewSyncDetails_params.newSyncDetailsParams.headers}","retryDelay":"200"}},{"id":215845,"onSuccess":["createNewSyncDetails"],"onFailure":[],"name":"createNewSyncDetails_params","type":"script","properties":{"body":"let apiKey = steps.InputParams.params.input.apiKey;\nlet configJson = steps.getTpConfig.response.body.third_party_configuration.config_json;\n\nlet newSyncDetailsParams = {\n  url: \"https://\"+steps.InputParams.params.input.siteName+\".\"+steps.InputParams.params.input.siteDomain+\"/api/v2/third_party_sync_details\",\n  headers:{\n    Authorization: \"Basic \" + CE.b64(apiKey + \":\" + \"\")\n  },\n  query : {\n  'third_party_configuration[integration_name]': steps.InputParams.params.input.integrationName,\n  \"context\": {\n      \"excecutionId\": steps.startExecution.response.body[0].id,\n      \"instance\": configJson.cloudElements.formulas.formula_SyncDispatcher.instance || \"undefined\",\n      \"formula\": configJson.cloudElements.formulas.formula_SyncDispatcher.id || \"undefined\",\n      \"initialSync\":false,\n      \"syncData\" :{ \n         \"syncStart\" : Math.round((new Date().getTime())/1000)\n       }\n    }\n  }\n};\n\ndone({\n  newSyncDetailsParams: newSyncDetailsParams\n});"}},{"id":219849,"onSuccess":["InputParams"],"onFailure":[],"name":"EnvProps","type":"script","properties":{"body":"let cloudElementsUrl = \"https://staging.cloud-elements.com/elements/api-v2\";\n\ndone({\n  cloudElementsUrl: cloudElementsUrl\n});\n\n\n"}},{"id":229115,"onSuccess":["CheckOffset"],"onFailure":[],"name":"ErrorList","type":"script","properties":{"body":"let details = steps.GetThirdPartyErrorDetails.response.body.list;\nlet list = [];\nif(steps.ErrorList !== undefined){\n  list = steps.ErrorList.list;\n}\n\nif(details.length !== 0){\n  if(list.length === 0){\n    list = details;\n  }else{\n    list = list.concat(details);\n  }\n}\n\ndone({list : list});\n\n"}},{"id":215846,"onSuccess":["checkStatus"],"onFailure":["checkStatus"],"name":"executionStatus","type":"request","properties":{"method":"GET","api":"${steps.executionStatus_params.payload.url}","retry":"true","retryAttempts":"5","retryDelay":"200"}},{"id":215847,"onSuccess":["executionStatus"],"onFailure":[],"name":"executionStatus_params","type":"script","properties":{"body":"let executionId = steps.getTpConfig.response.body.third_party_configuration.config_json.cloudElements.formulas.formula_FullSyncRun.dispatcherExecutionId || null;\n\nlet payload = {\n  url: \"/formulas/instances/executions/\"+executionId\n};\n\n\ndone({\n  payload: payload\n});"}},{"id":215848,"onSuccess":["updateSyncStatus_Failed"],"onFailure":[],"name":"failedSyncParams","type":"script","properties":{"body":"let payload = {\n  error : false,\n  done: false,\n  url : \"https://\"+steps.InputParams.params.input.siteName+\".\"+steps.InputParams.params.input.siteDomain+\"/api/v2/third_party_sync_details/\" +steps.createNewSyncDetails.response.body.third_party_sync_detail.id,\n  auth: {\n    Authorization: \"Basic \" + CE.b64(steps.InputParams.params.input.apiKey + \":\" + \"\")\n  },\n  body: steps.createNewSyncDetails.response.body.third_party_sync_detail,\n};\n\npayload.body.status = \"failed\";\n\ndone({\n  payload: payload\n});"}},{"id":240073,"onSuccess":["createNewDispatcherInstance_params"],"onFailure":[],"name":"formulaInformation","type":"script","properties":{"body":"let siteName = steps.InputParams.params.input.siteName;\n\nlet formula_SyncDispatcher = steps.getTpConfig.response.body.third_party_configuration.config_json.cloudElements.formulas.formula_SyncDispatcher.id;\n\ndone({\n  formula_SyncDispatcher:{\n    active: true,\n    configuration: {},\n    name: siteName + \"-SyncDispatcher\"\n  },\n  formulaId:formula_SyncDispatcher\n});"}},{"id":215849,"onSuccess":["isLastPollingSuccess"],"onFailure":["isLastPollingSuccess"],"name":"getExecutionStatus","type":"request","properties":{"api":"/formulas/instances/executions/${steps.InputParams.executionId}/errors","method":"GET"}},{"id":231180,"onSuccess":["updateStatus"],"onFailure":[],"name":"getLatestSyncDetails","type":"httpRequest","properties":{"url":"${steps.InputParams.retrieveLatestSyncConfig.url}","method":"GET","query":"${steps.InputParams.retrieveLatestSyncConfig.query}","headers":"${steps.InputParams.retrieveLatestSyncConfig.auth}"}},{"id":215850,"onSuccess":["updateStatus"],"onFailure":[],"name":"getResult","type":"request","properties":{"api":"${steps.getResult_params.payload.url}","retry":"true","method":"GET","retryAttempts":"5","retryDelay":"200"}},{"id":215851,"onSuccess":["updateStatus"],"onFailure":[],"name":"getResult_params","type":"script","properties":{"body":"let id = steps.checkStatus.settings.result.id;\n\nlet payload = {\n  url: \"/formulas/instances/executions/steps/\"+id+\"/values\"\n};\n\n\ndone({\n  payload: payload\n});"}},{"id":229117,"onSuccess":["GetThirdPartyErrorDetails"],"onFailure":[],"name":"GetThirdPartyConfigParams","type":"script","properties":{"body":"let apiKey = steps.InputParams.params.input.apiKey;\nlet siteName = steps.InputParams.params.input.siteName;\nlet siteDomain = steps.InputParams.params.input.siteDomain;\nlet type = steps.InputParams.params.input.integrationName;\n\nlet password = \"\";\nlet startTime;\nlet endTime;\nlet syncStaus = steps.lastSyncDetails.response.body.third_party_sync_detail;\nif(syncStaus.status === \"succeeded\"){\n  startTime = syncStaus.context.syncData.syncStart;\n}else{\n  startTime = syncStaus.context.syncData.previousSyncStart;\n  endTime = syncStaus.context.syncData.previousSyncEnd;\n}\n\nlet params = {\n  input: {\n    apiKey: apiKey,\n    siteName: siteName,\n    siteDomain:siteDomain,\n    type: type,\n    config :{\n      url: \"https://\"+siteName+\".\"+siteDomain+\"/api/v2/third_party_entity_mappings/list_all\",\n      auth:{\n        Authorization: \"Basic \" + CE.b64(apiKey + \":\" + password)\n      },\n      query:{\n        integration_name: type,\n        \"status[is]\": \"update_failed\",\n        \"modified_at[after]\": startTime,\n        \"modified_at[before]\" : syncStaus.status === \"failed\" ? endTime : undefined\n      }\n    }\n  }\n};\n\nif(steps.GetThirdPartyConfigParams !== undefined){\n  params.input.config.query.offset = steps.GetThirdPartyErrorDetails.response.body.next_offset;\n}\n\ndone({params:params});"}},{"id":229116,"onSuccess":["ErrorList"],"onFailure":[],"name":"GetThirdPartyErrorDetails","type":"httpRequest","properties":{"url":"${steps.GetThirdPartyConfigParams.params.input.config.url}","method":"GET","query":"${steps.GetThirdPartyConfigParams.params.input.config.query}","headers":"${steps.GetThirdPartyConfigParams.params.input.config.auth}"}},{"id":215852,"onSuccess":["ConfigParams"],"onFailure":["sendErrorMail"],"name":"getTpConfig","type":"httpRequest","properties":{"retry":"true","url":"${steps.InputParams.getTpConfigParams.url}","method":"GET","query":"${steps.InputParams.getTpConfigParams.query}","retryAttempts":"5","headers":"${steps.InputParams.getTpConfigParams.auth}","retryDelay":"200"}},{"id":215853,"onSuccess":["sendLastSyncDetails_IgnoreIndex"],"onFailure":[],"name":"getTpConfig_2","type":"httpRequest","properties":{"retry":"true","url":"${steps.InputParams.getTpConfigParams.url}","method":"GET","query":"${steps.InputParams.getTpConfigParams.query}","retryAttempts":"5","headers":"${steps.InputParams.getTpConfigParams.auth}","retryDelay":"200"}},{"id":226003,"onSuccess":["updateTpConfig4"],"onFailure":["sendErrorCard_4"],"name":"getTpConfig_4","type":"httpRequest","properties":{"method":"GET","url":"${steps.InputParams.getTpConfigParams.url}","query":"${steps.InputParams.getTpConfigParams.query}","headers":"${steps.InputParams.getTpConfigParams.auth}"}},{"id":229123,"onSuccess":["TpData"],"onFailure":[],"name":"GetTPMapping1","type":"httpRequest","properties":{"url":"${steps.TPMappingParam.params.config.url}","method":"GET","query":"${steps.TPMappingParam.params.config.query}","headers":"${steps.TPMappingParam.params.config.auth}"}},{"id":215854,"onSuccess":["TPMappingParam"],"onFailure":["sendProcessCard"],"name":"hasDone","type":"filter","properties":{"body":"done(steps.checkStatus.settings.done);"}},{"id":215855,"onSuccess":["updateTpConfig4"],"onFailure":["hasDone"],"name":"hasError","type":"filter","properties":{"body":"done(steps.checkStatus.settings.error);"}},{"id":215856,"onSuccess":["notPolling"],"onFailure":[],"name":"InputParams","type":"script","properties":{"body":"let apiKey = trigger.args.request.query['cb-api-key'];\nlet siteName = trigger.args.request.query['cb-site-name'];\nlet integrationName = trigger.args.request.query['integrationName'] || \"pipedrive\";\nlet siteDomain = trigger.args.request.query['cb-domain'];\nlet syncNow = trigger.args.request.query['syncNow'];\n\nlet cloudElementsUrl = steps.EnvProps.cloudElementsUrl;\n\nlet syncNowButtonClick = trigger.args.request.query['syncNowButtonClick'];\nlet resolveButtonAction = trigger.args.request.query['resolveButtonAction'];\n\nlet executionId = (trigger.args.request.query['executionId'] !== undefined) ? trigger.args.request.query['executionId'] : null;\n\nlet initialSync = false;\nlet password = \"\";\n\nlet errorEmailEndpoint =  'https://' + siteName + '.' + siteDomain + '/adhoc_checkout_email/api/send';\n// let errorEmailAddress = \"integrations-growth-internal@chargebee.com\";\nlet errorEmailAddress = \"ajaitester@gmail.com\";\n\nlet retrieveLatestSyncConfig = {\n  url:\"https://\"+siteName+\".\"+siteDomain+\"/api/v2/third_party_sync_details/retrieve_latest_sync\",\n  auth:{\n    Authorization: \"Basic \" + CE.b64(apiKey + \":\" + password)\n  },\n  query:{\n    'third_party_configuration[integration_name]': integrationName\n  },\n};\n\nlet getTpConfigParams = {\n    url: \"https://\"+siteName+\".\"+siteDomain+\"/api/v2/third_party_configurations\",\n    auth:{\n      Authorization: \"Basic \" + CE.b64(apiKey + \":\" + password)\n    },\n    query:{\n      integration_name: integrationName\n    }\n};\n\nlet updateTpConfigParams = {\n  url: \"https://\"+siteName+\".integrations.\"+siteDomain+\"/integrations/update_tp_integ_conf\",\n  headers: {\n    \"Content-Type\": \"application/json\",\n    \"cache-control\": \"no-cache\"\n  },\n  body: {\n     site_name: siteName,\n     api_key: apiKey,\n     integration_name: integrationName\n     //append config_json with this during request\n  }\n};\n\nlet sendErrorMailParams = {\n  url: errorEmailEndpoint,\n  headers:{\n    Authorization: \"Basic \" + CE.b64(apiKey + \":\" + \"\")\n  },\n  query :{\n    content : \"Integration Error, Formula-Instance-ID : \",\n    subject : \"Fatal Error Occurred during \" + integrationName + \" Full Sync\",\n    to_address : errorEmailAddress,\n    api_key : apiKey\n  }\n};\n\n\n// let unlink =  {\n//         \"id\": \"unlink\",\n//         \"display\": \"Unlink Integration\",\n//         \"buttonLook\": \"MUTTED\",\n//         \"type\": \"POP_UP\",\n//         \"popUp\": {\n//             \"type\": \"SIMPLE\",\n//             \"title\": \"Do you really want to unlink the integration?\",\n//             \"submitButton\": \"Unlink\",\n//             \"cancelButton\": \"Dismiss\",\n//             \"description\": \"This will remove all the configuration details such as login authentication, configurations mapping etc. If you want to sync again, you will have to start the sync process from the beginning.\",\n//             \"apiEndPoint\": {\n//                 \"apiUrl\": cloudElementsUrl+\"/pipedrive/unlink\",\n//                 \"type\": \"GET\",\n//                 \"headers\": {\n//                     \"Elements-Formula-Instance-Id\": \"1673\"\n//                 },\n//                 \"input\": {\n//                     \"integrationName\": integrationName,\n//                     \"siteDomain\": siteDomain,\n//                     \"apiKey\" : apiKey,\n//                     \"siteName\": siteName\n//                 }\n//             }\n//         }\n//   }\n  \nlet params = {\n  input: {\n    cloudElementsUrl:cloudElementsUrl,\n    apiKey: apiKey,\n    siteName: siteName,\n    siteDomain:siteDomain,\n    integrationName: integrationName,\n    initialSync:initialSync,\n    errorEmailEndpoint: errorEmailEndpoint,\n    errorEmailAddress: errorEmailAddress,\n    syncNow: syncNow,\n    syncNowButtonClick:syncNowButtonClick,\n    resolveButtonAction:resolveButtonAction\n  }\n};\n\ndone({\n  params: params,\n  retrieveLatestSyncConfig: retrieveLatestSyncConfig,\n  getTpConfigParams: getTpConfigParams,\n  updateTpConfigParams: updateTpConfigParams,\n  sendErrorMailParams: sendErrorMailParams,\n  // unlink: unlink,\n  executionId: executionId\n});"}},{"id":240079,"onSuccess":["updateTpConfig3"],"onFailure":["sendFailedCard"],"name":"isDispatcherInstanceCreated","type":"filter","properties":{"body":"done(steps.createNewDispatcherInstance.response.code === 200);"}},{"id":240071,"onSuccess":["updateTpConfig_2"],"onFailure":["formulaInformation"],"name":"isDispatcherInstanceExist","type":"filter","properties":{"body":"// if(trigger.args[\"error\"] !== undefined && trigger.args[\"error\"] === \"Dispatcher_Instance_Not_Found\"){\n//   done(false);\n// }\n\n\n// done(true);\n\n\nif(steps.startExecution.response.code === 200){\n  done(true);\n}else{\n  if(steps.startExecution.response.code === 404){\n    done(false); //Instance not found, then create a new one\n  }\n  done(true);\n}"}},{"id":215857,"onSuccess":["isIgnoreIndex"],"onFailure":["sendLastSyncDetails"],"name":"isIgnoreAll","type":"filter","properties":{"body":"let ignoreAll = trigger.args.request.query['ignoreAll'] || null;\nlet ignoreIndex = trigger.args.request.query['ignoreIndex'] || null;\n\nlet ignoreAll_tpConfig = (steps.getTpConfig.response.body.third_party_configuration.config_json.cloudElements.formulas.formula_FullSyncRun.lastSyncDetails !== undefined) ? steps.getTpConfig.response.body.third_party_configuration.config_json.cloudElements.formulas.formula_FullSyncRun.lastSyncDetails.ignoreAll : \"false\";\n\nif(ignoreIndex !== null){\n  done(true);\n}\n\nif(ignoreAll === \"true\"){\n  done(true);\n}\n\n\nif(ignoreAll_tpConfig === \"true\"){\n  done(true);\n}\n\ndone(false);"}},{"id":215858,"onSuccess":["updateTpConfig6"],"onFailure":["updateTpConfig5"],"name":"isIgnoreIndex","type":"filter","properties":{"body":"let ignoreIndex = trigger.args.request.query['ignoreIndex'] || null;\n\nif(ignoreIndex !== null){\n  done(true);\n}\n\ndone(false);"}},{"id":215859,"onSuccess":["getTpConfig"],"onFailure":["getTpConfig_4"],"name":"isLastPollingSuccess","type":"filter","properties":{"body":"if(steps.getExecutionStatus.response.code !== 200){\n  done(false);\n}\n\nif(steps.getExecutionStatus.response.body.length === 0){\n  done(true);\n}\n\ndone(false);"}},{"id":215860,"onSuccess":["isSyncNow"],"onFailure":["executionStatus_params"],"name":"IsNoExecutionRunning","type":"filter","properties":{"body":"let flag = false;\n// let syncStatus = steps.lastSyncDetails.response.body.third_party_sync_detail.status;\n\nif(trigger.args.request.query['newDispatcherInstance'] !== undefined){\n  done(true); //New Dispatcher Instance Created, Hence Start new Sync Execution\n}\n\n\n\nlet syncStatus = steps.getTpConfig.response.body.third_party_configuration.config_json.cloudElements.formulas.formula_FullSyncRun.status || null;\n\nlet initialSync = null;\n// initialSync = steps.lastSyncDetails.response.body.third_party_sync_detail.context.initialSync;\n\ninitialSync = steps.InputParams.params.input.initialSync;\n\n// if((syncStatus === \"succeeded\" || syncStatus === \"failed\") && (initialSync === false)) {\n//   flag = true;\n// }\n\nif((syncStatus !== \"RUNNING\") && (initialSync === false)){\n  flag = true;\n}\n\ndone(flag);"}},{"id":215861,"onSuccess":["IsNoExecutionRunning"],"onFailure":["sendInitialProcessingCard"],"name":"isNotFromLayout","type":"filter","properties":{"body":"let flag = true;\n\nif(trigger.args.request.query['isNotFromLayout'] !== undefined){\n  flag = (trigger.args.request.query['isNotFromLayout'] === \"true\") ? false : true;\n}\n\nconsole.log(info);\n\ndone(flag);"}},{"id":215862,"onSuccess":["sendErrorCard"],"onFailure":["sendErrorCard"],"name":"isNotUpdatedAsFailed","type":"filter","properties":{"body":"if(steps.lastSyncDetails.response.body.third_party_sync_detail.id !== \"failed\"){\n  done(true);\n}\n\ndone(false);"}},{"id":215863,"onSuccess":["triggerSyncParams"],"onFailure":["GetThirdPartyConfigParams"],"name":"isSyncNow","type":"filter","properties":{"body":"if(trigger.args.request.query['newDispatcherInstance'] !== undefined){\n  done(true); //New Dispatcher Instance Created, Hence Start new Sync Execution\n}\n\nif((trigger.args.request.query[\"syncNow\"] === \"default\") && (steps.getTpConfig.response.body.third_party_configuration.config_json.cloudElements.formulas.formula_FullSyncRun.status === \"FAILED_ON_FIRST_RUN\")){\n  done(false);\n}\n\n\nif((trigger.args.request.query[\"syncNow\"] === \"syncNow\") && (steps.getTpConfig.response.body.third_party_configuration.config_json.cloudElements.formulas.formula_FullSyncRun.lastSyncDetails === undefined)){\n  done(true);\n}\n\ndone(false);"}},{"id":215864,"onSuccess":["sendProcessCard"],"onFailure":["sendFailedCard"],"name":"isSyncStarted","type":"filter","properties":{"body":"if(steps.startExecution.response.code !== 200){\n  done(false);\n}\n\ndone(true);"}},{"id":215865,"onSuccess":["isNotFromLayout"],"onFailure":[],"name":"lastSyncDetails","type":"httpRequest","properties":{"retry":"true","url":"${steps.InputParams.retrieveLatestSyncConfig.url}","method":"GET","query":"${steps.InputParams.retrieveLatestSyncConfig.query}","retryAttempts":"5","headers":"${steps.InputParams.retrieveLatestSyncConfig.auth}","retryDelay":"200"}},{"id":215866,"onSuccess":[],"onFailure":["sendErrorMail"],"name":"makeCard","type":"script","properties":{"body":"let cloudElementsUrl = steps.EnvProps.cloudElementsUrl;\n\nlet fullSyncRun_instance = steps.getTpConfig.response.body.third_party_configuration.config_json.cloudElements.formulas.formula_FullSyncRun.instance || null;\n\nlet csvFileId = (steps.uploadCSV.response.body.s3_link !== undefined) ? steps.uploadCSV.response.body.s3_link : null;\n\n\nlet syncStatus = steps.getLatestSyncDetails.response.body.third_party_sync_detail || null;\n\n\n\nlet errorCSV = steps.TpData.errorLog;\nlet successCSVLength = steps.getLatestSyncDetails.response.body.third_party_sync_detail.context.successRecord;\nlet errorCSVLength = errorCSV.length;\n\n// if(steps.getResult.response.code === 200){\n  // let result = steps.getResult.response.body;\n  // for(var j=0; j < result.length; j++){\n  //   if(result[j]['key'] === \"Success.errorCSV\"){\n  //     errorCSV = JSON.parse(result[j]['value']);\n  //   }\n    \n  //   if(result[j]['key'] === \"Success.successCSV\"){\n  //     successCSV = JSON.parse(result[j]['value']);\n  //   }\n    \n  //   if(result[j]['key'] === \"Success.successCSVLength\"){\n  //     successCSVLength = JSON.parse(result[j]['value']);\n  //   }\n    \n  //   if(result[j]['key'] === \"Success.errorCSVLength\"){\n  //     errorCSVLength = JSON.parse(result[j]['value']);\n  //   }\n    \n  // }\n  \n  let listContent = [];\n  let errors = errorCSV || null;\n  if(errors !== null){\n    for(let i=0;i<errors.length;++i){\n    \n      listContent.push({\n                \"button\": {\n                  \"display\": \"IGNORE\",\n                  \"id\": \"ignore1\",\n                  \"popUp\": {\n                      \"apiEndPoint\":{\n                    \"apiUrl\":cloudElementsUrl+\"/pipedrive/fullSyncRun\",\n                    \"headers\": {\n                      \"Elements-Formula-Instance-Id\": fullSyncRun_instance\n                    },\n                    \"input\": {\n                          \"apiKey\": steps.InputParams.params.input.apiKey,\n                          \"siteName\": steps.InputParams.params.input.siteName,\n                          \"integrationName\": steps.InputParams.params.input.integrationName,\n                          \"siteDomain\": steps.InputParams.params.input.siteDomain,\n                          },\n                    \"type\":\"GET\"\n                  },\n                    \"cancelButton\": \"Dismiss\",\n                    \"description\": \"Once this error is ignored, this record will not be synced to Pipedrive.\",\n                    \"submitButton\": \"Yes, go ahead\",\n                    \"title\": \"Are you sure you want to ignore?\",\n                    \"type\": \"SIMPLE\",\n                    \"usecase\": \"DANGER\"\n                  },\n                  \"type\": \"POP_UP\"\n                }\n               \n              });\n      listContent[i].content = errors[i];\n      listContent[i].button.popUp.apiEndPoint.input.ignoreIndex = i;\n      listContent[i].button.id = \"ignore\" + (i+1);\n      if(listContent.length>14){\n        break;\n      }\n    }\n  }\n  \n\n  // let currentTime = Math.round((new Date().getTime())/1000);\n  // let syncStartTime = syncStatus.context.syncData.syncEnd;\n  // if(syncStartTime===undefined){\n  //   syncStartTime=syncStatus.context.syncData.previousSyncEnd;\n  // }\n  // let time = Math.round((currentTime-syncStartTime)/60);\n  sync_result = {\n    \"icon\": \"/third_party/cn-xero.png\",\n    \"unlink\": steps.ConfigParams.unlink,\n    \"syncErrors\": [{\n      \"card\": {\n      \t\"id\":\"check3\",\n        \"type\": \"ACTION3\",\n        \"heading\": errorCSVLength +\" errors found  \",\n        \"listActionContent\":listContent,\n        \"buttons\":[\n          {\n            \"id\":\"download\",\n            \"display\" : \"Download CSV\",\n            \"icon\" : \"CLOUD_DOWNLOAD\",\n            \"fileId\" : csvFileId,\n            \"type\" : \"DOWNLOAD_FILE\"\n          },\n          {\n            \"id\":\"confirmation\",\n            \"display\" : \"IGNORE ALL\",\n            \"buttonLook\":\"EMPTY\",\n            \"icon\" : \"CLOSE\",\n            \"type\" : \"POP_UP\",\n            \"popUp\":{\n              \"type\":\"SIMPLE\",\n              \"title\":\"Are you sure you want to ignore the errors?\",\n              \"submitButton\":\"Yes, go ahead\",\n              \"cancelButton\":\"Dismiss\",\n              \"usecase\":\"DANGER\",\n              \"description\":\"Subscription data of this customer will not be synced with Pipedrive\",\n              \"apiEndPoint\":{\n                \"apiUrl\":cloudElementsUrl+\"/pipedrive/fullSyncRun\",\n                \"headers\": {\n                  \"Elements-Formula-Instance-Id\": fullSyncRun_instance\n                },\n                \"input\": {\n                      \"apiKey\": steps.InputParams.params.input.apiKey,\n                      \"siteName\": steps.InputParams.params.input.siteName,\n                      \"integrationName\": steps.InputParams.params.input.integrationName,\n                      \"siteDomain\": steps.InputParams.params.input.siteDomain,\n                      \"ignoreAll\": \"true\",\n                      \"totalRecordsSynced\":successCSVLength\n                      },\n                \"type\":\"GET\"\n                }\n              }\n            }\n          ]\n        },\n      \"id\" : \"sync_errors\",\n      \"isCardDone\":\"true\"\n      }],\n    \"overview\": [{\n      \"card\": {\n          \"type\": \"ACTION2\",\n          \"heading\": \"Last sync done 0 Minutes ago \",\n          \"id\": \"check2\",\n          \"subHeading\": successCSVLength + \"  records were synced with Pipedrive\",\n          \"buttons\" :[\n            {\n              \"id\":\"sync\",\n              \"display\" : \"Sync Now\",\n              \"icon\" : \"AUTO_RENEW\",\n              \"type\" : \"DIRECT_LINK\",\n              \"buttonLook\":\"EMPTY\",\n              \"request\":{\n                \"type\":\"ON_CLICK_GET_CARD\",\n              \"apiEndPoint\": {\n                  \"apiUrl\": cloudElementsUrl+\"/pipedrive/fullSyncRun\",\n                  \"type\": \"GET\",\n                  \"headers\": {\n                      \"Elements-Formula-Instance-Id\": info.formulaInstanceId\n                  },\n                  \"input\":{\n                      \"integrationName\": steps.InputParams.params.input.integrationName,\n                      \"siteDomain\": steps.InputParams.params.input.siteDomain,\n                      \"apiKey\": steps.InputParams.params.input.apiKey,\n                      \"siteName\": steps.InputParams.params.input.siteName,\n                      \"syncNowButtonClick\": \"syncNow\",\n                      \"syncNow\": \"syncNow\"\n                  }\n              }\n            }\n          }\n        ],\n      },\n      \"id\" : \"overview\",\n      \"isCardDone\":\"true\"\n    }]\n  };\n\n\n\nif(errorCSVLength > 0) {\n  sync_result.overview[0].card.message = {\n    \"message\": errorCSVLength + \" Records could not be synced to Pipedrive\",\n    \"button\": {\n      \"id\": \"errors\",\n      \"display\": \"See all errors\",\n      \"icon\": \"ARROW\",\n      \"type\": \"TAB_CHANGE\",\n      \n      }\n    }\n  sync_result.overview[0].card.message.icon = \"WARNING\";\n  sync_result.overview[0].card.message.messageLook = \"WARN\";\n}\n\nif(successCSVLength === 0 && errorCSVLength === 0){\n  sync_result.overview[0].card.heading= \"No data to sync!\";\n  sync_result.overview[0].card.subHeading = undefined;\n}\n\nif(sync_result === undefined){\n  sync_result = { \n    \"cards\": [{\n        \"id\": \"check2\",\n        \"card\": {\n            \"type\": \"ACTION\",\n            \"heading\": \"Error: Sync Failed\",\n            \"listContent\": [\n                \"Error: Sync Failed\"\n            ],\n            \"icon\": \"WARNING\"\n          \n        }\n    }]\n  };\n}\n\nif(errorCSVLength === 0){\n  sync_result.syncErrors[0].card.buttons = undefined;\n}\n\ndone({\n  statusCode: 200,\n  result: sync_result\n})"}},{"id":240077,"onSuccess":["sendProcessCard_newDispatcherInstance"],"onFailure":[],"name":"newInstanceCreatedInfo","type":"script","properties":{"body":"done({\n  id: steps.createFormulaInstance.response.body.id\n});"}},{"id":215867,"onSuccess":["getTpConfig"],"onFailure":["getExecutionStatus"],"name":"notPolling","type":"filter","properties":{"body":"let flag = true;\n\nif(trigger.args.request.query['newDispatcherInstance'] !== undefined){\n  done(true); //New Dispatcher Instance Created, Hence Start new Sync Execution\n}\n\nflag = (trigger.args.request.query['executionId'] !== undefined) ? false: true;\n\ndone(flag);\n"}},{"id":215868,"onSuccess":["updateSyncStatus_Running"],"onFailure":[],"name":"runningSyncParams","type":"script","properties":{"body":"let payload = {\n  error : false,\n  done: false,\n  url : \"https://\"+steps.InputParams.params.input.siteName+\".\"+steps.InputParams.params.input.siteDomain+\"/api/v2/third_party_sync_details/\" +steps.createNewSyncDetails.response.body.third_party_sync_detail.id,\n  auth: {\n    Authorization: \"Basic \" + CE.b64(steps.InputParams.params.input.apiKey + \":\" + \"\")\n  },\n  body: steps.createNewSyncDetails.response.body.third_party_sync_detail,\n};\n\npayload.body.status = \"running\";\n\ndone({\n  payload: payload\n});"}},{"id":215869,"onSuccess":[],"onFailure":[],"name":"sendErrorCard","type":"script","properties":{"body":"let cloudElementsUrl = steps.EnvProps.cloudElementsUrl;\n\nlet fullSyncRun_instance = steps.getTpConfig.response.body.third_party_configuration.config_json.cloudElements.formulas.formula_FullSyncRun.instance || null;\n\nlet card = {\n    \"icon\": \"/third_party/cn-xero.png\",\n    \"unlink\": steps.ConfigParams.unlink,\n    \"syncErrors\": [{\n        \"card\": {\n            \"type\": \"ACTION\",\n            \"heading\": \"Error: Failed to Start Sync\",\n            \"icon\": \"WARNING\",\n            \"listActionContent\":[]\n        },\n         \"id\" : \"sync_errors\",\n      \"isCardDone\":\"true\"\n    }],\n    \"overview\": [{\n        \"card\": {\n            \"type\": \"ACTION2\",\n            \"id\": \"check2\",\n            \"icon\" : \"ERROR\"   ,\n            \"heading\": \"Integration Error \",\n            \"subHeading\": \"Error : Failed to Start Sync\",\n                 \"buttons\" :[\n              {\n                \"id\":\"sync\",\n                \"display\" : \"Sync now\",\n                \"icon\" : \"AUTO_RENEW\",\n                \"type\" : \"DIRECT_LINK\",\n                \"buttonLook\":\"EMPTY\",\n                \"request\":{\n                  \"type\":\"ON_CLICK_GET_CARD\",\n                  \"apiEndPoint\": {\n                \"apiUrl\": cloudElementsUrl+\"/pipedrive/fullSyncRun\",\n                \"type\": \"GET\",\n                \"headers\": {\n                    \"Elements-Formula-Instance-Id\":  info.formulaInstanceId\n                },\n                \"input\":{\n                    \"type\": steps.InputParams.params.input.type,\n                    \"siteDomain\": steps.InputParams.params.input.siteDomain,\n                    \"api-key\": steps.InputParams.params.input.apiKey,\n                    \"site-name\": steps.InputParams.params.input.siteName,\n                    \"syncAgain\": \"true\",\n                    \"syncNow\": \"syncNow\"\n                }\n            }\n                  }\n                }\n              ]\n           \n        },\n         \"id\": \"overview\",\n        \"isCardDone\": \"true\"\n    }]\n};\n\nif(steps.isLastPollingSuccess !== undefined){\n  if(steps.isLastPollingSuccess.continue === false)\n  card.overview[0].card.subHeading = \"Something went wrong.Please try again\";\n}\n\nif((steps.uploadCSV !== undefined)){\n  if(steps.uploadCSV.response.code !== 200)\n  card.overview[0].card.subHeading = \"Error : Failed to Upload CSV\";\n}\n\ndone({\n  statusCode: 200,\n  result: card\n});\n\n"}},{"id":226043,"onSuccess":[],"onFailure":[],"name":"sendErrorCard_4","type":"script","properties":{"body":"let configJson;\nlet cloudElementsUrl = steps.EnvProps.cloudElementsUrl;\n\nif(steps.hasError !== undefined){\n  configJson = steps.getTpConfig.response.body.third_party_configuration.config_json;\n}else{\n  configJson = steps.getTpConfig_4.response.body.third_party_configuration.config_json;\n}\n\nlet fullSyncRun_instance = configJson.cloudElements.formulas.formula_FullSyncRun.instance || null;\n\nlet card = {\n    \"icon\": \"/third_party/cn-xero.png\",\n    \"unlink\": {\n  \"id\": \"unlink\",\n  \"display\": \"Unlink Integration\",\n  \"buttonLook\": \"MUTTED\",\n  \"type\": \"POP_UP\",\n  \"popUp\": {\n      \"type\": \"SIMPLE\",\n      \"title\": \"Do you really want to unlink the integration?\",\n      \"submitButton\": \"Unlink\",\n      \"cancelButton\": \"Dismiss\",\n      \"description\": \"This will remove all the configuration details such as login authentication, configurations mapping etc. If you want to sync again, you will have to start the sync process from the beginning.\",\n      \"apiEndPoint\": {\n          \"apiUrl\": steps.EnvProps.cloudElementsUrl+\"/pipedrive/unlink\",\n          \"type\": \"GET\",\n          \"headers\": {\n              \"Elements-Formula-Instance-Id\": configJson.cloudElements.formulas.formula_unlinkIntegration.instance || null\n          },\n          \"input\": {\n              \"integrationName\": steps.InputParams.params.input.integrationName,\n              \"siteDomain\": steps.InputParams.params.input.siteDomain,\n              \"apiKey\" : steps.InputParams.params.input.apiKey,\n              \"siteName\": steps.InputParams.params.input.siteName\n          }\n      }\n  }\n},\n    \"syncErrors\": [{\n        \"card\": {\n            \"type\": \"ACTION\",\n            \"heading\": \"Error: Failed to Start Sync\",\n            \"icon\": \"WARNING\",\n            \"listActionContent\":[]\n        },\n         \"id\" : \"sync_errors\",\n      \"isCardDone\":\"true\"\n    }],\n    \"overview\": [{\n        \"card\": {\n            \"type\": \"ACTION2\",\n            \"id\": \"check2\",\n            \"icon\" : \"ERROR\"   ,\n            \"heading\": \"Integration Error \",\n            \"subHeading\": \"Something went wrong.Please try again\",\n                 \"buttons\" :[\n              {\n                \"id\":\"sync\",\n                \"display\" : \"Sync now\",\n                \"icon\" : \"AUTO_RENEW\",\n                \"type\" : \"DIRECT_LINK\",\n                \"buttonLook\":\"EMPTY\",\n                \"request\":{\n                  \"type\":\"ON_CLICK_GET_CARD\",\n                  \"apiEndPoint\": {\n                \"apiUrl\": cloudElementsUrl+\"/pipedrive/fullSyncRun\",\n                \"type\": \"GET\",\n                \"headers\": {\n                    \"Elements-Formula-Instance-Id\":  info.formulaInstanceId\n                },\n                \"input\":{\n                    \"type\": steps.InputParams.params.input.type,\n                    \"siteDomain\": steps.InputParams.params.input.siteDomain,\n                    \"api-key\": steps.InputParams.params.input.apiKey,\n                    \"site-name\": steps.InputParams.params.input.siteName,\n                    \"syncAgain\": \"true\",\n                    \"syncNow\": \"syncNow\"\n                }\n            }\n                  }\n                }\n              ]\n           \n        },\n         \"id\": \"overview\",\n        \"isCardDone\": \"true\"\n    }]\n};\n\n\n\ndone({\n  statusCode: 200,\n  result: card\n});\n\n"}},{"id":215870,"onSuccess":["sendErrorCard"],"onFailure":["sendErrorCard"],"name":"sendErrorMail","type":"httpRequest","properties":{"retry":"true","url":"${steps.InputParams.sendErrorMailParams.url}","method":"POST","query":"${steps.InputParams.sendErrorMailParams.query}","retryAttempts":"5","headers":"${steps.InputParams.sendErrorMailParams.headers}","retryDelay":"200"}},{"id":226004,"onSuccess":["sendErrorCard_4"],"onFailure":[],"name":"sendErrorMail_4","type":"httpRequest","properties":{"method":"POST","url":"${steps.InputParams.sendErrorMailParams.url}","query":"${steps.InputParams.sendErrorMailParams.query}","headers":"${steps.InputParams.sendErrorMailParams.headers}"}},{"id":215871,"onSuccess":[],"onFailure":[],"name":"sendFailedCard","type":"script","properties":{"body":"let cloudElementsUrl = steps.EnvProps.cloudElementsUrl;\n\nlet fullSyncRun_instance = steps.getTpConfig.response.body.third_party_configuration.config_json.cloudElements.formulas.formula_FullSyncRun.instance || null;\n\n\n// let card = {\n//   \"cards\": [{\n//       \"id\": \"check2\",\n//       \"card\": {\n//           \"type\": \"ACTION\",\n//           \"heading\": \"Sync Failed\",\n//           \"listContent\": [\n//               \"An error occurred during sync. Please try again.\"\n//           ],\n//           \"icon\": \"WARNING\"\n        \n//       }\n//   }]\n// };\n\n// card.retry = {\n//         \"id\": \"retry\",\n//         \"display\": \"Retry Initial Sync\",\n//         \"icon\": \"ARROW\",\n//         \"buttonLook\":\"FILLED\",\n//         \"type\": \"DIRECT_LINK\",\n//         \"request\": {\n//             \"type\": \"ON_CLICK_DEFAULT_ACTION\",\n//             \"apiEndPoint\": {\n//                 \"apiUrl\": cloudElementsUrl+\"/pipedrive/fullSyncRun\",\n//                 \"type\": \"GET\",\n//                 \"headers\": {\n//                     \"Elements-Formula-Instance-Id\": fullSyncRun_instance\n//                 },\n//                 \"input\":{\n//                     \"integrationName\": steps.InputParams.params.input.integrationName,\n//                     \"siteDomain\": steps.InputParams.params.input.siteDomain,\n//                     \"retry\": \"true\",\n//                     \"action\": \"click\",\n//                     \"syncNow\": \"syncNow\"\n//                 }\n//             }\n//         }\n//     };\n\nlet card = {\n  \"icon\": \"/third_party/cn-xero.png\",\n  \"unlink\": steps.ConfigParams.unlink,\n  \"syncErrors\": [{\n      \"card\": {\n          \"type\": \"ACTION\",\n          \"heading\": \" \",\n          \"icon\": \"WARNING\",\n          \"listActionContent\":[]\n      },\n       \"id\" : \"sync_errors\",\n    \"isCardDone\":\"true\"\n  }],\n  \"overview\": [{\n      \"card\": {\n          \"type\": \"ACTION2\",\n          \"id\": \"check2\",\n          \"icon\" : \"ERROR\"   ,\n          \"heading\": \"Integration Error\",\n          \"subHeading\": \"Failed to start the sync\",\n               \"buttons\" :[\n            {\n              \"id\":\"sync\",\n              \"display\" : \"Retry\",\n              \"icon\" : \"AUTO_RENEW\",\n              \"type\" : \"DIRECT_LINK\",\n              \"buttonLook\":\"EMPTY\",\n              \"request\":{\n                \"type\":\"ON_CLICK_GET_CARD\",\n                \"apiEndPoint\": {\n              \"apiUrl\": cloudElementsUrl+\"/pipedrive/fullSyncRun\",\n              \"type\": \"GET\",\n              \"headers\": {\n                  \"Elements-Formula-Instance-Id\":  info.formulaInstanceId\n              },\n              \"input\":{\n                  \"integrationName\": steps.InputParams.params.input.integrationName,\n                  \"siteDomain\": steps.InputParams.params.input.siteDomain,\n                  \"apiKey\": steps.InputParams.params.input.apiKey,\n                  \"siteName\": steps.InputParams.params.input.siteName,\n                  \"syncNow\": \"syncNow\",\n                  \"isFromLayout\" : \"true\",\n                  \"error\": \"Dispatcher_Instance_Not_Found\"\n              }\n          }\n                }\n              }\n            ]\n      },\n      \"id\": \"overview\",\n      \"isCardDone\": \"true\"\n  }]\n};\n\ndone({\n  statusCode: 200,\n  result: card\n});\n"}},{"id":215872,"onSuccess":[],"onFailure":[],"name":"sendInitialProcessingCard","type":"script","properties":{"body":"let cloudElementsUrl = steps.EnvProps.cloudElementsUrl;\n\nlet formula = steps.getTpConfig.response.body.third_party_configuration.config_json.cloudElements.formulas;\n\nlet fullSyncInstance = steps.getTpConfig.response.body.third_party_configuration.config_json.cloudElements.formulas.formula_FullSyncRun.instance || null;\n\nlet syncStatus = steps.lastSyncDetails.response.body.third_party_sync_detail.status;\n\n// {\n//       \"card\": {\n//         \"type\" : \"ACTION3\",\n//         \"icon\": \"INFO\",\n//         \"heading\" : \"Sync In Progress..\",\n//         \"listActionContent\":[],//end of list content\n//           \"buttons\":[]\n//         },\n//         \"id\" : \"sync_errors\",\n//         \"isCardDone\":\"false\"\n//     }\n\nlet card = {\n    \"icon\": \"/third_party/cn-xero.png\",\n    \"syncErrors\":[{\n      \"card\": {\n        \"type\" : \"ACTION3\",\n        \"icon\": \"INFO\",\n        \"heading\" : \"No errors found\",\n        \"listActionContent\":[],//end of list content\n          \"buttons\":[]\n        },\n        \"id\" : \"sync_errors\",\n        \"isCardDone\":\"false\"\n    }],\n    \"overview\": [{\n        \"card\": {\n            \"type\" : \"PROCESSING\",\n            \"processingText\": \" Syncing all customers and their subscriptions\",\n            \"request\" : {\n               \"type\":\"DOC_READY_GET_CARD\",\n               \"apiEndPoint\":{\n                  \"apiUrl\":cloudElementsUrl+\"/pipedrive/fullSyncRun\",\n                        \"type\": \"GET\",\n                        \"headers\": {\n                            \"Elements-Formula-Instance-Id\": fullSyncInstance\n                        },\n                        \"input\":{\n                            \"apiKey\": steps.InputParams.params.input.apiKey,\n                            \"siteName\": steps.InputParams.params.input.siteName,\n                            \"integrationName\": steps.InputParams.params.input.integrationName,\n                            \"siteDomain\": steps.InputParams.params.input.siteDomain,\n                            \"executionId\": info.formulaExecutionId\n                        }\n               }\n            }\n         },\n        \"id\":\"overview\",\n        \"isCardDone\":\"false\"\n    }],\n    \"unlink\": steps.ConfigParams.unlink\n};\n\nif(steps.InputParams.params.input.syncNow !== null){\n  card.overview[0].card.request.apiEndPoint.input.syncNow = \"syncNow\";\n}\n\nif(steps.InputParams.params.input.syncNowButtonClick !== undefined){\n  card.overview[0].card.processingText = \"Syncing All Customers....\";\n  card.overview[0].card.request.apiEndPoint.input.syncNowButtonClick = \"syncNow\";\n}\n\nelse if((steps.getTpConfig.response.body.third_party_configuration.config_json.cloudElements.formulas.formula_FullSyncRun.status === \"SUCCESS\") && (steps.getTpConfig.response.body.third_party_configuration.config_json.cloudElements.formulas.formula_FullSyncRun.lastSyncDetails !== undefined) && (steps.InputParams.params.input.syncNow === null)){\n  card.overview[0].card.processingText=\"Fetching Last Sync Details...\";\n}\n\nelse{\n  card.overview[0].card.processingText = \"Syncing All Customers...\";\n}\n\n\n\nif(steps.InputParams.params.input.resolveButtonAction === true){\n  \n  done({\n    statusCode: 200\n  });\n  \n}\n\n \ndone({\n  statusCode: 200,\n  result: card\n});"}},{"id":215873,"onSuccess":[],"onFailure":[],"name":"sendLastSyncDetails","type":"script","properties":{"body":"let cloudElementsUrl = steps.EnvProps.cloudElementsUrl;\n\nlet fullSyncRun_instance = steps.getTpConfig.response.body.third_party_configuration.config_json.cloudElements.formulas.formula_FullSyncRun.instance || null;\n\nlet lastSyncDetails = steps.getTpConfig.response.body.third_party_configuration.config_json.cloudElements.formulas.formula_FullSyncRun.lastSyncDetails || null;\n\nlet fullSyncStatus = steps.getTpConfig.response.body.third_party_configuration.config_json.cloudElements.formulas.formula_FullSyncRun.status || null;\n\nlet sync_result = {\n  \"icon\": \"/third_party/cn-xero.png\",\n  \"unlink\": steps.ConfigParams.unlink,\n  \"syncErrors\": [{\n      \"card\": {\n          \"type\": \"ACTION\",\n          \"heading\": \" \",\n          \"icon\": \"WARNING\",\n          \"listActionContent\":[]\n      },\n       \"id\" : \"sync_errors\",\n    \"isCardDone\":\"true\"\n  }],\n  \"overview\": [{\n      \"card\": {\n          \"type\": \"ACTION2\",\n          \"id\": \"check2\",\n          \"icon\" : \"ERROR\"   ,\n          \"heading\": \"Integration Error \",\n          \"subHeading\": \"No Previous Sync Data Available\",\n               \"buttons\" :[\n            {\n              \"id\":\"sync\",\n              \"display\" : \"Sync Now\",\n              \"icon\" : \"AUTO_RENEW\",\n              \"type\" : \"DIRECT_LINK\",\n              \"buttonLook\":\"EMPTY\",\n              \"request\":{\n                \"type\":\"ON_CLICK_GET_CARD\",\n                \"apiEndPoint\": {\n              \"apiUrl\": cloudElementsUrl+\"/pipedrive/fullSyncRun\",\n              \"type\": \"GET\",\n              \"headers\": {\n                  \"Elements-Formula-Instance-Id\":  info.formulaInstanceId\n              },\n              \"input\":{\n                  \"integrationName\": steps.InputParams.params.input.integrationName,\n                  \"siteDomain\": steps.InputParams.params.input.siteDomain,\n                  \"apiKey\": steps.InputParams.params.input.apiKey,\n                  \"siteName\": steps.InputParams.params.input.siteName,\n                  \"syncNow\": \"syncNow\",\n                  \"isFromLayout\" : \"true\"\n              }\n          }\n                }\n              }\n            ]\n      },\n      \"id\": \"overview\",\n      \"isCardDone\": \"true\"\n  }]\n};\n  \n\nif((lastSyncDetails !== null) && (fullSyncStatus === \"SUCCESS\")){\n  // let errorCSVLength = steps.getTpConfig.response.body.third_party_configuration.config_json.cloudElements.formulas.formula_FullSyncRun.lastSyncDetails.errorCSVLength || 0;\n  \n  \n  let syncStatus = steps.lastSyncDetails.response.body.third_party_sync_detail;\n  \n  let successCSVLength = syncStatus.context.successRecord || 0;\n\n  let listContent = [];\n  \n  let errorCSV = steps.ErrorList.list || null;\n  let ignoreIndexArray = steps.getTpConfig.response.body.third_party_configuration.config_json.cloudElements.formulas.formula_FullSyncRun.lastSyncDetails.ignoreIndex || [];\n\n  let errors = errorCSV || null;\n  \n  if(errors !== null){\n    for(let i=0; i< errors.length ; ++i){\n      listContent.push({\n                \"button\": {\n                  \"display\": \"IGNORE\",\n                  \"id\": \"ignore1\",\n                  \"popUp\": {\n                      \"apiEndPoint\":{\n                    \"apiUrl\":cloudElementsUrl+\"/pipedrive/fullSyncRun\",\n                    \"headers\": {\n                      \"Elements-Formula-Instance-Id\": fullSyncRun_instance\n                    },\n                    \"input\": {\n                          \"apiKey\": steps.InputParams.params.input.apiKey,\n                          \"siteName\": steps.InputParams.params.input.siteName,\n                          \"integrationName\": steps.InputParams.params.input.integrationName,\n                          \"siteDomain\": steps.InputParams.params.input.siteDomain,\n                          },\n                    \"type\":\"GET\"\n                  },\n                    \"cancelButton\": \"Dismiss\",\n                    \"description\": \"Once this error is ignored, this record will not be synced to Pipedrive.\",\n                    \"submitButton\": \"Yes, go ahead\",\n                    \"title\": \"Are you sure you want to ignore?\",\n                    \"type\": \"SIMPLE\",\n                    \"usecase\": \"DANGER\"\n                  },\n                  \"type\": \"POP_UP\"\n                }\n               \n              });\n      listContent[i].content = errors[i].third_party_entity_mapping.error_message;\n      listContent[i].button.popUp.apiEndPoint.input.ignoreIndex = i;\n      listContent[i].button.id = \"ignore\" + (i+1);\n      if(listContent.length > 14){\n        break;\n      }\n    }\n  }\n  \n  ignoreIndexArray.sort((a, b) => b-a); //for descending sort\n  \n  if(ignoreIndexArray !== undefined){\n    for(var i=0; i < ignoreIndexArray.length; i++){\n      listContent.splice(ignoreIndexArray[i], 1);\n    }\n  }\n  \n  let currentTime = Math.round((new Date().getTime())/1000);\n  let syncStartTime = syncStatus.context.syncData.syncEnd;\n  if(syncStartTime === undefined){\n    syncStartTime=syncStatus.context.syncData.previousSyncEnd;\n  }\n  \n  let time = Math.round((currentTime-syncStartTime)/60);\n  sync_result = {\n    \"icon\": \"/third_party/cn-xero.png\",\n    \"unlink\": steps.ConfigParams.unlink,\n    \"overview\": [{\n      \"card\": {\n          \"type\": \"ACTION2\",\n          \"heading\": \"Last sync done \" + time + \" Minutes ago \",\n          \"id\": \"check2\",\n          \"subHeading\": successCSVLength + \"  records were synced with Pipedrive\",\n          \"buttons\" :[\n            {\n              \"id\":\"sync\",\n              \"display\" : \"Sync Now\",\n              \"icon\" : \"AUTO_RENEW\",\n              \"type\" : \"DIRECT_LINK\",\n              \"buttonLook\":\"EMPTY\",\n              \"request\":{\n                \"type\":\"ON_CLICK_GET_CARD\",\n              \"apiEndPoint\": {\n                  \"apiUrl\": cloudElementsUrl+\"/pipedrive/fullSyncRun\",\n                  \"type\": \"GET\",\n                  \"headers\": {\n                      \"Elements-Formula-Instance-Id\": fullSyncRun_instance\n                  },\n                  \"input\":{\n                      \"integrationName\": steps.InputParams.params.input.integrationName,\n                      \"siteDomain\": steps.InputParams.params.input.siteDomain,\n                      \"apiKey\": steps.InputParams.params.input.apiKey,\n                      \"siteName\": steps.InputParams.params.input.siteName,\n                      \"syncNowButtonClick\": \"syncNow\",\n                      \"syncNow\": \"syncNow\",\n                       \"isFromLayout\" : \"true\"\n                  }\n              }\n            }\n          }\n        ],\n      },\n      \"id\" : \"overview\",\n      \"isCardDone\":\"true\"\n    }]\n  };\n  if(time > 60){\n    let hours = Math.round(time/60);\n    let minutes = time % 60;\n    if(hours < 24){\n    sync_result.overview[0].card.heading = \"Last sync done \"+hours+\" Hours and \"+minutes+\" Minutes ago\";\n    }else{\n      let days = Math.round(time/(24*60));\n      hours = Math.round((time % (24*60))/60);\n      minutes = time % 60;\n          sync_result.overview[0].card.heading = \"Last sync done \"+days+\" days \"+(hours !== 0 ? hours + \" Hours\":\"\" )+\" and \"+minutes+\" Minutes ago\";\n      \n    }\n  }\n\n  if(listContent.length > 0) {\n    sync_result.overview[0].card.message = {\n      \"message\": listContent.length + \" Records could not be synced to Pipedrive\",\n      \"button\": {\n        \"id\": \"errors\",\n        \"display\": \"See all errors\",\n        \"icon\": \"ARROW\",\n        \"type\": \"TAB_CHANGE\",\n        \n        }\n      }\n    sync_result.overview[0].card.message.icon = \"WARNING\";\n    sync_result.overview[0].card.message.messageLook = \"WARN\";\n  }\n  \n  if(listContent.length === 0){\n    sync_result.syncErrors = [\n      {\n        \"card\": {\n              \"type\" : \"ACTION\",\n              \"heading\" : \"No Errors Found\",\n              \"icon\" : \"SUCCESS\"\n           },\n        \"id\": \"sync_errors\",\n        \"isCardDone\": \"false\"\n      }\n    ]\n  }else{\n    sync_result.syncErrors = [{\n      \"card\": {\n      \t\"id\":\"check3\",\n        \"type\": \"ACTION3\",\n        \"heading\": errors.length +\" errors found  \",\n        \"listActionContent\":listContent,\n        \"buttons\":[\n          {\n            \"id\":\"download\",\n            \"display\" : \"Download CSV\",\n            \"icon\" : \"CLOUD_DOWNLOAD\",\n            \"fileId\" : (steps.getTpConfig.response.body.third_party_configuration.config_json.cloudElements.formulas.formula_FullSyncRun.csvFileId !== undefined) ? steps.getTpConfig.response.body.third_party_configuration.config_json.cloudElements.formulas.formula_FullSyncRun.csvFileId : null,\n            \"type\" : \"DOWNLOAD_FILE\"\n          },\n          {\n            \"id\":\"confirmation\",\n            \"display\" : \"IGNORE ALL\",\n            \"buttonLook\":\"EMPTY\",\n            \"icon\" : \"CLOSE\",\n            \"type\" : \"POP_UP\",\n            \"popUp\":{\n              \"type\":\"SIMPLE\",\n              \"title\":\"Are you sure you want to ignore the errors?\",\n              \"submitButton\":\"Yes, go ahead\",\n              \"cancelButton\":\"Dismiss\",\n              \"usecase\":\"DANGER\",\n              \"description\":\"Subscription data of this customer will not be synced with Pipedrive\",\n              \"apiEndPoint\":{\n                \"apiUrl\": cloudElementsUrl+\"/pipedrive/fullSyncRun\",\n                \"headers\": {\n                  \"Elements-Formula-Instance-Id\": fullSyncRun_instance\n                },\n                \"input\": {\n                      \"apiKey\": steps.InputParams.params.input.apiKey,\n                      \"siteName\": steps.InputParams.params.input.siteName,\n                      \"integrationName\": steps.InputParams.params.input.integrationName,\n                      \"siteDomain\": steps.InputParams.params.input.siteDomain,\n                      \"ignoreAll\": \"true\",\n                      \"totalRecordsSynced\":successCSVLength\n                      },\n                \"type\":\"GET\"\n                }\n              }\n            }\n          ]\n        },\n      \"id\" : \"sync_errors\",\n      \"isCardDone\":\"true\"\n      }];\n    \n    if(errors.length === 0){\n      sync_result.syncErrors[0].card.buttons = undefined;\n    }\n  }\n}\n\n\ndone({\n  statusCode: 200,\n  result: sync_result\n})"}},{"id":215874,"onSuccess":[],"onFailure":[],"name":"sendLastSyncDetails_IgnoreAll","type":"script","properties":{"body":"let cloudElementsUrl = steps.EnvProps.cloudElementsUrl;\n\nlet fullSyncRun_instance = steps.getTpConfig.response.body.third_party_configuration.config_json.cloudElements.formulas.formula_FullSyncRun.instance || null;\n\nlet syncStatus = steps.lastSyncDetails.response.body.third_party_sync_detail;\n\nlet lastSyncDetails = steps.getTpConfig.response.body.third_party_configuration.config_json.cloudElements.formulas.formula_FullSyncRun.lastSyncDetails || null;\n\nlet configuration = steps.getTpConfig.response.body.third_party_configuration.config_json;\n\n// let formula = steps.getTpConfig.response.body.third_party_configuration.config_json.cloudElements.formulas;\n\nlet totalRecordsSynced = configuration.cloudElements.formulas.formula_FullSyncRun.lastSyncDetails.successCSVLength || 0;\n\n\nlet cur =  Math.round((new Date().getTime())/1000);\nlet syncStart = syncStatus.context.syncData.syncEnd;\nlet time = Math.round((cur-syncStart)/60);\n\nlet card;\n\nif(lastSyncDetails === null){\n  card = {\n    \"icon\": \"/third_party/cn-xero.png\",\n    \"unlink\": steps.ConfigParams.unlink,\n    \"syncErrors\": [{\n        \"card\": {\n            \"type\": \"ACTION\",\n            \"heading\": \"Error : Failed to Start Sync\",\n            \"icon\": \"WARNING\",\n            \"listActionContent\":[]\n        },\n         \"id\" : \"sync_errors\",\n      \"isCardDone\":\"true\"\n    }],\n    \"overview\": [{\n        \"card\": {\n            \"type\": \"ACTION2\",\n            \"id\": \"check2\",\n            \"icon\" : \"ERROR\"   ,\n            \"heading\": \"Integration Error \",\n            \"subHeading\": \"Error : Failed to Start Sync\",\n                 \"buttons\" :[\n              {\n                \"id\":\"sync\",\n                \"display\" : \"Sync Now\",\n                \"icon\" : \"AUTO_RENEW\",\n                \"type\" : \"DIRECT_LINK\",\n                \"buttonLook\":\"EMPTY\",\n                \"request\":{\n                  \"type\":\"ON_CLICK_GET_CARD\",\n                  \"apiEndPoint\": {\n                \"apiUrl\": cloudElementsUrl+\"/pipedrive/fullSyncRun\",\n                \"type\": \"GET\",\n                \"headers\": {\n                    \"Elements-Formula-Instance-Id\":  info.formulaInstanceId\n                },\n                \"input\":{\n                    \"integrationName\": steps.InputParams.params.input.integrationName,\n                    \"siteDomain\": steps.InputParams.params.input.siteDomain,\n                    \"apiKey\": steps.InputParams.params.input.apiKey,\n                    \"siteName\": steps.InputParams.params.input.siteName,\n                    \"syncNow\": \"syncNow\"\n                }\n            }\n                  }\n                }\n              ]\n        },\n        \"id\": \"overview\",\n        \"isCardDone\": \"true\"\n    }]\n  };\n  \n  done({\n    statusCode: 200,\n    result: card\n  });\n  \n}\n\n\ncard = {\n    \"icon\": \"/third_party/cn-xero.png\",\n    \"overview\": [\n      {\n        \"card\": {\n              \"type\" : \"ACTION2\",\n              \"heading\" : \"Last sync done \"+ time + \" Minutes ago \",\n          \"subHeading\": syncStatus.context.syncData.success +\" records were synced with Pipedrive\",\n              \"icon\" : \"WARNING\",\n            \"buttons\": [\n            {\n              \"buttonLook\": \"EMPTY\",\n              \"display\": \"Sync Now\",\n              \"icon\": \"AUTO_RENEW\",\n              \"id\": \"sync\",\n              \"request\": {\n                   \"apiEndPoint\": {\n                  \"apiUrl\": cloudElementsUrl+\"/pipedrive/fullSyncRun\",\n                  \"type\": \"GET\",\n                  \"headers\": {\n                      \"Elements-Formula-Instance-Id\": info.formulaInstanceId\n                  },\n                  \"input\":{\n                      \"integrationName\": steps.InputParams.params.input.integrationName,\n                      \"siteDomain\": steps.InputParams.params.input.siteDomain,\n                      \"apiKey\": steps.InputParams.params.input.apiKey,\n                      \"siteName\": steps.InputParams.params.input.siteName,\n                      \"syncNowButtonClick\": \"syncNow\",\n                      \"syncNow\": \"syncNow\"\n                  }\n              },\n                \"type\": \"ON_CLICK_GET_CARD\"\n              },\n              \"type\": \"DIRECT_LINK\"\n            }\n          ]\n           },\n        \"id\": \"overview\",\n        \"isCardDone\": \"true\"\n      }\n    ],\n    \"syncErrors\": [\n      {\n        \"card\": {\n              \"type\" : \"ACTION\",\n              \"heading\" : \"You've ignored errors found during Sync.\",\n              \"icon\" : \"WARNING\"\n           },\n        \"id\": \"sync_errors\",\n        \"isCardDone\": \"false\"\n      }\n    ]\n  };\n  \nif(time > 60){\n  let hours = Math.round(time/60);\n  let minutes = time % 60;\n  card.overview[0].card.heading = \"Last sync done \"+hours+\" Hours and \"+minutes+\" Minutes ago\";\n    if(hours < 24){\n    sync_result.overview[0].card.heading = \"Last sync done \"+hours+\" Hours and \"+minutes+\" Minutes ago\";\n    }else{\n      let days = Math.round(time/(24*60));\n      hours = Math.round((time % (24*60))/60);\n      minutes = time % 60;\n          sync_result.overview[0].card.heading = \"Last sync done \"+days+\" days \"+(hours !== 0 ? hours + \" Hours\":\"\" )+\" and \"+minutes+\" Minutes ago\";\n      \n    }\n}\n\ndone({\n  statusCode: 200,\n  result: card\n})"}},{"id":215875,"onSuccess":[],"onFailure":[],"name":"sendLastSyncDetails_IgnoreIndex","type":"script","properties":{"body":"let cloudElementsUrl = steps.EnvProps.cloudElementsUrl;\n\nlet fullSyncRun_instance = steps.getTpConfig_2.response.body.third_party_configuration.config_json.cloudElements.formulas.formula_FullSyncRun.instance || null;\n\nlet lastSyncDetails = steps.getTpConfig_2.response.body.third_party_configuration.config_json.cloudElements.formulas.formula_FullSyncRun.lastSyncDetails || null;\n\nlet fullSyncStatus = steps.getTpConfig_2.response.body.third_party_configuration.config_json.cloudElements.formulas.formula_FullSyncRun.status || null;\n\nlet syncStatus = steps.lastSyncDetails.response.body.third_party_sync_detail || null;\n\nlet ignoreIndexArray = steps.getTpConfig_2.response.body.third_party_configuration.config_json.cloudElements.formulas.formula_FullSyncRun.lastSyncDetails.ignoreIndex || [];\n\nlet errorList = steps.ErrorList.list || null;\n\nlet listContent = [];\n\nif(errorList !== null){\n  for(var j=0; j < errorList.length ; j++){\n    listContent.push({\n              \"button\": {\n                \"display\": \"IGNORE\",\n                \"popUp\": {\n                    \"apiEndPoint\":{\n                  \"apiUrl\":cloudElementsUrl+\"/pipedrive/fullSyncRun\",\n                  \"headers\": {\n                    \"Elements-Formula-Instance-Id\": fullSyncRun_instance\n                  },\n                  \"input\": {\n                        \"apiKey\": steps.InputParams.params.input.apiKey,\n                        \"siteName\": steps.InputParams.params.input.siteName,\n                        \"integrationName\": steps.InputParams.params.input.integrationName,\n                        \"siteDomain\": steps.InputParams.params.input.siteDomain,\n                        },\n                  \"type\":\"GET\"\n                },\n                  \"cancelButton\": \"Dismiss\",\n                  \"description\": \"Once this error is ignored, this record will not be synced to Pipedrive.\",\n                  \"submitButton\": \"Yes, go ahead\",\n                  \"title\": \"Are you sure you want to ignore?\",\n                  \"type\": \"SIMPLE\",\n                  \"usecase\": \"DANGER\"\n                },\n                \"type\": \"POP_UP\"\n              }\n            });\n    listContent[j].content = errorList[j].third_party_entity_mapping.error_message;\n    listContent[j].button.popUp.apiEndPoint.input.ignoreIndex = j;\n    listContent[j].button.id = \"ignore\" + (j+1);\n    if(listContent.length > 14){\n      break;\n    }\n  }\n}\n\n\nignoreIndexArray.sort((a, b) => b-a); //for descending sort\n\nif(ignoreIndexArray !== undefined){\n  for(var i=0; i < ignoreIndexArray.length; i++){\n    listContent.splice(ignoreIndexArray[i], 1);\n  }\n}\n\nlet successCSVLength = steps.getTpConfig_2.response.body.third_party_configuration.config_json.cloudElements.formulas.formula_FullSyncRun.lastSyncDetails.successCSVLength || 0;\n\nlet errorCSVLength = steps.getTpConfig_2.response.body.third_party_configuration.config_json.cloudElements.formulas.formula_FullSyncRun.lastSyncDetails.errorCSVLength || 0;\n\nlet failedRecords = listContent.length || 0;\n\nconsole.log(errorList);\nconsole.log(\"\\nList Contentt... \\n\" + listContent);\nconsole.log(errorList.length);\nconsole.log(failedRecords);\n\nlet card;\n\nif(lastSyncDetails === null){\n  card = {\n    \"icon\": \"/third_party/cn-xero.png\",\n    \"unlink\": steps.ConfigParams.unlink,\n    \"syncErrors\": [{\n        \"card\": {\n            \"type\": \"ACTION\",\n            \"heading\": \" \",\n            \"icon\": \"WARNING\",\n            \"listActionContent\":[]\n        },\n         \"id\" : \"sync_errors\",\n      \"isCardDone\":\"true\"\n    }],\n    \"overview\": [{\n        \"card\": {\n            \"type\": \"ACTION2\",\n            \"id\": \"check2\",\n            \"icon\" : \"ERROR\"   ,\n            \"heading\": \"Integration Error \",\n            \"subHeading\": \"Error : Failed to Start Sync\",\n                 \"buttons\" :[\n              {\n                \"id\":\"sync\",\n                \"display\" : \"Sync Now\",\n                \"icon\" : \"AUTO_RENEW\",\n                \"type\" : \"DIRECT_LINK\",\n                \"buttonLook\":\"EMPTY\",\n                \"request\":{\n                  \"type\":\"ON_CLICK_GET_CARD\",\n                  \"apiEndPoint\": {\n                \"apiUrl\": cloudElementsUrl+\"/pipedrive/fullSyncRun\",\n                \"type\": \"GET\",\n                \"headers\": {\n                    \"Elements-Formula-Instance-Id\":  info.formulaInstanceId\n                },\n                \"input\":{\n                    \"integrationName\": steps.InputParams.params.input.integrationName,\n                    \"siteDomain\": steps.InputParams.params.input.siteDomain,\n                    \"apiKey\": steps.InputParams.params.input.apiKey,\n                    \"siteName\": steps.InputParams.params.input.siteName,\n                    \"syncNow\": \"syncNow\"\n                }\n            }\n                  }\n                }\n              ]\n        },\n        \"id\": \"overview\",\n        \"isCardDone\": \"true\"\n    }]\n  };\n  \n  done({\n    statusCode: 200,\n    result: card\n  });\n  \n}\n\n\ncard = {\n   \"icon\": \"/third_party/cn-xero.png\",\n   \"unlink\": steps.ConfigParams.unlink,\n   \"syncErrors\": [{\n      \"card\": {\n      \t\"id\":\"check3\",\n        \"type\": \"ACTION3\",\n        \"heading\": failedRecords + \" errors found  \",\n        \"listActionContent\":listContent,\n        \"buttons\":[\n          {\n            \"id\":\"download\",\n            \"display\" : \"Download CSV\",\n            \"icon\" : \"CLOUD_DOWNLOAD\",\n            \"fileId\" : (steps.getTpConfig.response.body.third_party_configuration.config_json.cloudElements.formulas.formula_FullSyncRun.csvFileId !== undefined) ? steps.getTpConfig.response.body.third_party_configuration.config_json.cloudElements.formulas.formula_FullSyncRun.csvFileId : null,\n            \"type\" : \"DOWNLOAD_FILE\"\n          },\n          {\n            \"id\":\"confirmation\",\n            \"display\" : \"IGNORE ALL\",\n            \"buttonLook\":\"EMPTY\",\n            \"icon\" : \"CLOSE\",\n            \"type\" : \"POP_UP\",\n            \"popUp\":{\n              \"type\":\"SIMPLE\",\n              \"title\":\"Are you sure you want to ignore the errors?\",\n              \"submitButton\":\"Yes, go ahead\",\n              \"cancelButton\":\"Dismiss\",\n              \"usecase\":\"DANGER\",\n              \"description\":\"Subscription data of this customer will not be synced with Pipedrive\",\n              \"apiEndPoint\":{\n                \"apiUrl\":cloudElementsUrl+\"/pipedrive/fullSyncRun\",\n                \"headers\": {\n                  \"Elements-Formula-Instance-Id\": fullSyncRun_instance\n                },\n                \"input\": {\n                      \"apiKey\": steps.InputParams.params.input.apiKey,\n                      \"siteName\": steps.InputParams.params.input.siteName,\n                      \"integrationName\": steps.InputParams.params.input.integrationName,\n                      \"siteDomain\": steps.InputParams.params.input.siteDomain,\n                      \"ignoreAll\": \"true\",\n                      \"totalRecordsSynced\":successCSVLength\n                      },\n                \"type\":\"GET\"\n                }\n              }\n            }\n          ]\n        },\n      \"id\" : \"sync_errors\",\n      \"isCardDone\":\"true\"\n    }],\n    \"overview\": [{\n        \"card\": {\n            \"type\": \"ACTION2\",\n            \"heading\": \" \",\n            \"subHeading\": \" \",\n            \"buttons\" :[\n              {\n                \"id\":\"sync\",\n                \"display\" : \"Sync Now\",\n                \"icon\" : \"AUTO_RENEW\",\n                \"type\" : \"DIRECT_LINK\",\n                \"buttonLook\":\"EMPTY\",\n                \"request\":{\n                  \"type\":\"ON_CLICK_GET_CARD\",\n                  \"apiEndPoint\":{\n                     \"apiUrl\": cloudElementsUrl+\"/pipedrive/fullSyncRun\",\n                \"type\": \"GET\",\n                \"headers\": {\n                    \"Elements-Formula-Instance-Id\": info.formulaInstanceId\n                       },\n                    \"input\": {\n                      \"apiKey\": steps.InputParams.params.input.apiKey,\n                      \"siteName\": steps.InputParams.params.input.siteName,\n                      \"integrationName\": steps.InputParams.params.input.integrationName,\n                      \"siteDomain\": steps.InputParams.params.input.siteDomain,\n                      \"syncNow\": \"syncNow\"\n                      }\n                    }\n                  }\n                }\n              ],\n        },\n        \"id\": \"overview\",\n        \"isCardDone\": \"true\"\n    \n    }]\n    \n    \n};\n\n\n\n\nlet cur =  Math.round((new Date().getTime())/1000);\nlet syncStart = syncStatus.context.syncData.syncEnd;\nif(syncStart === undefined){\n syncStart = syncStatus.context.syncData.previousSyncEnd;\n}\n\nlet time = Math.round((cur-syncStart)/60);\n\ncard.overview[0].card.heading = \"Last sync done \"+ time +\" Minutes ago \";\n\nif(time > 60){\n  let hours = Math.round(time/60);\n  let minutes = time % 60;\n  card.overview[0].card.heading = \"Last sync done \"+hours+\" Hours and \"+minutes+\" Minutes ago\";\n  \n    if(hours < 24){\n    sync_result.overview[0].card.heading = \"Last sync done \"+hours+\" Hours and \"+minutes+\" Minutes ago\";\n    }else{\n      let days = Math.round(time/(24*60));\n      hours = Math.round((time % (24*60))/60);\n      minutes = time % 60;\n          sync_result.overview[0].card.heading = \"Last sync done \"+days+\" days \"+(hours !== 0 ? hours + \" Hours\":\"\" )+\" and \"+minutes+\" Minutes ago\";\n      \n    }\n}\n\nif(syncStatus.status === \"succeeded\") {\n  \n  card.overview[0].card.subHeading = syncStatus.context.syncData.success + \"  records were synced with Pipedrive\";\n                  \n                \n  if(syncStatus.context.syncData.failed > 0) {\n    card.overview[0].card.message = {\n                      \"message\": (syncStatus.context.syncData.failed - ignoreIndexArray.length)  + \" Records could not be synced to Pipedrive\",\n                      \"button\": {\n                          \"id\": \"errors\",\n                          \"display\": \"See all errors\",\n                          \"icon\": \"ARROW\",\n                          \"type\": \"TAB_CHANGE\",\n                       \n                        }\n                    }\n    card.overview[0].card.message.icon = \"WARNING\";\n    card.overview[0].card.message.messageLook = \"WARN\";\n  }\n}\nelse {\n   card.overview[0].card.subHeading = successRecord.length + \"  records were synced with Pipedrive\";\n                  \n                  \n\n  if(failedRecords > 0) {\n    card.overview[0].card.message = {\n                      \"message\": failedRecords  + \" Records could not be synced to Pipedrive\",\n                      \"button\": {\n                          \"id\": \"errors\",\n                          \"display\": \"See all errors\",\n                          \"icon\": \"ARROW\",\n                          \"type\": \"TAB_CHANGE\",\n                       \n                        }\n                    }\n    card.overview[0].card.message.icon = \"WARNING\";\n    card.overview[0].card.message.messageLook = \"WARN\";\n  }\n  \n}\n\n\nif(failedRecords === 0){\n  card.syncErrors =  [\n    {\n      \"card\": {\n            \"type\" : \"ACTION\",\n            \"heading\" : \"No errors found\",\n            \"icon\" : \"SUCCESS\"\n         },\n      \"id\": \"sync_errors\",\n      \"isCardDone\": \"false\"\n    }\n  ]\n}\n\n\ndone({\n  statusCode: 200,\n  result: card\n});"}},{"id":215876,"onSuccess":[],"onFailure":[],"name":"sendProcessCard","type":"script","properties":{"body":"let cloudElementsUrl = steps.EnvProps.cloudElementsUrl;\nlet fullSyncRun_instance = steps.getTpConfig.response.body.third_party_configuration.config_json.cloudElements.formulas.formula_FullSyncRun.instance;\n\n// {\n//       \"card\": {\n//         \"type\" : \"ACTION3\",\n//         \"icon\": \"INFO\",\n//         \"heading\" : \"Sync In Progress..\",\n//         \"listActionContent\":[],//end of list content\n//           \"buttons\":[]\n//         },\n//         \"id\" : \"sync_errors\",\n//         \"isCardDone\":\"false\"\n//     }\n\nlet card = {\n    \"icon\": \"/third_party/cn-xero.png\",\n    \"syncErrors\":[{\n      \"card\": {\n        \"type\" : \"ACTION3\",\n        \"icon\": \"INFO\",\n        \"heading\" : \"No errors found\",\n        \"listActionContent\":[],//end of list content\n          \"buttons\":[]\n        },\n        \"id\" : \"sync_errors\",\n        \"isCardDone\":\"false\"\n    }],\n    \"overview\": [{\n        \"card\": {\n            \"type\" : \"PROCESSING\",\n            \"processingText\": \" Syncing all customers and their subscriptions\",\n            \"request\" : {\n               \"type\":\"DOC_READY_GET_CARD\",\n               \"apiEndPoint\":{\n                  \"apiUrl\": cloudElementsUrl+\"/pipedrive/fullSyncRun\",\n                        \"type\": \"GET\",\n                        \"headers\": {\n                            \"Elements-Formula-Instance-Id\": fullSyncRun_instance\n                        },\n                        \"input\":{\n                            \"apiKey\": steps.InputParams.params.input.apiKey,\n                            \"siteName\": steps.InputParams.params.input.siteName,\n                            \"integrationName\": steps.InputParams.params.input.integrationName,\n                            \"siteDomain\": steps.InputParams.params.input.siteDomain,\n                            \"executionId\": info.formulaExecutionId\n                        }\n               }\n            }\n         },\n        \"id\":\"overview\",\n        \"isCardDone\":\"false\"\n    }],\n    \"unlink\": steps.ConfigParams.unlink\n};\n\ndone({\n statusCode: 200,\n result: card\n})"}},{"id":240078,"onSuccess":[],"onFailure":[],"name":"sendProcessCard_newDispatcherInstance","type":"script","properties":{"body":"let cloudElementsUrl = steps.EnvProps.cloudElementsUrl;\nlet fullSyncRun_instance = steps.getTpConfig.response.body.third_party_configuration.config_json.cloudElements.formulas.formula_FullSyncRun.instance;\n\nlet card = {\n    \"icon\": \"/third_party/cn-xero.png\",\n    \"syncErrors\":[{\n      \"card\": {\n        \"type\" : \"ACTION3\",\n        \"icon\": \"INFO\",\n        \"heading\" : \"No errors found\",\n        \"listActionContent\":[],//end of list content\n          \"buttons\":[]\n        },\n        \"id\" : \"sync_errors\",\n        \"isCardDone\":\"false\"\n    }],\n    \"overview\": [{\n        \"card\": {\n            \"type\" : \"PROCESSING\",\n            \"processingText\": \" Sync is starting...\",\n            \"request\" : {\n               \"type\":\"DOC_READY_GET_CARD\",\n               \"apiEndPoint\":{\n                  \"apiUrl\": cloudElementsUrl+\"/pipedrive/fullSyncRun\",\n                        \"type\": \"GET\",\n                        \"headers\": {\n                            \"Elements-Formula-Instance-Id\": fullSyncRun_instance\n                        },\n                        \"input\":{\n                            \"apiKey\": steps.InputParams.params.input.apiKey,\n                            \"siteName\": steps.InputParams.params.input.siteName,\n                            \"integrationName\": steps.InputParams.params.input.integrationName,\n                            \"siteDomain\": steps.InputParams.params.input.siteDomain,\n                            \"executionId\": info.formulaExecutionId,\n                            \"newDispatcherInstance\": steps.createNewDispatcherInstance.response.body.id\n                        }\n               }\n            }\n         },\n        \"id\":\"overview\",\n        \"isCardDone\":\"false\"\n    }],\n    \"unlink\": steps.ConfigParams.unlink\n};\n\ndone({\n statusCode: 200,\n result: card\n})"}},{"id":215877,"onSuccess":["isDispatcherInstanceExist"],"onFailure":["isDispatcherInstanceExist"],"name":"startExecution","type":"request","properties":{"retry":"true","api":"${steps.triggerSyncParams.dispatcherTrigger.url}","method":"POST","retryAttempts":"5","body":"${steps.triggerSyncParams.dispatcherTrigger.body}","acceptableStatusCodes":"200,404","retryDelay":"200"}},{"id":229122,"onSuccess":["getLatestSyncDetails"],"onFailure":[],"name":"TpData","type":"script","properties":{"body":"let errorLog = [];\nlet list = steps.GetTPMapping1.response.body.list;\n\nif(list === undefined) {\n  list = [];\n}\n\nfor(var i=0;i<list.length;i++){\n  let tp = list[i].third_party_entity_mapping;\n  if(tp !== undefined) {\n    if(tp.status === \"update_failed\"){\n       errorLog.push(tp.error_message);\n  }\n  }\n}\n\ndone({\n  errorLog:errorLog,\n});\n"}},{"id":229124,"onSuccess":["GetTPMapping1"],"onFailure":[],"name":"TPMappingParam","type":"script","properties":{"body":"let apiKey = steps.InputParams.params.input.apiKey;\nlet siteName = steps.InputParams.params.input.siteName;\nlet siteDomain = steps.InputParams.params.input.siteDomain;\nlet type =  steps.InputParams.params.input.integrationName;\n\nlet password = \"\";\nlet startTime;\nlet endTime;\nlet syncStaus = steps.lastSyncDetails.response.body.third_party_sync_detail;\nlet formula = steps.getTpConfig.response.body.third_party_configuration.config_json.cloudElements;\n\nstartTime = syncStaus.context.syncData.syncStart;\nendTime = formula.lastSyncTime;\n  \nlet params = {\n        config: {\n            url: \"https://\" + siteName + \".\" + siteDomain + \"/api/v2/third_party_entity_mappings/list_all\",\n            auth: {\n                Authorization: \"Basic \" + CE.b64(apiKey + \":\" + password)\n            },\n            query: {\n                integration_name: type,\n                \"modified_at[after]\": startTime,\n                \"status[is]\": \"update_failed\",\n                limit: 20\n            }\n        }\n};\n\ndone({ params: params });\n"}},{"id":215878,"onSuccess":["startExecution"],"onFailure":["sendFailedCard"],"name":"triggerSyncParams","type":"script","properties":{"body":"let dispatcherInstance = steps.getTpConfig.response.body.third_party_configuration.config_json.cloudElements.formulas.formula_SyncDispatcher.instance;\n\n\nif(dispatcherInstance === undefined){\n  done(false);\n}\n\nlet dispatcherTrigger = {\n  url: \"/formulas/instances/\"+dispatcherInstance+\"/executions\",\n  body:{\n    apiKey: steps.InputParams.params.input.apiKey,\n    siteName: steps.InputParams.params.input.siteName,\n    siteDomain: steps.InputParams.params.input.siteDomain,\n    integrationName: steps.InputParams.params.input.integrationName,\n    initialSync: false,\n    newBatch: true\n  }\n};\n\ndone({\n  dispatcherTrigger: dispatcherTrigger\n});"}},{"id":215879,"onSuccess":["updateTpConfig_1"],"onFailure":[],"name":"updateStatus","type":"script","properties":{"body":"let input = steps.checkStatus.settings;\nlet password=\"\";\n// input.card = card;\n\nlet successCSVLength = steps.getLatestSyncDetails.response.body.third_party_sync_detail.successRecord;\nlet errorCSVLength = 0;\nlet errorCSV = steps.TpData.errorLog;\n\nif(input.body.context === undefined) {\n  input.body.context = {\n  };\n}\n\n\n// let result = steps.getResult.response.body || [];\n\n// for(var i=0; i < result.length ; i++){\n//   if(result[i]['key'] === \"Success.successCSVLength\"){\n//     successCSVLength = result[i]['value'];\n//   }\n  \n//   if(result[i]['key'] === \"Success.errorCSVLength\"){\n//     errorCSVLength = result[i]['value'];\n//   }\n  \n//   if(result[i]['key'] === \"Success.errorCSV\"){\n//       errorCSV = JSON.parse(result[i]['value']);\n//   }\n// }\n\nlet total = Number(successCSVLength + errorCSVLength);\n\ninput.body.context.sync_context_messages = [ total +\" Customers processed (\"+successCSVLength+\" created, 0 updated, \"+errorCSVLength+\" not synced)\"];\ninput.body.context.initialSync = false;\ninput.body.context.syncData = {};\ninput.body.context.syncData.total = total;\ninput.body.context.syncData.success = successCSVLength;\ninput.body.context.syncData.failed = errorCSV.length;\ninput.body.context.syncData.syncEnd = Math.round((new Date().getTime())/1000);\n\n// Upload CSV Configuration\n\n// let id;\n// let csv = \"\";\n// let msg;\n// let password = \"\";\n\n// for(let i = 0; i < errorCSV.length; ++i){\n//   id = errorCSV[i].split(',')[0];\n//   msg = errorCSV[i].split(',')[1];\n//   csv = csv + id + \",\" + msg;\n// }\n\n\nlet id;\nlet fullSyncErrCsv=\"Id\"+\",\"+\"Error Description\\n\";\nlet msg;\nif(errorCSV.length !== 0){\n  for(let i=0;i<errorCSV.length;++i){\n     msg = errorCSV[i].split('>').pop().split('-').pop();\n     id = errorCSV[i].split('>')[1].split('<')[0];\n   \n     fullSyncErrCsv=fullSyncErrCsv+id+\",\"+msg;\n  }\n}\n\nlet uploadCSVEndpoint = {\n  url: \"https://\" + steps.InputParams.params.input.siteName + \".integrations.\" + steps.InputParams.params.input.siteDomain + \"/integrations/api/file_upload\",\n  auth:{\n    Authorization: \"Basic \" + CE.b64(steps.InputParams.params.input.apiKey + \":\" + password),\n    \"Content-Type\" : \"application/json\"\n  },\n  query:{\n    api_key: steps.InputParams.params.input.apiKey,\n    site_name: steps.InputParams.params.input.siteName,\n    integ_name: steps.InputParams.params.input.integrationName,\n    file_type: \"csv\",\n    log_type : \"Validation\"\n  },\n  body:{\n    file_content: fullSyncErrCsv\n  },\n  csv:fullSyncErrCsv\n};\n\n// -- Upload CSV End --\n\n\n\ndone({\n  input: input,\n  uploadCSVEndpoint: uploadCSVEndpoint\n});\n\n"}},{"id":215880,"onSuccess":["sendErrorMail"],"onFailure":[],"name":"updateSyncError","type":"httpRequest","properties":{"retry":"true","url":"${steps.checkStatus.settings.url}","method":"POST","query":"${steps.checkStatus.settings.body}","retryAttempts":"5","headers":"${steps.checkStatus.settings.auth}","retryDelay":"200"}},{"id":215881,"onSuccess":["sendErrorCard"],"onFailure":[],"name":"updateSyncStatusFailed","type":"httpRequest","properties":{"retry":"true","url":"${steps.updateTpConfig4.updateSyncStatusEndpoint.url}","method":"POST","query":"${steps.updateTpConfig4.updateSyncStatusEndpoint.body}","retryAttempts":"5","headers":"${steps.updateTpConfig4.updateSyncStatusEndpoint.auth}","retryDelay":"200"}},{"id":215882,"onSuccess":["updateTpConfig3"],"onFailure":[],"name":"updateSyncStatus_Failed","type":"httpRequest","properties":{"retry":"true","url":"${steps.failedSyncParams.payload.url}","method":"POST","query":"${steps.failedSyncParams.payload.body}","retryAttempts":"5","headers":"${steps.failedSyncParams.payload.auth}","retryDelay":"200"}},{"id":215883,"onSuccess":["sendProcessCard"],"onFailure":[],"name":"updateSyncStatus_Running","type":"httpRequest","properties":{"retry":"true","url":"${steps.runningSyncParams.payload.url}","method":"POST","query":"${steps.runningSyncParams.payload.body}","retryAttempts":"5","headers":"${steps.runningSyncParams.payload.auth}","retryDelay":"200"}},{"id":215884,"onSuccess":["uploadCSV"],"onFailure":["sendErrorMail"],"name":"updateSyncSuccess","type":"httpRequest","properties":{"retry":"true","url":"${steps.updateStatus.input.url}","method":"POST","query":"${steps.updateStatus.input.body}","retryAttempts":"5","headers":"${steps.updateStatus.input.auth}","retryDelay":"200"}},{"id":215885,"onSuccess":["updateTpConfigRequest_1"],"onFailure":[],"name":"updateTpConfig_1","type":"script","properties":{"body":"let configJson = steps.getTpConfig.response.body.third_party_configuration.config_json;\nlet updateTpConfigParams = steps.InputParams.updateTpConfigParams;\nlet successCSV = null;\nlet errorCSV =  steps.TpData.errorLog;\nlet successCSVLength = steps.getLatestSyncDetails.response.body.third_party_sync_detail.successRecord;\nlet errorCSVLength = 0;\n\n// if(steps.getResult.response.code === 200){\n//   let result = steps.getResult.response.body;\n//   for(var j=0; j < result.length; j++){\n//     if(result[j]['key'] === \"Success.errorCSV\"){\n//       errorCSV = JSON.parse(result[j]['value']);\n//     }\n    \n//     if(result[j]['key'] === \"Success.successCSV\"){\n//       successCSV = JSON.parse(result[j]['value']);\n//     }\n    \n//     if(result[j]['key'] === \"Success.successCSVLength\"){\n//       successCSVLength = JSON.parse(result[j]['value']);\n//     }\n    \n//     if(result[j]['key'] === \"Success.errorCSVLength\"){\n//       errorCSVLength = JSON.parse(result[j]['value']);\n//     }\n    \n//   }\n// }\n\nif(configJson.cloudElements.formulas.formula_FullSyncRun.lastSyncTime === undefined){\n  configJson.cloudElements.formulas.formula_FullSyncRun.firstFullSyncEndTime = Math.round((new Date().getTime())/1000);\n}\n\n\n  configJson.cloudElements.formulas.formula_FullSyncRun.lastSyncDetails = {\n    \"errorCSVLength\" : errorCSV.length,\n    \"successCSVLength\" : successCSVLength\n  };\n\n\nlet csvFileId = (steps.uploadCSV.response.body.s3_link !== undefined) ? steps.uploadCSV.response.body.s3_link : null;\n\nconfigJson.cloudElements.formulas.formula_FullSyncRun.csvFileId = csvFileId;\nconfigJson.cloudElements.formulas.formula_FullSyncRun.status = \"SUCCESS\";\nconfigJson.cloudElements.formulas.formula_FullSyncRun.lastSyncTime = (steps.updateStatus.input.body.context.syncEnd !== undefined) ? steps.updateStatus.input.body.context.syncEnd : Math.round((new Date().getTime())/1000);\n\nupdateTpConfigParams.body.config_json = configJson;\n\ndone({\n  updateTpConfigParams : updateTpConfigParams\n});"}},{"id":215886,"onSuccess":["updateTpConfigRequest_2"],"onFailure":[],"name":"updateTpConfig_2","type":"script","properties":{"body":"let configJson = steps.getTpConfig.response.body.third_party_configuration.config_json;\nlet updateTpConfigParams = steps.InputParams.updateTpConfigParams;\n\nif(configJson.cloudElements.formulas.formula_FullSyncRun.lastSyncDetails !== undefined){\n  configJson.cloudElements.formulas.formula_FullSyncRun.lastSyncDetails = null; //Clearing Last Sync Details\n}\n\nif(steps.startExecution.response.code === 200){\n  configJson.cloudElements.formulas.formula_FullSyncRun.status = \"RUNNING\";\n  configJson.cloudElements.formulas.formula_FullSyncRun.dispatcherExecutionId = steps.startExecution.response.body[0].id || null;\n}else{\n  configJson.cloudElements.formulas.formula_FullSyncRun.status = \"FAILED\";\n}\n\nupdateTpConfigParams.body.config_json = configJson;\n\n\ndone({\n  updateTpConfigParams : updateTpConfigParams\n});"}},{"id":215887,"onSuccess":["updateTpConfigRequest_3"],"onFailure":[],"name":"updateTpConfig3","type":"script","properties":{"body":"let configJson = steps.getTpConfig.response.body.third_party_configuration.config_json;\nlet updateTpConfigParams = steps.InputParams.updateTpConfigParams;\n\nif(configJson.cloudElements.formulas.formula_FullSyncRun.lastSyncDetails !== undefined){\n  configJson.cloudElements.formulas.formula_FullSyncRun.lastSyncDetails = null; //Clearing Last Sync Details\n}\n\nconfigJson.cloudElements.formulas.formula_FullSyncRun.status = \"FAILED\";\nconfigJson.cloudElements.formulas.formula_SyncDispatcher.instance = steps.createNewDispatcherInstance.response.body.id;\n\nupdateTpConfigParams.body.config_json = configJson;\n\ndone({\n  updateTpConfigParams : updateTpConfigParams\n});"}},{"id":215888,"onSuccess":["updateTpConfigRequest_4"],"onFailure":["sendErrorMail_4"],"name":"updateTpConfig4","type":"script","properties":{"body":"let configJson;\nif(steps.hasError !== undefined){\n  configJson = steps.getTpConfig.response.body.third_party_configuration.config_json ;\n}else{\n  configJson = steps.getTpConfig_4.response.body.third_party_configuration.config_json;\n}\n\nlet updateTpConfigParams = steps.InputParams.updateTpConfigParams;\n\nif(configJson.cloudElements.formulas.formula_FullSyncRun.lastSyncDetails !== undefined){\n  configJson.cloudElements.formulas.formula_FullSyncRun.lastSyncDetails = null; //Clearing Last Sync Details\n}\n\nif(configJson.cloudElements.formulas.formula_FullSyncRun.lastSyncDetails === undefined){\n  configJson.cloudElements.formulas.formula_FullSyncRun.status = \"FAILED_ON_FIRST_RUN\";\n}\n\nconfigJson.cloudElements.formulas.formula_FullSyncRun.status = \"FAILED\";\nupdateTpConfigParams.body.config_json = configJson;\n\n\ndone({\n  updateTpConfigParams : updateTpConfigParams\n});"}},{"id":215889,"onSuccess":["updateTpConfigRequest_5"],"onFailure":[],"name":"updateTpConfig5","type":"script","properties":{"body":"let configJson = steps.getTpConfig.response.body.third_party_configuration.config_json;\nlet updateTpConfigParams = steps.InputParams.updateTpConfigParams;\n\nconfigJson.cloudElements.formulas.formula_FullSyncRun.lastSyncDetails.ignoreAll = \"true\";\n\nupdateTpConfigParams.body.config_json = configJson;\n\n\ndone({\n  updateTpConfigParams : updateTpConfigParams\n});"}},{"id":215890,"onSuccess":["updateTpConfigRequest_6"],"onFailure":[],"name":"updateTpConfig6","type":"script","properties":{"body":"let configJson = steps.getTpConfig.response.body.third_party_configuration.config_json;\n\nlet updateTpConfigParams = steps.InputParams.updateTpConfigParams;\n\nlet ignoreIndex = trigger.args.request.query['ignoreIndex'];\n\nif(configJson.cloudElements.formulas.formula_FullSyncRun.lastSyncDetails.ignoreIndex === undefined){\n  configJson.cloudElements.formulas.formula_FullSyncRun.lastSyncDetails.ignoreIndex = [];\n}\n\nignoreIndex_configJson = configJson.cloudElements.formulas.formula_FullSyncRun.lastSyncDetails.ignoreIndex;\n\nflag = false;\n\nfor(var i=0; i < ignoreIndex_configJson.length; i++){\n  if(ignoreIndex_configJson[i] === Number(ignoreIndex)){\n    flag = true;\n  }\n}\n\nif(flag === false){\n  configJson.cloudElements.formulas.formula_FullSyncRun.lastSyncDetails.ignoreIndex.push(Number(ignoreIndex));\n}\n\nupdateTpConfigParams.body.config_json = configJson;\n\ndone({\n  updateTpConfigParams : updateTpConfigParams\n});"}},{"id":215891,"onSuccess":["makeCard"],"onFailure":["sendErrorMail"],"name":"updateTpConfigRequest_1","type":"httpRequest","properties":{"retry":"true","url":"${steps.updateTpConfig_1.updateTpConfigParams.url}","method":"POST","retryAttempts":"5","body":"${steps.updateTpConfig_1.updateTpConfigParams.body}","headers":"${steps.updateTpConfig_1.updateTpConfigParams.headers}","retryDelay":"200"}},{"id":215892,"onSuccess":["isSyncStarted"],"onFailure":[],"name":"updateTpConfigRequest_2","type":"httpRequest","properties":{"retry":"true","method":"POST","url":"${steps.updateTpConfig_2.updateTpConfigParams.url}","retryAttempts":"5","body":"${steps.updateTpConfig_2.updateTpConfigParams.body}","headers":"${steps.updateTpConfig_2.updateTpConfigParams.headers}","retryDelay":"200"}},{"id":215893,"onSuccess":["sendProcessCard_newDispatcherInstance"],"onFailure":[],"name":"updateTpConfigRequest_3","type":"httpRequest","properties":{"url":"${steps.updateTpConfig3.updateTpConfigParams.url}","method":"POST","retry":"true","retryAttempts":"5","body":"${steps.updateTpConfig3.updateTpConfigParams.body}","headers":"${steps.updateTpConfig3.updateTpConfigParams.headers}","retryDelay":"200"}},{"id":215894,"onSuccess":["sendErrorMail_4"],"onFailure":["sendErrorMail_4"],"name":"updateTpConfigRequest_4","type":"httpRequest","properties":{"retry":"true","url":"${steps.updateTpConfig4.updateTpConfigParams.url}","method":"POST","retryAttempts":"5","body":"${steps.updateTpConfig4.updateTpConfigParams.body}","headers":"${steps.updateTpConfig4.updateTpConfigParams.headers}","retryDelay":"200"}},{"id":215895,"onSuccess":["sendLastSyncDetails_IgnoreAll"],"onFailure":[],"name":"updateTpConfigRequest_5","type":"httpRequest","properties":{"retry":"true","url":"${steps.updateTpConfig5.updateTpConfigParams.url}","method":"POST","retryAttempts":"5","body":"${steps.updateTpConfig5.updateTpConfigParams.body}","headers":"${steps.updateTpConfig5.updateTpConfigParams.headers}","retryDelay":"200"}},{"id":215896,"onSuccess":["getTpConfig_2"],"onFailure":[],"name":"updateTpConfigRequest_6","type":"httpRequest","properties":{"retry":"true","url":"${steps.updateTpConfig6.updateTpConfigParams.url}","method":"POST","retryAttempts":"5","body":"${steps.updateTpConfig6.updateTpConfigParams.body}","headers":"${steps.updateTpConfig6.updateTpConfigParams.headers}","retryDelay":"200"}},{"id":215897,"onSuccess":["updateTpConfig_1"],"onFailure":["updateTpConfig4"],"name":"uploadCSV","type":"httpRequest","properties":{"method":"POST","url":"${steps.updateStatus.uploadCSVEndpoint.url}","query":"${steps.updateStatus.uploadCSVEndpoint.query}","retryAttempts":"5","body":"${steps.updateStatus.uploadCSVEndpoint.body}","headers":"${steps.updateStatus.uploadCSVEndpoint.auth}","retryDelay":"200"}}],"triggers":[{"id":26041,"onSuccess":["EnvProps"],"onFailure":[],"type":"manual","async":true,"name":"trigger","properties":{}}],"method":"GET","uri":"/pipedrive/fullSyncRun","engine":"v1","active":true,"debugLoggingEnabled":true,"singleThreaded":false,"api":"GET /pipedrive/fullSyncRun","configuration":[]}