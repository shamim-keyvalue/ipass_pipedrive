{"id":29412,"name":"testing-pipedriveInitialSyncRun","userId":27893,"accountId":24428,"createdDate":"2019-09-05T07:01:21Z","steps":[{"id":228921,"onSuccess":["isDispatcherInstanceExist"],"onFailure":["sendNoticeAlreadyExecutionExist"],"name":"alreadyExecutionExist","type":"filter","properties":{"body":"if(steps.getDispatcherExecutions.response.code !== 200){\n  done(true);\n}\n\nif(steps.getDispatcherExecutions.response.body.length === 0){\n  done(true);\n}\n\nlet executionData = steps.getDispatcherExecutions.response.body;\n\nlet executionStatus = executionData[0].status;\nlet executionStartTime = executionData[0].createdDate;\n\nlet syncStatus = steps.getTpConfig.response.body.third_party_configuration.config_json.cloudElements.formulas.formula_InitialSyncRun.syncStatus || null;\n\nif((executionStatus === \"pending\") && (syncStatus === \"RUNNING\")){\n  done(false);\n}\n\ndone(true);"}},{"id":226209,"onSuccess":["isInstanceExist"],"onFailure":[],"name":"checkInstanceExist","type":"script","properties":{"body":"let instances=steps.getInstances.response.body;\nlet siteName= steps.InputParams.params.input.siteName;\nlet bodyParam=steps.formulaInformation;\n\nlet flag = false;\nlet instanceInfo = '';\nlet formulaNames = \"formula_SyncDispatcher\";\n  \nlet instanceNames = bodyParam.formula_SyncDispatcher.name;\n\nlet param=bodyParam.formula_SyncDispatcher;\n\n\nfor(var i=0;i<instances.length;i++){\n  if(instances[i].name === instanceNames){\n    flag = true;\n    instanceInfo =  instances[i];\n    formulaName = formulaNames;\n    break;\n  }\n}\n\nif(flag === false){\n  done({\n    flag: false,\n    formulaName : formulaNames,\n    instanceInfo: param\n  });\n}\n\nif(flag === true){\n  done({\n    flag: true,\n    formulaName : formulaNames,\n    instanceInfo: instanceInfo\n  });\n}\n\n\n\n\n"}},{"id":215802,"onSuccess":["hasError"],"onFailure":[],"name":"checkStatus","type":"script","properties":{"body":"// let input = {\n//   error : false,\n//   isStopSync: false,\n//   done: false,\n//   url : \"https://\"+steps.InputParams.params.input.siteName+\".\"+steps.InputParams.params.input.siteDomain+\"/api/v2/third_party_sync_details/\" +steps.lastSyncDetails.response.body.third_party_sync_detail.id,\n//   auth: {\n//     Authorization: \"Basic \" + CE.b64(steps.InputParams.params.input.apiKey + \":\" + \"\")\n//   },\n//   body: steps.lastSyncDetails.response.body.third_party_sync_detail,\n// };\n\nlet input = {\n  error : false,\n  isStopSync: false,\n  done: false,\n  body: steps.lastSyncDetails.response.body.third_party_sync_detail,\n};\n\nif(steps.executionStatus.response.body.status === undefined) {\n  input.error = true;\n  input.done = true;\n  input.body.status = \"failed\";\n}else if(steps.executionStatus.response.body.status === \"failed\"){\n  input.error = true;\n  input.done = true;\n  input.body.status = \"failed\";\n}else if(steps.executionStatus.response.body.status === \"success\"){\n  input.error = false;\n  input.done = true;\n   input.body.status = \"succeeded\";\n  for(var i=0;i<steps.executionStatus.response.body.stepExecutions.length;i++){\n    // if(steps.executionStatus.response.body.stepExecutions[i][\"stepName\"] ===\"Success\") {\n    //   input.result = steps.executionStatus.response.body.stepExecutions[i];\n    //   break;\n    // }\n    if(steps.executionStatus.response.body.stepExecutions[i][\"stepName\"] ===\"Failed\") {\n        input.error = true;\n        input.isStopSync=true;\n        break;\n    }\n  }\n}else if(steps.executionStatus.response.body.status === \"pending\"){\n  input.error = false;\n  input.done = false;\n  input.body.status = \"running\";\n}\n\n\ndone({\n  settings: input\n});"}},{"id":215803,"onSuccess":["updateTpConfig"],"onFailure":["sendSyncSetupCard"],"name":"checkSyncSetupDone","type":"filter","properties":{"body":"\nlet action = steps.InputParams.params.input.action;\nlet setupStatus = steps.getTpConfig.response.body.third_party_configuration.config_json.cloudElements.formulas.formula_InitialSyncRun.syncSetupStatus;\n\nif(setupStatus === undefined){\n  setupStatus = \"NOT_CONFIGURED\";\n}\n\n// let fromMapping = steps.InputParams.input.fromMapping;\n\n\n\n// if(fromMapping === \"true\"){\n//   done(false);\n// }\n\nif((action === \"default\") && (setupStatus === \"NOT_CONFIGURED\")){\n  done(false);\n}\n\nif((action === \"default\") && (setupStatus === \"NOT_CONFIGURED\")){\n  done(false);\n}\n\nif((action === \"default\") && (setupStatus === \"CONFIGURED\")){\n  done(true);\n}\n\nif((action === \"click\") && (setupStatus === \"NOT_CONFIGURED\")){\n  done(true);\n}\n\nif((action === \"click\") && (setupStatus === \"CONFIGURED\")){\n  done(true);\n}"}},{"id":231214,"onSuccess":["sendLastSyncDetails"],"onFailure":[],"name":"ConstructLogRecord","type":"script","properties":{"body":"let TPErrorList = steps.GetThirdPartyErrorDetails.response.body.list;\nlet TPSuccessList = steps.GetTPSuccessDetails.response.body.list;\nlet siteName = steps.InputParams.params.input.siteName;\nlet siteDomain = steps.InputParams.params.input.siteDomain;\nlet chargebee_data_url;\nlet cb_link;\nlet successLog = [];\nlet errorLog = [];\nlet company_domain = steps.getTpConfig.response.body.third_party_configuration.config_json.cloudElements.thirdParty.company_domain;\n\nfor ( let i = 0; i < TPSuccessList.length; ++i){\n\n  let pipedrive_data_url = \"https://\" + company_domain + \".pipedrive.com/person/\" + TPSuccessList[i].third_party_entity_mapping.third_party_entity_id;\n  let pipedrive_link = \"<a href='\" + pipedrive_data_url + \"' target=\\\"blank\\\">\" + TPSuccessList[i].third_party_entity_mapping.third_party_entity_id + \"</a>\";\n\n chargebee_data_url = \"https://\"+siteName+\".\"+siteDomain+\"/admin-console/customers/\"+TPSuccessList[i].third_party_entity_mapping.entity_id;\n cb_link = \"<a href='\"+chargebee_data_url+\"' target='blank'>\"+TPSuccessList[i].third_party_entity_mapping.entity_id+\"</a>\"\n \n  successLog.push(\"Customer id \" + cb_link + \" is synced as \" + pipedrive_link + \" in Pipedrive\\n\");\n}\n\n//To construct error log\nfor ( let i = 0; i < TPErrorList.length; ++i){\n   \n    errorLog.push(TPErrorList[i].third_party_entity_mapping.error_message );\n}\ndone({\n  successLog: successLog,\n  errorLog: errorLog\n})"}},{"id":226212,"onSuccess":["newInstanceCreatedInfo"],"onFailure":[],"name":"createFormulaInstance","type":"request","properties":{"method":"POST","body":"${steps.createFormulaInstanceParams.createInstanceConfig.body}","api":"${steps.createFormulaInstanceParams.createInstanceConfig.url}"}},{"id":226211,"onSuccess":["createFormulaInstance"],"onFailure":[],"name":"createFormulaInstanceParams","type":"script","properties":{"body":"let formulaId = steps.formulaInformation.formulaId || null;\n\n\nlet createInstanceConfig = {\n  url: \"/formulas/\"+formulaId+\"/instances\",\n  body: steps.checkInstanceExist.instanceInfo\n};\n\n\ndone({\n  createInstanceConfig: createInstanceConfig\n});\n\n\n"}},{"id":215804,"onSuccess":["isSyncStarted"],"onFailure":["isSyncStarted"],"name":"createNewSyncDetails","type":"httpRequest","properties":{"method":"POST","query":"${steps.createNewSyncDetails_params.newSyncDetailsParams.query}","retryAttempts":"5","headers":"${steps.createNewSyncDetails_params.newSyncDetailsParams.headers}","retryDelay":"200","url":"${steps.createNewSyncDetails_params.newSyncDetailsParams.url}","retry":"true"}},{"id":215805,"onSuccess":["createNewSyncDetails"],"onFailure":["sendErrorMail"],"name":"createNewSyncDetails_params","type":"script","properties":{"body":"let apiKey = steps.InputParams.params.input.apiKey;\nlet configJson = steps.getTpConfig_2.response.body.third_party_configuration.config_json;\n\nlet newSyncDetailsParams = {\n  url: \"https://\"+steps.InputParams.params.input.siteName+\".\"+steps.InputParams.params.input.siteDomain+\"/api/v2/third_party_sync_details\",\n  headers:{\n    Authorization: \"Basic \" + CE.b64(apiKey + \":\" + \"\")\n  },\n  query : {\n  'third_party_configuration[integration_name]': steps.InputParams.params.input.integrationName,\n  \"context\": {\n      \"excecutionId\": steps.startExecution.response.body[0].id,\n      \"instance\": configJson.cloudElements.formulas.formula_SyncDispatcher.instance || \"undefined\",\n      \"formula\": configJson.cloudElements.formulas.formula_SyncDispatcher.id || \"undefined\",\n      \"initialSync\":true\n    }\n  }\n};\n\ndone({\n  newSyncDetailsParams: newSyncDetailsParams\n});"}},{"id":219848,"onSuccess":["InputParams"],"onFailure":[],"name":"EnvProps","type":"script","properties":{"body":"let cloudElementsUrl = \"https://staging.cloud-elements.com/elements/api-v2\";\n\ndone({\n  cloudElementsUrl: cloudElementsUrl\n});"}},{"id":215806,"onSuccess":["checkStatus"],"onFailure":["sendErrorMail"],"name":"executionStatus","type":"request","properties":{"method":"GET","api":"${steps.executionStatusParams.payload.url}"}},{"id":215807,"onSuccess":["executionStatus"],"onFailure":["sendErrorMail"],"name":"executionStatusParams","type":"script","properties":{"body":"// let executionId = steps.lastSyncDetails.response.body.third_party_sync_detail.context.excecutionId;\n\nlet executionId = steps.getTpConfig_2.response.body.third_party_configuration.config_json.cloudElements.formulas.formula_InitialSyncRun.dispatcherExecutionId;\n\nlet payload = {\n  url: \"/formulas/instances/executions/\"+executionId\n};\n\n\ndone({\n  payload: payload\n});\n\n"}},{"id":215808,"onSuccess":["updateSyncStatus_Failed"],"onFailure":[],"name":"failedSyncParams","type":"script","properties":{"body":"let payload = {\n  error : true,\n  done: false,\n  url : \"https://\"+steps.InputParams.params.input.siteName+\".\"+steps.InputParams.params.input.siteDomain+\"/api/v2/third_party_sync_details/\" +steps.createNewSyncDetails.response.body.third_party_sync_detail.id,\n  auth: {\n    Authorization: \"Basic \" + CE.b64(steps.InputParams.params.input.apiKey + \":\" + \"\")\n  },\n  body: steps.createNewSyncDetails.response.body.third_party_sync_detail,\n};\n\npayload.body.status = \"failed\";\n\ndone({\n  payload: payload\n});"}},{"id":226207,"onSuccess":[],"onFailure":[],"name":"formulaIdList","type":"script","properties":{"body":"let formula_SyncRulesDealsConfig = steps.ConfigParams.params.input.formulas.formula_SyncRulesDealsConfig;\nlet formula_SyncFieldsConfig = steps.ConfigParams.params.input.formulas.formula_SyncFieldsConfig;\n\nlet formula_ValidateIgnore = steps.ConfigParams.params.input.formulas.formula_ValidateIgnore;\n\n// let formula_InitialSyncRun = steps.ConfigParams.params.input.formulas.formula_InitialSyncRun;\n// let formula_FullSyncRun = steps.ConfigParams.params.input.formulas.formula_FullSyncRun;\n\nlet formula_SyncDispatcher = steps.ConfigParams.params.input.formulas.formula_SyncDispatcher;\n\n// let formula_ManageSyncRules_Save = steps.ConfigParams.params.input.formulas.formula_ManageSyncRules_Save;\n\nlet formula_GetRefreshToken = steps.ConfigParams.params.input.formulas.formula_GetRefreshToken;\n\nlet formulaList=[formula_SyncRulesDealsConfig,formula_SyncFieldsConfig,formula_ValidateIgnore,formula_SyncDispatcher,formula_ManageSyncRules_Save,formula_GetRefreshToken];\n\n// formula_InitialSyncRun,formula_FullSyncRun,\n\ndone({formulaList:formulaList});"}},{"id":226206,"onSuccess":["getInstances"],"onFailure":[],"name":"formulaInformation","type":"script","properties":{"body":"let siteName = steps.InputParams.params.input.siteName;\n\nlet formula_SyncDispatcher = steps.getTpConfig.response.body.third_party_configuration.config_json.cloudElements.formulas.formula_SyncDispatcher.id;\n\ndone({\n  formula_SyncDispatcher:{\n    active: true,\n    configuration: {},\n    name: siteName + \"-SyncDispatcher\"\n  },\n  formulaId:formula_SyncDispatcher\n});"}},{"id":228920,"onSuccess":["alreadyExecutionExist"],"onFailure":[],"name":"getDispatcherExecutions","type":"request","properties":{"method":"GET","api":"/formulas/instances/${steps.getTpConfig.response.body.third_party_configuration.config_json.cloudElements.formulas.formula_SyncDispatcher.instance}/executions"}},{"id":226208,"onSuccess":["checkInstanceExist"],"onFailure":[],"name":"getInstances","type":"request","properties":{"method":"GET","api":"/formulas/${steps.formulaInformation.formulaId}/instances"}},{"id":231219,"onSuccess":["TPMappingParam"],"onFailure":[],"name":"getLatestSyncDetails","type":"httpRequest","properties":{"method":"GET","query":"${steps.InputParams.retrieveLatestSyncConfig.query}","headers":"${steps.InputParams.retrieveLatestSyncConfig.auth}","url":"${steps.InputParams.retrieveLatestSyncConfig.url}"}},{"id":215809,"onSuccess":["updateStatus"],"onFailure":[],"name":"getResult","type":"request","properties":{"method":"GET","api":"${steps.getResultParams.payload.url}"}},{"id":215810,"onSuccess":["getResult"],"onFailure":[],"name":"getResultParams","type":"script","properties":{"body":"let id = steps.checkStatus.settings.result.id;\n\nlet payload = {\n  url: \"/formulas/instances/executions/steps/\"+id+\"/values\"\n};\n\n\ndone({\n  payload: payload\n});"}},{"id":231210,"onSuccess":["GetThirdPartyErrorDetails"],"onFailure":[],"name":"GetThirdPartyConfigParams","type":"script","properties":{"body":"let apiKey = steps.InputParams.params.input.apiKey;\nlet siteName = steps.InputParams.params.input.siteName;\nlet siteDomain = steps.InputParams.params.input.siteDomain;\nlet type = steps.InputParams.params.input.integrationName;\nlet password = \"\";\nlet startTime;\nlet endTime;\nlet syncStaus = steps.lastSyncDetails.response.body.third_party_sync_detail;\nif (syncStaus.status === \"succeeded\") {\n    startTime = syncStaus.context.syncData.syncStart;\n} else {\n    startTime = syncStaus.context.syncData.previousSyncStart;\n    endTime = syncStaus.context.syncData.previousSyncEnd;\n}\n\nlet params = {\n    input: {\n        apiKey: apiKey,\n        siteName: siteName,\n        siteDomain: siteDomain,\n        type: type,\n        config: {\n            url: \"https://\" + siteName + \".\" + siteDomain + \"/api/v2/third_party_entity_mappings/list_all\",\n            auth: {\n                Authorization: \"Basic \" + CE.b64(apiKey + \":\" + password)\n            },\n            query: {\n                integration_name: type,\n                \"status[is]\": \"update_failed\",\n                \"modified_at[after]\": startTime,\n                \"modified_at[before]\": syncStaus.status === \"failed\" ? endTime : undefined\n            }\n        }\n    }\n};\n\ndone({ params: params });"}},{"id":231211,"onSuccess":["TPSuccessDetailsParam"],"onFailure":[],"name":"GetThirdPartyErrorDetails","type":"httpRequest","properties":{"method":"GET","query":"${steps.GetThirdPartyConfigParams.params.input.config.query}","headers":"${steps.GetThirdPartyConfigParams.params.input.config.auth}","url":"${steps.GetThirdPartyConfigParams.params.input.config.url}"}},{"id":215811,"onSuccess":["isMultipleClick"],"onFailure":["sendErrorMail"],"name":"getTpConfig","type":"httpRequest","properties":{"method":"GET","query":"${steps.InputParams.getTpConfigParams.query}","retryAttempts":"5","body":"","headers":"${steps.InputParams.getTpConfigParams.auth}","retryDelay":"200","url":"${steps.InputParams.getTpConfigParams.url}","retry":"true"}},{"id":215812,"onSuccess":["isClick"],"onFailure":["sendErrorMail"],"name":"getTpConfig_2","type":"httpRequest","properties":{"method":"GET","query":"${steps.InputParams.getTpConfigParams.query}","retryAttempts":"5","headers":"${steps.InputParams.getTpConfigParams.auth}","retryDelay":"200","url":"${steps.InputParams.getTpConfigParams.url}","retry":"true"}},{"id":231182,"onSuccess":["TpData"],"onFailure":[],"name":"GetTPMapping1","type":"httpRequest","properties":{"method":"GET","query":"${steps.TPMappingParam.params.config.query}","headers":"${steps.TPMappingParam.params.config.auth}","url":"${steps.TPMappingParam.params.config.url}"}},{"id":231213,"onSuccess":["ConstructLogRecord"],"onFailure":[],"name":"GetTPSuccessDetails","type":"httpRequest","properties":{"method":"GET","query":"${steps.TPSuccessDetailsParam.params.config.query}","headers":"${steps.TPSuccessDetailsParam.params.config.auth}","url":"${steps.TPSuccessDetailsParam.params.config.url}"}},{"id":215813,"onSuccess":["getLatestSyncDetails"],"onFailure":["notRetry"],"name":"hasDone","type":"filter","properties":{"body":"done(steps.checkStatus.settings.done);"}},{"id":215814,"onSuccess":["sendErrorMail"],"onFailure":["hasDone"],"name":"hasError","type":"filter","properties":{"body":"done(steps.checkStatus.settings.error);"}},{"id":215815,"onSuccess":["isPreviousSyncFailed"],"onFailure":["executionStatusParams"],"name":"hasNoExecution","type":"filter","properties":{"body":"// let flag = false;\n// let syncStatus = steps.lastSyncDetails.response.body.third_party_sync_detail.status;\n// if(syncStatus === \"succeeded\" || syncStatus === \"failed\") {\n//   flag = true;\n// }\n// done(flag);\n\nlet flag = false;\nif(steps.getTpConfig_2.response.body.third_party_configuration.config_json.cloudElements.formulas.formula_InitialSyncRun.syncStatus !== \"RUNNING\"){\n  flag = true;\n}\n\ndone(flag);"}},{"id":215816,"onSuccess":["getTpConfig"],"onFailure":[],"name":"InputParams","type":"script","properties":{"body":"let apiKey = trigger.args.request.query['cb-api-key'];\nlet siteName = trigger.args.request.query['cb-site-name'];\nlet integrationName = trigger.args.request.query['integrationName'];\nlet siteDomain = trigger.args.request.query['cb-domain'];\n\nlet fromMapping = trigger.args.request.query['fromMapping'];//request from mappping edit from manage sync preference\n\nlet retry = '';\nlet initialSync = '';\nlet action = trigger.args.request.query[\"action\"];\n\nif(trigger.args.request.query[\"action\"]=== undefined){\n  action = \"default\";\n}\n\nif((trigger.args.request.query['retry'] === undefined)){\n    retry = \"false\";\n}else{\n  if(trigger.args.request.query['retry'] === false){\n    retry = \"false\";\n  }else{\n    retry = \"true\";\n  }\n}\n\nif((trigger.args.request.query['initialSync'] === undefined)){\n    initialSync = \"false\";\n}else{\n  if(trigger.args.request.query['initialSync'] === false){\n    initialSync = \"false\";\n  }else{\n    initialSync = \"true\";\n  }\n}\n\nlet password = \"\";\n\nlet errorEmailEndpoint =  'https://' + siteName + '.' + siteDomain + '/adhoc_checkout_email/api/send';\n// let errorEmailAddress = \"integrations-growth-internal@chargebee.com\";\nlet errorEmailAddress = \"ajaitester@gmail.com\";\n\n//let apiKey = \"test_GGdIWcuNgQeYwAz5sgcuFornkTRZDTom6i\";\n//let siteName = \"ipaas-test\";\n//let type = 'activecampaign';\n//let siteDomain = \"chargebee-labs.com\";\n\nlet retrieveLatestSyncConfig = {\n  url:\"https://\"+siteName+\".\"+siteDomain+\"/api/v2/third_party_sync_details/retrieve_latest_sync\",\n  auth:{\n    Authorization: \"Basic \" + CE.b64(apiKey + \":\" + password)\n  },\n  query:{\n    'third_party_configuration[integration_name]': integrationName\n  },\n};\n\nlet getTpConfigParams = {\n    url: \"https://\"+siteName+\".\"+siteDomain+\"/api/v2/third_party_configurations\",\n    auth:{\n      Authorization: \"Basic \" + CE.b64(apiKey + \":\" + password)\n    },\n    query:{\n      integration_name: integrationName\n    }\n};\n\nlet updateTpConfigParams = {\n  url: \"https://\"+siteName+\".integrations.\"+siteDomain+\"/integrations/update_tp_integ_conf\",\n  headers: {\n    \"Content-Type\": \"application/json\",\n    \"cache-control\": \"no-cache\"\n  },\n  body: {\n     site_name: siteName,\n     api_key: apiKey,\n     integration_name: integrationName\n     //append config_json with this during request\n  }\n};\n\nlet sendErrorMailParams = {\n  url: errorEmailEndpoint,\n  headers:{\n    Authorization: \"Basic \" + CE.b64(apiKey + \":\" + \"\")\n  },\n  query :{\n    content : \"Integration Error, Formula-Instance-ID : \" + trigger.args.request.headers['elements-formula-instance-id'],\n    subject : \"Fatal Error Occurred during \" + integrationName + \" Initial Sync\",\n    to_address : errorEmailAddress,\n    api_key : apiKey\n  }\n};\n\n\n\nlet params = {\n  input: {\n    apiKey: apiKey,\n    siteName: siteName,\n    siteDomain:siteDomain,\n    integrationName: integrationName,\n    retry:retry,\n    initialSync:initialSync,\n    action:action,\n    fromMapping:fromMapping,\n    errorEmailEndpoint: errorEmailEndpoint,\n    errorEmailAddress: errorEmailAddress\n  }\n};\n\ndone({\n  params: params,\n  retrieveLatestSyncConfig: retrieveLatestSyncConfig,\n  getTpConfigParams: getTpConfigParams,\n  updateTpConfigParams: updateTpConfigParams,\n  sendErrorMailParams: sendErrorMailParams\n});"}},{"id":215817,"onSuccess":["sendErrorMail"],"onFailure":["syncAgain"],"name":"isBadRequest","type":"filter","properties":{"body":"if(steps.lastSyncDetails.response.code === 500){ //Internal Server Error\n  done(true);\n}\nelse if(steps.lastSyncDetails.response.code === 400){ //Bad Reqeust\n  done(true);\n}\nelse if(steps.lastSyncDetails.response.code === 502){ //Bad Gateway\n  done(true);\n}\nelse if(steps.lastSyncDetails.response.code === 504){ //Gateway Timeout\n  done(true);\n}else if(steps.lastSyncDetails.response.code === 403){ //Forbidden\n  done(true);\n}\nelse if(steps.lastSyncDetails.response.code === 401){ //Unauthorized\n  done(true);\n}else if(steps.lastSyncDetails.response.code === 429){ //Access Blocked\n  done(true);\n}else if(steps.lastSyncDetails.response.code === 409){ //No Sync Data Available\n  done(true);\n}else{\n  done(false);\n}"}},{"id":221732,"onSuccess":["syncAgain"],"onFailure":["lastSyncDetails"],"name":"isClick","type":"filter","properties":{"body":"\nif(trigger.args.request.query['action'] === \"click\"){\n  done(true);\n}\n\ndone(false);"}},{"id":226205,"onSuccess":["checkSyncSetupDone"],"onFailure":["formulaInformation"],"name":"isDispatcherInstanceExist","type":"filter","properties":{"body":"if(steps.getTpConfig.response.body.third_party_configuration.config_json.cloudElements.formulas.formula_SyncDispatcher.instance === undefined){\n  done(false);\n}\n\ndone(true);"}},{"id":226210,"onSuccess":["updateTpConfigParams_4"],"onFailure":["createFormulaInstanceParams"],"name":"isInstanceExist","type":"filter","properties":{"body":"done(steps.checkInstanceExist.flag);"}},{"id":228919,"onSuccess":["isDispatcherInstanceExist"],"onFailure":["getDispatcherExecutions"],"name":"isMultipleClick","type":"filter","properties":{"body":"if(steps.getTpConfig.response.body.third_party_configuration.config_json.cloudElements.formulas.formula_SyncDispatcher.instance === undefined){\n  done(true);\n}\n\nif(trigger.args.request.query['action'] === \"click\"){\n  done(false);\n}\n\ndone(true);"}},{"id":221419,"onSuccess":["sendErrorCard"],"onFailure":["syncAgain"],"name":"isPreviousSyncFailed","type":"filter","properties":{"body":"if(steps.lastSyncDetails.response.body.third_party_sync_detail.status === \"failed\"){\n  if(trigger.args.request.query['retry'] === \"true\"){\n    done(false);\n  }\n  done(true);\n}\n\ndone(false);"}},{"id":215818,"onSuccess":["updateTpConfig_3"],"onFailure":["sendFailedCard"],"name":"isSyncStarted","type":"filter","properties":{"body":"if(steps.startExecution.response.code !== 200){\n  done(false);\n}\n\ndone(true);"}},{"id":215819,"onSuccess":["noSyncDetailsPresent"],"onFailure":["isBadRequest"],"name":"lastSyncDetails","type":"httpRequest","properties":{"method":"GET","query":"${steps.InputParams.retrieveLatestSyncConfig.query}","retryAttempts":"5","acceptableStatusCodes":"200,409","headers":"${steps.InputParams.retrieveLatestSyncConfig.auth}","retryDelay":"200","url":"${steps.InputParams.retrieveLatestSyncConfig.url}","retry":"true"}},{"id":215820,"onSuccess":[],"onFailure":["sendErrorMail"],"name":"makeCard","type":"script","properties":{"body":"let cloudElementsUrl = steps.EnvProps.cloudElementsUrl;\n\nlet initialSyncRun_instance = steps.getTpConfig_2.response.body.third_party_configuration.config_json.cloudElements.formulas.formula_InitialSyncRun.instance;\n\nlet fullSyncRun_instance = steps.getTpConfig_2.response.body.third_party_configuration.config_json.cloudElements.formulas.formula_FullSyncRun.instance;\nlet total = steps.TpData.successLog.length + steps.TpData.errorLog.length;\n// let fullSyncProcessingCard_instance = steps.getTpConfig_2.response.body.third_party_configuration.config_json.cloudElements.formulas.formula_FullSyncProcessCard.instance || null;\n\n// let card = steps.updateStatus.input.card;\n\n// if(card === undefined){\n//   card = { \n//     \"cards\": [{\n//         \"id\": \"check2\",\n//         \"card\": {\n//             \"type\": \"ACTION\",\n//             \"heading\": \"Error\",\n//             \"listContent\": [\n//                 \"Initial Sync Failed\"\n//             ],\n//             \"icon\": \"DANGER\"\n          \n//         }\n//     }]\n//   };\n// }\n\nlet card = {\n    \"cards\":[\n      {\n        \"card\": {\n            \"type\" : \"ACTION\",\n            \"heading\" : \" \" + steps.TpData.successLog.length + \" out of \" + total + \" records synced successfully\",\n            \"listContent\": steps.TpData.successLog,\n            \"icon\" : \"SUCCESS\"         \n        },\n        \"id\" : \"check2\",\n        \"isCardDone\":\"true\"\n      },\n      {\n         \"card\": {\n            \"type\" : \"ACTION\",\n            \"heading\" : \" \" + steps.TpData.errorLog.length + \" out of \" + total + \" records could not be synced\",\n            \"subHeading\" : \"You could fix these errors and retry sync. Or you could go ahead and sync all records. We recommend that you fix these errors and retry sync.\",\n            \"listContent\": steps.TpData.errorLog,\n            \"icon\" : \"ERROR\"         \n         },\n         \"id\" : \"check3\",\n         \"isCardDone\":\"true\"\n      }\n      ] \n  };\n\n\nif(card.cards[0] !== undefined){\n  card.cards[0].showRetry = \"true\";\n   if(card.cards[0].card.listContent.length === 0){\n    card.cards.splice(0,1);\n  }\n}\n\nif(card.cards[1] !== undefined){\n  card.cards[1].showRetry = \"true\";\n   if(card.cards[1].card.listContent.length === 0){\n    card.cards.splice(1,1);\n  }\n}\n\ncard.proceed = {\n        \"id\": \"proceed_new\",\n        \"display\": \"Sync All Records\",\n        \"icon\": \"ARROW\",\n        \"type\": \"POP_UP\",\n        \"popUp\": {\n            \"type\": \"SIMPLE\",\n            \"title\": \"Are you sure you want to ignore the errors and sync alll records?\",\n            \"usecase\":\"DANGER\",\n            \"submitButton\": \"Yes, go ahead\",\n            \"cancelButton\": \"Dismiss\",\n            \"description\": \"All your customer and subscription data will be synced. You can fix the errors, if any, sync the data again, later.\",\n        \"apiEndPoint\": {\n                \"type\": \"GET\",\n                \"apiUrl\": cloudElementsUrl+\"/pipedrive/fullSyncRun\",\n                \"headers\": {\n                    \"Elements-Formula-Instance-Id\": fullSyncRun_instance\n                },\n                \"input\": {\n                    \"apiKey\": steps.InputParams.params.input.apiKey,\n                    \"siteName\": steps.InputParams.params.input.siteName,\n                    \"type\": steps.InputParams.params.input.type,\n                    \"siteDomain\": steps.InputParams.params.input.siteDomain,\n                    \"syncNow\": \"syncNow\"\n                }\n        }\n        }\n    };\n    \ncard.retry = {\n        \"id\": \"retry_new\",\n        \"display\": \"Retry Initial Sync\",\n        \"icon\": \"ARROW\",\n        \"buttonLook\":\"FILLED\",\n        \"type\": \"DIRECT_LINK\",\n        \"request\": {\n            \"type\": \"ON_CLICK_DEFAULT_ACTION\",\n            \"apiEndPoint\": {\n                \"apiUrl\": cloudElementsUrl+\"/pipedrive/initialSyncRun\",\n                \"type\": \"GET\",\n                \"headers\": {\n                    \"Elements-Formula-Instance-Id\": initialSyncRun_instance\n                },\n                \"input\":{\n                    \"integrationName\": steps.InputParams.params.input.integrationName,\n                    \"siteDomain\": steps.InputParams.params.input.siteDomain,\n                    \"retry\": \"true\",\n                    \"initialSync\": \"true\",\n                    \"action\": \"click\"\n                }\n            }\n        }\n    };\n\nif(steps.TpData.errorLog.length === 0){\n  card.proceed.popUp.description = \"All your customer and subscription data will be synced\";\n}\n\ndone({\n  statusCode: 200,\n  result: card\n})"}},{"id":226213,"onSuccess":["updateTpConfigParams_4"],"onFailure":[],"name":"newInstanceCreatedInfo","type":"script","properties":{"body":"done({\n  id: steps.createFormulaInstance.response.body.id\n});"}},{"id":223158,"onSuccess":["triggerSyncParams"],"onFailure":["hasNoExecution"],"name":"noSyncDetailsPresent","type":"filter","properties":{"body":"if(steps.lastSyncDetails.response.code === 409){\n  done(true);\n}else{\n  done(false);\n}"}},{"id":215821,"onSuccess":["sendProcessCard"],"onFailure":["sendProcessingCard_retry"],"name":"notRetry","type":"filter","properties":{"body":"// if(steps.ChargebeeConfigParams.response.body.third_party_configuration.config_json.cloudElements.chargebee.s3link !== undefined){\n//   done(false);\n// }\n\nif(steps.InputParams.params.input.retry ===\"true\"){\n  done(false);\n}\n\ndone(true);\n\n  \n"}},{"id":215822,"onSuccess":["sendProcessCard"],"onFailure":["sendProcessingCard_retry"],"name":"notRetry_1","type":"filter","properties":{"body":"if(steps.InputParams.params.input.retry===\"true\"){\n  done(false);\n}\n\ndone(true);"}},{"id":215823,"onSuccess":["updateSyncStatus_Running"],"onFailure":[],"name":"runningSyncParams","type":"script","properties":{"body":"let payload = {\n  error : false,\n  done: false,\n  url : \"https://\"+steps.InputParams.params.input.siteName+\".\"+steps.InputParams.params.input.siteDomain+\"/api/v2/third_party_sync_details/\" +steps.createNewSyncDetails.response.body.third_party_sync_detail.id,\n  auth: {\n    Authorization: \"Basic \" + CE.b64(steps.InputParams.params.input.apiKey + \":\" + \"\")\n  },\n  body: steps.createNewSyncDetails.response.body.third_party_sync_detail,\n};\n\npayload.body.status = \"running\";\n\ndone({\n  payload: payload\n});"}},{"id":215824,"onSuccess":[],"onFailure":[],"name":"sendErrorCard","type":"script","properties":{"body":"let cloudElementsUrl = steps.EnvProps.cloudElementsUrl;\nlet card;\n\ncard = {\n    \"cards\": [{\n        \"id\": \"check2\",\n        \"card\": {\n            \"type\": \"ACTION\",\n            \"heading\": \"Error: Sync Failed\",\n            \"listContent\": [\n                \"Something went wrong. Please try again.\"\n            ],\n            \"icon\": \"DANGER\"\n          \n        }\n    }],\n    \"retry\": {\n      \"buttonLook\": \"FILLED\",\n      \"display\": \"Retry Initial Sync\",\n      \"icon\": \"ARROW\",\n      \"id\": \"retry\",\n      \"request\": {\n        \"apiEndPoint\": {\n          \"apiUrl\": cloudElementsUrl+\"/pipedrive/initialSyncRun\",\n          \"headers\": {\n            \"Elements-Formula-Instance-Id\": info.formulaInstanceId\n          },\n          \"input\": {\n            \"action\": \"click\",\n            \"retry\": \"true\",\n            \"siteDomain\": steps.InputParams.params.input.siteDomain,\n            \"integrationName\": steps.InputParams.params.input.integrationName,\n            \"initialSync\": \"true\"\n          },\n          \"type\": \"GET\"\n        },\n        \"type\": \"ON_CLICK_DEFAULT_ACTION\"\n      },\n      \"type\": \"DIRECT_LINK\"\n    }\n};\n\ndone({\n  statusCode: 200,\n  result: card\n});"}},{"id":215825,"onSuccess":["sendErrorCard"],"onFailure":[],"name":"sendErrorMail","type":"httpRequest","properties":{"method":"POST","query":"${steps.InputParams.sendErrorMailParams.query}","headers":"${steps.InputParams.sendErrorMailParams.headers}","url":"${steps.InputParams.sendErrorMailParams.url}"}},{"id":215826,"onSuccess":[],"onFailure":[],"name":"sendFailedCard","type":"script","properties":{"body":"let cloudElementsUrl = steps.EnvProps.cloudElementsUrl;\n\nlet initialSyncRun_instance = steps.getTpConfig_2.response.body.third_party_configuration.config_json.cloudElements.formulas.formula_InitialSyncRun.instance || null;\n\n\nlet card = {\n  \"cards\": [{\n      \"id\": \"check2\",\n      \"card\": {\n          \"type\": \"ACTION\",\n          \"heading\": \"Error\",\n          \"listContent\": [\n              \"Initial Sync Failed. Failed to Start Sync\"\n          ],\n          \"icon\": \"DANGER\"\n        \n      }\n  }]\n};\n\ncard.retry = {\n        \"id\": \"retry\",\n        \"display\": \"Retry Initial Sync\",\n        \"icon\": \"ARROW\",\n        \"buttonLook\":\"FILLED\",\n        \"type\": \"DIRECT_LINK\",\n        \"request\": {\n            \"type\": \"ON_CLICK_DEFAULT_ACTION\",\n            \"apiEndPoint\": {\n                \"apiUrl\": cloudElementsUrl+\"/pipedrive/initialSyncRun\",\n                \"type\": \"GET\",\n                \"headers\": {\n                    \"Elements-Formula-Instance-Id\": initialSyncRun_instance\n                },\n                \"input\":{\n                    \"integrationName\": steps.InputParams.params.input.integrationName,\n                    \"siteDomain\": steps.InputParams.params.input.siteDomain,\n                    \"retry\": \"true\",\n                    \"action\": \"click\"\n                }\n            }\n        }\n    };\n\n\ndone({\n  statusCode: 200,\n  result: card\n});\n"}},{"id":215827,"onSuccess":[],"onFailure":[],"name":"sendLastSyncDetails","type":"script","properties":{"body":"// let error=JSON.parse(steps.getLogs.response.body[0].value)[0];\n// let success=JSON.parse(steps.getLogs.response.body[0].value)[1];\n\nlet cloudElementsUrl = steps.EnvProps.cloudElementsUrl;\n\nlet initialSyncRun_instance = steps.getTpConfig_2.response.body.third_party_configuration.config_json.cloudElements.formulas.formula_InitialSyncRun.instance || null;\n\nlet fullSyncRun_instance = steps.getTpConfig_2.response.body.third_party_configuration.config_json.cloudElements.formulas.formula_FullSyncRun.instance || null;\n\n// let fullSyncProcessingCard_instance = steps.getTpConfig_2.response.body.third_party_configuration.config_json.cloudElements.formulas.formula_FullSyncProcessCard.instance || null;\n\n\n\n// let card = steps.getTpConfig_2.response.body.third_party_configuration.config_json.cloudElements.formulas.formula_InitialSyncRun.lastSyncDetails || null;\n\n// if(card === null){\n//   card = {\n//     \"cards\": [{\n//         \"id\": \"check2\",\n//         \"card\": {\n//             \"type\": \"ACTION\",\n//             \"heading\": \"Error\",\n//             \"listContent\": [\n//                 \"Last attempt for Initial Sync failed. Please retry to continue\"\n//             ],\n//             \"icon\": \"WARNING\"\n          \n//         }\n//     }]\n//   };\n// }\n\nlet error = steps.ConstructLogRecord.errorLog;\nlet success = steps.ConstructLogRecord.successLog;\n\nlet card = {\n   \"cards\":[]\n};\n\nif(success.length > 0){\n  let successCard = {\n         \"card\": {\n            \"type\" : \"ACTION\",\n            \"heading\" :success.length+\" out of \"+(error.length+success.length)+\" records synced successfully\",\n            \"listContent\":success,\n            \"icon\" : \"SUCCESS\"         \n         },\n         \"id\" : \"check2\",\n         \"isCardDone\":\"true\"\n      };\n  card.cards.push(successCard);\n}\n\nif(error.length > 0){\n  let errorCard = {\n         \"card\": {\n            \"type\" : \"ACTION\",\n            \"heading\" : error.length+\" out of \"+(error.length+success.length)+\" records could not be synced\",\n            \"subHeading\" : \"You could fix these errors and retry sync. Or you could go ahead and sync all records. We recommend that you fix these errors and retry sync.\",\n            \"listContent\":error,\n            \"icon\" : \"ERROR\"         \n         },\n         \"id\" : \"check3\",\n         \"isCardDone\":\"true\"\n      };\n  card.cards.push(errorCard);\n}\nif(card.cards.length === 0){\n  card.cards.push({\n        \"card\": {\n            \"type\": \"ACTION\",\n            \"heading\": \"We'll run an Initial sync\",\n            \"subHeading\":\"We'll sync your first 10 customers and their subscriptions to Pipedrive. After initial sync, we recommend that you verify the data synced to Pipedrive.\",\n            \"buttons\": [{\n                \"id\": \"direct\",\n                \"display\": \"Run Initial Sync\",\n                \"icon\": \"ARROW\",\n                \"type\": \"DIRECT_LINK\",\n                \"buttonLook\":\"FILLED\",\n                \"request\": {\n                    \"type\": \"ON_CLICK_GET_CARD\",\n                    \"apiEndPoint\": {\n                        \"apiUrl\": cloudElementsUrl+\"/initialsync/run\",\n                        \"type\": \"GET\",\n                        \"headers\": {\n                            \"Elements-Formula-Instance-Id\": initialSyncRun_instance\n                        },\n                        \"input\":{\n                            \"integrationName\": steps.InputParams.input.integrationName,\n                            \"siteDomain\": steps.InputParams.input.siteDomain,\n                            \"initialSync\": \"true\",\n                            \"action\": \"click\"\n                        }\n                    }\n                }\n            }]\n        },\n        \"id\": \"check2\",\n        \"showRetry\": \"false\"\n    });\n}\n\ncard.proceed = {\n        \"id\": \"proceed\",\n        \"display\": \"Sync All Records\",\n        \"icon\": \"ARROW\",\n        \"type\": \"POP_UP\",\n        \"popUp\": {\n            \"type\": \"SIMPLE\",\n            \"title\": \"Are you sure you want to ignore the errors and sync all records?\",\n            \"usecase\":\"DANGER\",\n            \"submitButton\": \"Yes, go ahead\",\n            \"cancelButton\": \"Dismiss\",\n            \"description\": \"All your customer and subscription data will be synced. You can fix the errors, if any, sync the data again, later.\",\n              \"apiEndPoint\": {\n            \"apiUrl\": cloudElementsUrl+\"/pipedrive/fullSyncRun\",\n        \"headers\": {\n          \"Elements-Formula-Instance-Id\": fullSyncRun_instance\n        },\n        \"input\": {\n          \"apiKey\": steps.InputParams.params.input.apiKey,\n          \"siteDomain\": steps.InputParams.params.input.siteDomain,\n          \"siteName\": steps.InputParams.params.input.siteName,\n          \"syncNow\": \"syncNow\",\n          \"integrationName\": steps.InputParams.params.input.integrationName\n        },\n        \"type\": \"GET\"\n      }\n      \n        }\n    };\n\ncard.retry = {\n        \"id\": \"retry\",\n        \"display\": \"Retry Initial Sync\",\n        \"icon\": \"ARROW\",\n        \"buttonLook\":\"FILLED\",\n        \"type\": \"DIRECT_LINK\",\n        \"request\": {\n            \"type\": \"ON_CLICK_DEFAULT_ACTION\",\n            \"apiEndPoint\": {\n                \"apiUrl\": cloudElementsUrl+\"/pipedrive/initialSyncRun\",\n                \"type\": \"GET\",\n                \"headers\": {\n                    \"Elements-Formula-Instance-Id\": initialSyncRun_instance\n                },\n                \"input\":{\n                    \"integrationName\": steps.InputParams.params.input.integrationName,\n                    \"siteDomain\": steps.InputParams.params.input.siteDomain,\n                    \"retry\": \"true\",\n                    \"action\": \"click\"\n                }\n            }\n        }\n    };\n    \nif(steps.getTpConfig_2.response.body.third_party_configuration.config_json.cloudElements.formulas.formula_InitialSyncRun.errorRecord === 0){\n  card.proceed.popUp.description = \"All your customer and subscription data will be synced\";\n}\n\ndone({\n  statusCode: 200,\n  result: card\n})"}},{"id":228923,"onSuccess":[],"onFailure":[],"name":"sendNoticeAlreadyExecutionExist","type":"script","properties":{"body":"let card = {\n \"status\": \"error\",\n \"notice\" : \"A sync is already running. Please try again later\"\n};\n\ndone({\n  statusCode: 200,\n  result: card\n});"}},{"id":215828,"onSuccess":[],"onFailure":[],"name":"sendProcessCard","type":"script","properties":{"body":"let cloudElementsUrl = steps.EnvProps.cloudElementsUrl;\n\n// let initialSyncRun_instance = steps.getTpConfig_2.response.body.third_party_configuration.config_json.cloudElements.formulas.formula_InitialSyncRun.instance;\n\nlet initialSyncRun_instance = info.formulaInstanceId;\n\nlet fullSyncRun_instance = steps.getTpConfig_2.response.body.third_party_configuration.config_json.cloudElements.formulas.formula_FullSyncRun.instance;\n\nlet card = {\n   \"cards\":[\n      {\n         \"card\": {\n            \"type\" : \"PROCESSING\",\n            \"processingText\": \" Syncing first 10 customers and their subscriptions\",\n            \"request\" : {\n               \"type\":\"DOC_READY_GET_CARD\",\n               \"apiEndPoint\":{\n                  \"apiUrl\": cloudElementsUrl+\"/pipedrive/initialSyncRun\",\n                        \"type\": \"GET\",\n                        \"headers\": {\n                            \"Elements-Formula-Instance-Id\": initialSyncRun_instance\n                        },\n                        \"input\":{\n                            \"integrationName\": steps.InputParams.params.input.integrationName,\n                            \"siteDomain\": steps.InputParams.params.input.siteDomain,\n                            \"action\": \"default\"\n                        }\n               }\n            }\n         },\n         \"id\" : \"check2\",\n      } \n   ],\n   \"proceed\": {\n        \"id\": \"proceed\",\n        \"display\": \"Sync All Records\",\n        \"icon\": \"ARROW\",\n        \"type\": \"POP_UP\",\n        \"popUp\": {\n            \"type\": \"SIMPLE\",\n            \"title\": \"Are you sure you want to ignore the errors and sync all records?\",\n            \"usecase\":\"DANGER\",\n            \"submitButton\": \"Yes, go ahead\",\n            \"cancelButton\": \"Dismiss\",\n            \"description\": \"All your customer and subscription data will be synced. You can fix the errors, if any, sync the data again, later.\",\n            \"apiEndPoint\": {\n                \"apiUrl\": cloudElementsUrl+\"/pipedrive/fullSyncRun\",\n                \"type\": \"GET\",\n                \"headers\": {\n                    \"Elements-Formula-Instance-Id\": fullSyncRun_instance\n                },\n               \"input\": {\n                      \"apiKey\": steps.InputParams.params.input.apiKey,\n                      \"siteName\": steps.InputParams.params.input.siteName,\n                      \"integrationName\": steps.InputParams.params.input.integrationName,\n                      \"siteDomain\": steps.InputParams.params.input.siteDomain,\n                      \"syncNow\": \"syncNow\"\n                }\n            }\n        }\n    },\n    \"retry\": {\n      \"buttonLook\": \"FILLED\",\n      \"display\": \"Retry Initial Sync\",\n      \"icon\": \"ARROW\",\n      \"id\": \"retry\",\n     \n      \"request\": {\n        \"apiEndPoint\": {\n          \"apiUrl\": cloudElementsUrl+\"/pipedrive/initialSyncRun\",\n          \"headers\": {\n            \"Elements-Formula-Instance-Id\": initialSyncRun_instance\n          },\n          \"input\": {\n            \"action\": \"click\",\n            \"retry\": \"true\",\n            \"siteDomain\": steps.InputParams.params.input.siteDomain,\n            \"integrationName\": steps.InputParams.params.input.integrationName,\n            \"initialSync\": \"true\"\n          },\n          \"type\": \"GET\"\n        },\n        \"type\": \"ON_CLICK_DEFAULT_ACTION\"\n      },\n      \"type\": \"DIRECT_LINK\"\n    }\n};\n\ndone({\n statusCode: 200,\n result: card\n})"}},{"id":226217,"onSuccess":[],"onFailure":[],"name":"sendProcessCard_instanceCreation","type":"script","properties":{"body":"let cloudElementsUrl = steps.EnvProps.cloudElementsUrl;\n\nlet initialSyncRun_instance = info.formulaInstanceId;\n\nlet fullSyncRun_instance = steps.getTpConfig.response.body.third_party_configuration.config_json.cloudElements.formulas.formula_FullSyncRun.instance;\n\nlet card = {\n   \"cards\":[\n      {\n         \"card\": {\n            \"type\" : \"PROCESSING\",\n            \"processingText\": \" Please wait....\",\n            \"request\" : {\n               \"type\":\"DOC_READY_GET_CARD\",\n               \"apiEndPoint\":{\n                  \"apiUrl\": cloudElementsUrl+\"/pipedrive/initialSyncRun\",\n                        \"type\": \"GET\",\n                        \"headers\": {\n                            \"Elements-Formula-Instance-Id\": initialSyncRun_instance\n                        },\n                        \"input\":{\n                            \"integrationName\": steps.InputParams.params.input.integrationName,\n                            \"siteDomain\": steps.InputParams.params.input.siteDomain,\n                            \"action\": \"default\"\n                        }\n               }\n            }\n         },\n         \"id\" : \"check2\",\n      } \n   ],\n   \"proceed\": {\n        \"id\": \"proceed\",\n        \"display\": \"Sync All Records\",\n        \"icon\": \"ARROW\",\n        \"type\": \"POP_UP\",\n        \"popUp\": {\n            \"type\": \"SIMPLE\",\n            \"title\": \"Are you sure you want to ignore the errors and sync all records?\",\n            \"usecase\":\"DANGER\",\n            \"submitButton\": \"Yes, go ahead\",\n            \"cancelButton\": \"Dismiss\",\n            \"description\": \"All your customer and subscription data will be synced. You can fix the errors, if any, sync the data again, later.\",\n            \"apiEndPoint\": {\n                \"apiUrl\": cloudElementsUrl+\"/pipedrive/fullSyncRun\",\n                \"type\": \"GET\",\n                \"headers\": {\n                    \"Elements-Formula-Instance-Id\": fullSyncRun_instance\n                },\n               \"input\": {\n                      \"apiKey\": steps.InputParams.params.input.apiKey,\n                      \"siteName\": steps.InputParams.params.input.siteName,\n                      \"integrationName\": steps.InputParams.params.input.integrationName,\n                      \"siteDomain\": steps.InputParams.params.input.siteDomain,\n                      \"syncNow\": \"syncNow\"\n                }\n            }\n        }\n    },\n    \"retry\": {\n      \"buttonLook\": \"FILLED\",\n      \"display\": \"Retry Initial Sync\",\n      \"icon\": \"ARROW\",\n      \"id\": \"retry\",\n     \n      \"request\": {\n        \"apiEndPoint\": {\n          \"apiUrl\": cloudElementsUrl+\"/pipedrive/initialSyncRun\",\n          \"headers\": {\n            \"Elements-Formula-Instance-Id\": initialSyncRun_instance\n          },\n          \"input\": {\n            \"action\": \"click\",\n            \"retry\": \"true\",\n            \"siteDomain\": steps.InputParams.params.input.siteDomain,\n            \"integrationName\": steps.InputParams.params.input.integrationName,\n            \"initialSync\": \"true\"\n          },\n          \"type\": \"GET\"\n        },\n        \"type\": \"ON_CLICK_DEFAULT_ACTION\"\n      },\n      \"type\": \"DIRECT_LINK\"\n    }\n};\n\ndone({\n statusCode: 200,\n result: card\n});"}},{"id":215829,"onSuccess":[],"onFailure":[],"name":"sendProcessingCard_retry","type":"script","properties":{"body":"let cloudElementsUrl = steps.EnvProps.cloudElementsUrl;\n\n// let initialSyncRun_instance = steps.getTpConfig_2.response.body.third_party_configuration.config_json.cloudElements.formulas.formula_InitialSyncRun.instance;\n\nlet initialSyncRun_instance = info.formulaInstanceId;\n\nlet fullSyncRun_instance = steps.getTpConfig_2.response.body.third_party_configuration.config_json.cloudElements.formulas.formula_FullSyncRun.instance;\n\nlet card = {\n    \"cards\": [\n      {\n         \"card\": {\n            \"type\" : \"PROCESSING\",\n            \"processingText\": \" Retry Syncing first 10 customers and their subscriptions\",\n            \"request\" : {\n               \"type\":\"DOC_READY_GET_CARD\",\n               \"apiEndPoint\":{\n                  \"apiUrl\": cloudElementsUrl+\"/pipedrive/initialSyncRun\",\n                        \"type\": \"GET\",\n                        \"headers\": {\n                            \"Elements-Formula-Instance-Id\": initialSyncRun_instance\n                        },\n                        \"input\":{\n                            \"integrationName\": steps.InputParams.params.input.integrationName,\n                            \"siteDomain\": steps.InputParams.params.input.siteDomain,\n                            \"action\": \"default\",\n                            \"retry\": \"true\"\n                        }\n               }\n            }\n         },\n         \"id\" : \"check2\",\n         \"showRetry\":\"false\"\n      } \n   ],\n    \"proceed\": {\n        \"id\": \"proceed\",\n        \"display\": \"Sync All Records\",\n        \"icon\": \"ARROW\",\n        \"type\": \"POP_UP\",\n        \"popUp\": {\n            \"type\": \"SIMPLE\",\n            \"title\": \"Are you sure you want to ignore the errors and sync all records?\",\n            \"usecase\":\"DANGER\",\n            \"submitButton\": \"Yes, go ahead\",\n            \"cancelButton\": \"Dismiss\",\n            \"description\": \"All your customer and subscription data will be synced. You can fix the errors, if any, sync the data again, later.\",\n            \"apiEndPoint\": {\n                \"apiUrl\": cloudElementsUrl+\"/pipedrive/fullSyncRun\",\n                \"type\": \"GET\",\n                \"headers\": {\n                    \"Elements-Formula-Instance-Id\": fullSyncRun_instance\n                },\n               \"input\": {\n                      \"apiKey\": steps.InputParams.params.input.apiKey,\n                      \"siteName\": steps.InputParams.params.input.siteName,\n                      \"integrationName\": steps.InputParams.params.input.integrationName,\n                      \"siteDomain\": steps.InputParams.params.input.siteDomain,\n                      \"syncNow\": \"syncNow\"\n                }\n            }\n        }\n    },\n    \"retry\": {\n      \"buttonLook\": \"FILLED\",\n      \"display\": \"Retry Initial Sync\",\n      \"icon\": \"ARROW\",\n      \"id\": \"retry\",\n     \n      \"request\": {\n        \"apiEndPoint\": {\n          \"apiUrl\": cloudElementsUrl+\"/pipedrive/initialSyncRun\",\n          \"headers\": {\n            \"Elements-Formula-Instance-Id\": initialSyncRun_instance\n          },\n          \"input\": {\n            \"action\": \"click\",\n            \"retry\": \"true\",\n            \"siteDomain\": steps.InputParams.params.input.siteDomain,\n            \"integrationName\": steps.InputParams.params.input.integrationName,\n            \"initialSync\": \"true\"\n          },\n          \"type\": \"GET\"\n        },\n        \"type\": \"ON_CLICK_DEFAULT_ACTION\"\n      },\n      \"type\": \"DIRECT_LINK\"\n    }\n};\n\n\ndone({\n    statusCode: 200,\n    result: card\n})"}},{"id":215830,"onSuccess":[],"onFailure":[],"name":"sendSyncSetupCard","type":"script","properties":{"body":"let cloudElementsUrl = steps.EnvProps.cloudElementsUrl;\n\nlet initialSync_instanceId = steps.getTpConfig.response.body.third_party_configuration.config_json.cloudElements.formulas.formula_InitialSyncRun.instance;\n\nlet fullSyncRun_instance = steps.getTpConfig.response.body.third_party_configuration.config_json.cloudElements.formulas.formula_FullSyncRun.instance || null;\n\nlet card = {\n  \"cards\" : [\n    {\n      \"card\": {\n        \"type\" : \"ACTION\",\n        \"heading\" : \"We'll run an Initial sync\",\n        \"subHeading\" : \"We'll sync your first 10 customers and their subscriptions to Pipedrive. After initial sync, we recommend that you verify the data synced to Pipedrive.\",\n        \"buttons\" :[\n          {\n            \"id\":\"direct\",\n            \"display\" : \"Run Initial Sync\",\n            \"icon\" : \"ARROW\",\n            \"type\" : \"DIRECT_LINK\",\n            \"buttonLook\":\"FILLED\",\n            \"request\":{\n              \"type\":\"ON_CLICK_GET_CARD\",\n              \"apiEndPoint\": {\n                \"apiUrl\": cloudElementsUrl+\"/pipedrive/initialSyncRun\",\n                \"type\": \"GET\",\n                \"headers\": {\n                    \"Elements-Formula-Instance-Id\": initialSync_instanceId\n                },\n                \"input\":{\n                  \"action\": \"click\",\n                  \"initialSync\": \"true\",\n                  \"siteDomain\": steps.InputParams.params.input.siteDomain,\n                  \"integrationName\": steps.InputParams.params.input.integrationName\n                }\n              }\n            }\n          }\n        ]\n      },\n      \"id\" : \"check2\",\n      \"showRetry\":\"false\"\n    }\n  ],\n  \"proceed\":{\n    \"id\":\"proceed\",\n    \"display\" : \"Sync all records\",\n    \"icon\" : \"ARROW\",\n    \"type\" : \"POP_UP\",\n    \"popUp\":{\n      \"type\":\"SIMPLE\",\n      \"title\":\"Are you sure you want to ignore the errors and sync all records?\",\n      \"usecase\":\"DANGER\",\n      \"submitButton\":\"Yes, go ahead\",\n      \"cancelButton\":\"Dismiss\",\n      \"description\":\"All your customer and subscription data will be synced with Pipedrive. You can fix the errors, if any, sync the data again, later.\",\n      \"apiEndPoint\":{\n        \"apiUrl\":cloudElementsUrl+\"/pipedrive/initialSyncRun\",\n        \"type\":\"GET\",\n        \"headers\": {\n            \"Elements-Formula-Instance-Id\": initialSync_instanceId\n        },\n        \"input\":{\n          \"apiKey\": steps.InputParams.params.input.apiKey,\n          \"siteDomain\": steps.InputParams.params.input.siteDomain,\n          \"siteName\": steps.InputParams.params.input.siteName,\n          \"syncNow\": \"syncNow\",\n          \"integrationName\": steps.InputParams.params.input.integrationName\n        }\n      }\n    }\n  },\n  \"retry\":{\n    \"id\":\"retry\",\n    \"display\" : \"Retry Initial Sync\",\n    \"icon\" : \"ARROW\",\n    \"buttonLook\":\"FILLED\",\n    \"type\" : \"DIRECT_LINK\",\n    \"request\":{\n      \"type\":\"ON_CLICK_DEFAULT_ACTION\",\n      \"apiEndPoint\": {\n        \"apiUrl\": cloudElementsUrl+\"/pipedrive/initialSyncRun\",\n        \"type\": \"GET\",\n        \"headers\": {\n            \"Elements-Formula-Instance-Id\": initialSync_instanceId\n        },\n        \"input\":{\n          \"action\": \"click\",\n          \"initialSync\": \"true\",\n          \"retry\": \"true\",\n          \"siteDomain\": steps.InputParams.params.input.siteDomain,\n          \"integrationName\": steps.InputParams.params.input.integrationName\n        }\n      }\n    }\n  }\n};\n\ndone({\n  statusCode: 200,\n  result: card\n});"}},{"id":215831,"onSuccess":["isSyncStarted"],"onFailure":["sendErrorMail"],"name":"startExecution","type":"request","properties":{"method":"POST","body":"${steps.triggerSyncParams.dispatcherTrigger.body}","api":"${steps.triggerSyncParams.dispatcherTrigger.url}"}},{"id":215832,"onSuccess":["triggerSyncParams"],"onFailure":["GetThirdPartyConfigParams"],"name":"syncAgain","type":"filter","properties":{"body":"\nif(steps.InputParams.params.input.action ===\"click\"){\n  done(true);\n}\n\nif((steps.InputParams.params.input.retry === \"true\") && (steps.InputParams.params.input.initialSync === \"true\")){\n  done(true);\n  // if(steps.ChargebeeConfigParams.response.body.third_party_configuration.config_json.cloudElements.chargebee.s3link === undefined){\n  // done(true);\n  // }else{\n  //   done(false);\n  // }\n}else{\n  done(false);\n}"}},{"id":231188,"onSuccess":["updateTpConfig_2"],"onFailure":[],"name":"TpData","type":"script","properties":{"body":"let list = steps.GetTPMapping1.response.body.list;\nlet successLog = [];\nlet errorLog = [];\nlet company_domain = steps.getTpConfig.response.body.third_party_configuration.config_json.cloudElements.thirdParty.company_domain;\nif (list === undefined) {\n    list = [];\n}\n\nfor (var i = 0; i < list.length; i++) {\n    let tp = list[i].third_party_entity_mapping;\n    if (tp !== undefined) {\n        if (tp.status === \"synced\") {\n            let id = tp.entity_id;\n            let pipedrive_id = tp.third_party_entity_id;\n            let pipedrive_data_url = \"https://\" + company_domain + \".pipedrive.com/person/\" + pipedrive_id;\n            let pipedrive_link = \"<a href='\" + pipedrive_data_url + \"' target=\\\"blank\\\">\" + pipedrive_id + \"</a>\";\n\n            let chargebee_data_url = \"https://\" + steps.InputParams.params.input.siteName + \".\" + steps.InputParams.params.input.siteDomain + \"/admin-console/customers/\" + id;\n            let cb_link = \"<a href='\" + chargebee_data_url + \"' target='blank'>\" + id + \"</a>\";\n            successLog.push(\"Customer id \" + cb_link + \" is synced as \" + pipedrive_link + \" in Pipedrive\\n\");\n        } else if (tp.status === \"update_failed\") {\n            errorLog.push(tp.error_message);\n        }\n    }\n}\n\nlet data = {\n    successLog: successLog,\n    errorLog: errorLog,\n};\ndone(data);\n\n\n"}},{"id":231181,"onSuccess":["GetTPMapping1"],"onFailure":[],"name":"TPMappingParam","type":"script","properties":{"body":"let apiKey = steps.InputParams.params.input.apiKey;\nlet siteName = steps.InputParams.params.input.siteName;\nlet siteDomain = steps.InputParams.params.input.siteDomain;\nlet type =  steps.InputParams.params.input.integrationName;\n\nlet password = \"\";\nlet startTime;\nlet syncStaus = steps.getLatestSyncDetails.response.body.third_party_sync_detail;\nlet formula = steps.getTpConfig.response.body.third_party_configuration.config_json.cloudElements;\n\nstartTime = syncStaus.context.syncData.syncStart;\n\n  \nlet params = {\n        config: {\n            url: \"https://\" + siteName + \".\" + siteDomain + \"/api/v2/third_party_entity_mappings/list_all\",\n            auth: {\n                Authorization: \"Basic \" + CE.b64(apiKey + \":\" + password)\n            },\n            query: {\n                integration_name: type,\n                \"modified_at[after]\": startTime,\n                limit: 10\n            }\n        }\n};\n\ndone({ params: params });\n"}},{"id":231212,"onSuccess":["GetTPSuccessDetails"],"onFailure":[],"name":"TPSuccessDetailsParam","type":"script","properties":{"body":"let params = steps.GetThirdPartyConfigParams.params.input;\nparams.config.query['status[is]'] = \"synced\";\n\ndone({params: params});"}},{"id":215833,"onSuccess":["startExecution"],"onFailure":["sendErrorMail"],"name":"triggerSyncParams","type":"script","properties":{"body":"// let syncCustomersRules_inputs = steps.getTpConfig_2.response.body.third_party_configuration.config_json.cloudElements.syncRulesContacts;\n\n// let syncRulesDeals_inputs = steps.getTpConfig_2.response.body.third_party_configuration.config_json.cloudElements.syncRulesDeals;\n// //Rules for SUbscription and Invoice\n\n// let syncCustomersParam = {\n//   url: \"/formulas/instances/\"+steps.getTpConfig_2.response.body.third_party_configuration.config_json.cloudElements.formulas.formula_SyncCustomers.instance+\"/executions\",\n//   body:{\n//     apiKey: steps.InputParams.params.inputs.apiKey,\n//     siteName: steps.InputParams.params.inputs.siteName,\n//     siteDomain: steps.InputParams.params.inputs.siteDomain,\n//     integrationName: steps.InputParams.params.inputs.integrationName,\n//     syncRules: syncCustomersRules_inputs\n//   }\n// };\n\n// let syncSubscriptionsParam = {\n//   url: \"/formulas/instances/\"+steps.getTpConfig_2.response.body.third_party_configuration.config_json.cloudElements.formulas.formula_SyncSubscription.instance+\"/executions\",\n//   body:{\n//     apiKey: steps.InputParams.params.inputs.apiKey,\n//     siteName: steps.InputParams.params.inputs.siteName,\n//     siteDomain: steps.InputParams.params.inputs.siteDomain,\n//     integrationName: steps.InputParams.params.inputs.integrationName,\n//     syncRules: syncRulesDeals_inputs\n//   }\n// };\n\n// let syncInvoicesParam = {\n//   url: \"/formulas/instances/\"+steps.getTpConfig_2.response.body.third_party_configuration.config_json.cloudElements.formulas.formula_SyncInvoice.instance+\"/executions\",\n//   body:{\n//     apiKey: steps.InputParams.params.inputs.apiKey,\n//     siteName: steps.InputParams.params.inputs.siteName,\n//     siteDomain: steps.InputParams.params.inputs.siteDomain,\n//     integrationName: steps.InputParams.params.inputs.integrationName,\n//     syncRules: syncRulesDeals_inputs\n//   }\n// };\n\n// done({\n//   syncCustomersParam: syncCustomersParam,\n//   syncSubscriptionsParam: syncSubscriptionsParam,\n//   syncInvoicesParam: syncInvoicesParam\n// });\n\nlet dispatcherInstance = steps.getTpConfig_2.response.body.third_party_configuration.config_json.cloudElements.formulas.formula_SyncDispatcher.instance;\n\n\nlet dispatcherTrigger = {\n  url: \"/formulas/instances/\"+dispatcherInstance+\"/executions\",\n  body:{\n    apiKey: steps.InputParams.params.input.apiKey,\n    siteName: steps.InputParams.params.input.siteName,\n    siteDomain: steps.InputParams.params.input.siteDomain,\n    integrationName: steps.InputParams.params.input.integrationName,\n    initialSync: true\n  }\n};\n\ndone({\n  dispatcherTrigger: dispatcherTrigger\n});"}},{"id":215834,"onSuccess":["updateTpConfig_2"],"onFailure":["sendErrorMail"],"name":"updateStatus","type":"script","properties":{"body":"let card = JSON.parse(\"{\\\"cards\\\":\"+ steps.getResult.response.body[0].value+\"}\");\nlet input = steps.checkStatus.settings;\ninput.card = card;\n\n// let cardarray = card.cards;\n// let successRecord = 0;\n// let errorRecord = 0;\n// for(var i=0;i<cardarray.length;i++){\n//   if(cardarray[i]['card']['icon'] === \"SUCCESS\") {\n//     successRecord = cardarray[i]['card']['listContent'].length;\n//   }\n//   if(cardarray[i]['card']['icon'] === \"ERROR\") {\n//     errorRecord = cardarray[i]['card']['listContent'].length;\n//   }\n// }\n\n// let total = successRecord+errorRecord;\n\n// if(input.body.context === undefined) {\n//   input.body.context = {\n//   };\n// }\n// input.body.context.sync_context_messages = [ total +\" Customers processed (\"+successRecord+\" created, 0 updated, \"+errorRecord+\" not synced)\"];\n// input.body.context.initialSync = true;\n\ndone({\n  input: input\n});"}},{"id":215835,"onSuccess":["sendErrorMail"],"onFailure":[],"name":"updateSyncError","type":"httpRequest","properties":{"method":"POST","query":"${steps.checkStatus.settings.body}","retryAttempts":"5","headers":"${steps.checkStatus.settings.auth}","retryDelay":"200","url":"${steps.checkStatus.settings.url}","retry":"true"}},{"id":215836,"onSuccess":["sendFailedCard"],"onFailure":[],"name":"updateSyncStatus_Failed","type":"httpRequest","properties":{"method":"POST","query":"${steps.failedSyncParams.payload.body}","retryAttempts":"5","body":"","headers":"${steps.failedSyncParams.payload.auth}","retryDelay":"200","url":"${steps.failedSyncParams.payload.url}","retry":"true"}},{"id":215837,"onSuccess":["notRetry_1"],"onFailure":[],"name":"updateSyncStatus_Running","type":"httpRequest","properties":{"method":"POST","query":"${steps.runningSyncParams.payload.body}","retryAttempts":"5","headers":"${steps.runningSyncParams.payload.auth}","retryDelay":"200","url":"${steps.runningSyncParams.payload.url}","retry":"true"}},{"id":215838,"onSuccess":["updateTpConfig_2"],"onFailure":["sendErrorMail"],"name":"updateSyncSuccess","type":"httpRequest","properties":{"method":"POST","query":"${steps.updateStatus.input.body}","retryAttempts":"5","headers":"${steps.updateStatus.input.auth}","retryDelay":"200","url":"${steps.updateStatus.input.url}","retry":"true"}},{"id":215839,"onSuccess":["updateTpConfigRequest"],"onFailure":[],"name":"updateTpConfig","type":"script","properties":{"body":"let configJson = steps.getTpConfig.response.body.third_party_configuration.config_json;\nlet updateTpConfigParams = steps.InputParams.updateTpConfigParams;\n\nconfigJson.cloudElements.formulas.formula_InitialSyncRun.syncSetupStatus = \"CONFIGURED\";\n\nupdateTpConfigParams.body.config_json = configJson;\n\n\ndone({\n  updateTpConfigParams : updateTpConfigParams\n});"}},{"id":215840,"onSuccess":["updateTpConfigRequest_2"],"onFailure":["sendErrorMail"],"name":"updateTpConfig_2","type":"script","properties":{"body":"let configJson = steps.getTpConfig_2.response.body.third_party_configuration.config_json;\nlet updateTpConfigParams = steps.InputParams.updateTpConfigParams;\n\n// configJson.cloudElements.formulas.formula_InitialSyncRun.lastSyncDetails = steps.updateStatus.input.card;\n\nconfigJson.cloudElements.formulas.formula_InitialSyncRun.errorRecord = steps.TpData.errorLog.length;\n\nconfigJson.cloudElements.formulas.formula_InitialSyncRun.successRecord = steps.TpData.successLog.length;\n\nconfigJson.cloudElements.formulas.formula_InitialSyncRun.syncStatus = \"SUCCEEDED\";\n\nupdateTpConfigParams.body.config_json = configJson;\n\n\ndone({\n  updateTpConfigParams : updateTpConfigParams\n});"}},{"id":221833,"onSuccess":["updateTpConfigRequest_3"],"onFailure":[],"name":"updateTpConfig_3","type":"script","properties":{"body":"let configJson = steps.getTpConfig_2.response.body.third_party_configuration.config_json;\nlet updateTpConfigParams = steps.InputParams.updateTpConfigParams;\n\nconfigJson.cloudElements.formulas.formula_InitialSyncRun.syncStatus = \"RUNNING\";\nconfigJson.cloudElements.formulas.formula_InitialSyncRun.dispatcherExecutionId = steps.startExecution.response.body[0].id || null;\n\nupdateTpConfigParams.body.config_json = configJson;\n\n\ndone({\n  updateTpConfigParams : updateTpConfigParams\n});"}},{"id":226216,"onSuccess":["sendProcessCard_instanceCreation"],"onFailure":[],"name":"updateTpConfig_4","type":"httpRequest","properties":{"method":"POST","body":"${steps.updateTpConfigParams_4.tpConfigUpdateParams.body}","headers":"${steps.updateTpConfigParams_4.tpConfigUpdateParams.headers}","url":"${steps.updateTpConfigParams_4.tpConfigUpdateParams.url}"}},{"id":226214,"onSuccess":["updateTpConfig_4"],"onFailure":[],"name":"updateTpConfigParams_4","type":"script","properties":{"body":"let configJson = steps.getTpConfig.response.body.third_party_configuration.config_json;\n\nif(steps.isInstanceExist.continue === true){\n  configJson.cloudElements.formulas.formula_SyncDispatcher.instance = steps.checkInstanceExist.instanceInfo.id;\n}else{\n  configJson.cloudElements.formulas.formula_SyncDispatcher.instance = steps.newInstanceCreatedInfo.id;\n}\n\nlet tpConfigUpdateParams = steps.InputParams.updateTpConfigParams;\ntpConfigUpdateParams.body.config_json = configJson;\n\ndone({\n  tpConfigUpdateParams: tpConfigUpdateParams\n});"}},{"id":215841,"onSuccess":["getTpConfig_2"],"onFailure":["sendErrorMail"],"name":"updateTpConfigRequest","type":"httpRequest","properties":{"method":"POST","retryAttempts":"5","body":"${steps.updateTpConfig.updateTpConfigParams.body}","headers":"${steps.updateTpConfig.updateTpConfigParams.headers}","retryDelay":"200","url":"${steps.updateTpConfig.updateTpConfigParams.url}","retry":"true"}},{"id":215842,"onSuccess":["makeCard"],"onFailure":["sendErrorMail"],"name":"updateTpConfigRequest_2","type":"httpRequest","properties":{"method":"POST","retryAttempts":"5","body":"${steps.updateTpConfig_2.updateTpConfigParams.body}","headers":"${steps.updateTpConfig_2.updateTpConfigParams.headers}","retryDelay":"200","url":"${steps.updateTpConfig_2.updateTpConfigParams.url}","retry":"true"}},{"id":221933,"onSuccess":["notRetry_1"],"onFailure":[],"name":"updateTpConfigRequest_3","type":"httpRequest","properties":{"method":"POST","body":"${steps.updateTpConfig_3.updateTpConfigParams.body}","headers":"${steps.updateTpConfig_3.updateTpConfigParams.headers}","url":"${steps.updateTpConfig_3.updateTpConfigParams.url}"}}],"triggers":[{"id":26040,"onSuccess":["EnvProps"],"onFailure":[],"type":"manual","async":true,"name":"trigger","properties":{}}],"method":"GET","uri":"/pipedrive/initialSyncRun","engine":"v1","active":true,"debugLoggingEnabled":true,"singleThreaded":false,"api":"GET /pipedrive/initialSyncRun","configuration":[]}