{"id":30753,"name":"testing-pipedriveSyncCustomers_batching","userId":27893,"accountId":24428,"createdDate":"2019-10-17T06:25:33Z","steps":[{"id":235717,"onSuccess":["getParentCustomer_params"],"onFailure":["getOrgFieldsPipedrive_params"],"name":"anyRelationshipExist","type":"filter","properties":{"body":"if(steps.loopOverCustomers.entry.customer.relationship !== undefined){\n  done(true);\n}else{\n  done(false);\n}"}},{"id":235718,"onSuccess":[],"onFailure":[],"name":"ApiError","type":"script","properties":{"body":"let message = \"Error on Sync Customer Formula\";\n\nif((steps.searchPersonPipedrive !== undefined) && (steps.searchPersonPipedrive.response.code !== 200)){\n  message = \"SearchPersonPipedrive API Failed\";\n}\n\nif((steps.createPersonInPipedrive !== undefined) && (steps.createPersonInPipedrive.response.code !== 200)){\n  message = \"createPersonInPipedrive API Failed\";\n}\n\nif((steps.fetchCustomerWithoutOrg !== undefined) && (steps.fetchCustomerWithoutOrg.response.code !== 200)){\n  message = \"fetchCustomerWithoutOrg API Failed\";\n}\n\nif((steps.fetchDetailedInfoCustomer !== undefined) && (steps.fetchDetailedInfoCustomer.response.code !== 200)){\n  message = \"fetchDetailedInfoCustomer API Failed\";\n}\n\nif((steps.updatePipedriveCustomer !== undefined) && (steps.updatePipedriveCustomer.response.code !== 200)){\n  message = \"updatePipedriveCustomer API Failed\";\n}\n\nif((steps.fetchOrganizationByName !== undefined) && (steps.fetchOrganizationByName.response.code !== 200)){\n  message = \"fetchOrganizationByName API Failed\";\n}\n\n//\n\nif((steps.updateTpEntity_1 !== undefined) && (steps.updateTpEntity_1\n.response.code !== 200)){\n  message = \"updateTpEntit API Failed\";\n}\n\nif((steps.updateTpEntity_2 !== undefined) && (steps.updateTpEntity_2.response.code !== 200)){\n  message = \"updateTpEntit API Failed\";\n}\n\nif((steps.requestNewPipedriveToken !== undefined) && (steps.requestNewPipedriveToken.response.code !== 200)){\n  message = \"requestNewPipedriveToken API Failed\";\n}\n\nif((steps.updateTpConfig_2 !== undefined) && (steps.updateTpConfig_2.response.code !== 200)){\n  message = \"updateTpEntity API Failed\";\n}\n\nif((steps.GetThirdPartyMappingDetails !== undefined) && (steps.GetThirdPartyMappingDetails.response.code !== 200)){\n  message = \"GetThirdPartyMapping API Failed\";\n}\n//\n\nif((steps.GetError !== undefined) && (steps.GetError.response.code !== 200)){\n  message = \"GetThirdPartyMapping API Failed\";\n}\n\nif((steps.fetchSubscriptions !== undefined) && (steps.fetchSubscriptions.response.code !== 200)){\n  message = \"fetchSubscriptions API Failed\";\n}\n\nif((steps.createPersonField !== undefined) && (steps.createPersonField.response.code !== 200)){\n  message = \"createPersonField API Failed\";\n}\n\nif((steps.updateTpConfig_1 !== undefined) && (steps.updateTpConfig_1.response.code !== 200)){\n  message = \"updateTpEntity API Failed\";\n}\n\nif((steps.getPersonFieldsPipedriveTest !== undefined) && (steps.getPersonFieldsPipedriveTest.response.code !== 200)){\n  message = \"getPersonFieldsPipedrive API Failed\";\n}\nif((steps.getTpConfig !== undefined) && (steps.getTpConfig.response.code !== 200)){\n  message = \"updateTpEntity API Failed\";\n}\n\n\n\ndone({\n  message: message\n});"}},{"id":236452,"onSuccess":[],"onFailure":[],"name":"BatchSuccess","type":"script","properties":{"body":"done(true);"}},{"id":235719,"onSuccess":["noDataToSync"],"onFailure":[],"name":"CBList","type":"script","properties":{"body":"let customerList = steps.CustomerChangeList.list;\nlet errorList;\n\nif(steps.ErrorList !== undefined && steps.ErrorList.contactList.length > 0){\n errorList = steps.ErrorList.contactList;\n customerList = (customerList !== undefined) ? customerList.concat(errorList): errorList;\n}\n\nfunction removeDuplicates(myArr, prop) {\n    return myArr.filter((obj, pos, arr) => {\n        return arr.map(mapObj => mapObj.customer[prop]).indexOf(obj.customer[prop]) === pos;\n    });\n}\n\ncustomerList = customerList !== undefined ? removeDuplicates(customerList,\"id\"): [];\n\ndone({list: customerList});\n"}},{"id":235720,"onSuccess":["LastSyncDetails"],"onFailure":[],"name":"ChargebeeCustomerList","type":"script","properties":{"body":"let customerList = steps.CustomerChangeList.list;\n\n\n// let errorList;\n\n// if(steps.ErrorList !== undefined && steps.ErrorList.contactList.length > 0){\n// errorList = steps.ErrorList.contactList;\n// customerList = customerList.concat(errorList);\n// }\n\ndone({list: customerList});"}},{"id":235721,"onSuccess":["CBList"],"onFailure":["GetErrorParams"],"name":"CheckErrorRecords","type":"filter","properties":{"body":"let syncData = steps.LastSyncDetails.response.body.third_party_sync_detail.context.syncData || undefined;\n\nlet contactLength = steps.CustomerChangeList.list.length || 0;\nlet batch_size = steps.getTpConfig.response.body.third_party_configuration.config_json.batch.batch_size;\n\n// let configuration = steps.CBthirdPartyConfiguration.config_json;\n// let isListChanged=configuration.cloudElements.formula.mapping.isListChanged;\n// let customFiledsTobeCreated=Object.keys(steps.CreateCustomFieldsParam.customFields).length;\n// let customFiledsTobeDeleted=steps.ConstructAllCustomFields.difference.length;\n\n// if(steps.ConfigParams.initialSync === true || steps.GetTPError.response.body.list.length === 0 || configuration.cloudElements.formula.sync.firstFullSync === true || isListChanged === true || customFiledsTobeCreated !== 0 || customFiledsTobeDeleted !== 0){\n// done(true);\n// }\n// done(false);\n\n// let configuration = steps.CBthirdPartyConfiguration.config_json;\n// let isListChanged=configuration.cloudElements.formula.mapping.isListChanged;\n// let customFiledsTobeCreated=Object.keys(steps.CreateCustomFieldsParam.customFields).length;\n// let customFiledsTobeDeleted=steps.ConstructAllCustomFields.difference.length;\n\nif(syncData !== undefined && syncData.previousSyncStart !== undefined && syncData.previousSyncEnd !== undefined){\nif( steps.InputParams.input.initialSync === true || steps.GetTPError.response.body.list.length === 0 ){\ndone(true);\n}\nelse if(contactLength >= batch_size){\n  done(true);\n}else{\ndone(false);\n}\n}\n\ndone(true);"}},{"id":235723,"onSuccess":["syncAllCustomers"],"onFailure":["updateTpEntityParams_3"],"name":"checkMappedFieldExist","type":"filter","properties":{"body":"done(steps.UpdateConfigParams.hasMappedField);"}},{"id":235724,"onSuccess":["CustomFieldParamsForErrorRecords"],"onFailure":["CBList"],"name":"CheckOffset","type":"filter","properties":{"body":"done(steps.GetFailedCustomer.response.body.next_offset !== undefined);"}},{"id":235725,"onSuccess":["TransformCustomerIds"],"onFailure":["GetErrorParams"],"name":"CheckOffsetValue","type":"filter","properties":{"body":"let contactLength = steps.CustomerChangeList.list !== undefined ? steps.CustomerChangeList.list.length : 0;\nlet ids = steps.FailedToSync.customerIds.length || 0;\nlet batch_size = steps.getTpConfig.response.body.third_party_configuration.config_json.batch.batch_size;\n\nif(steps.GetError.response.body.next_offset === undefined || batch_size <= (contactLength + ids)){\n  done(true);\n}\ndone(false);"}},{"id":235726,"onSuccess":["organizationFound"],"onFailure":[],"name":"checkOrganizationExist","type":"script","properties":{"body":"let flag;\n\nif(steps.searchOrganizationByName.response.body.data === null){\n  done({\n    \"flag\"  : false,\n    \"result\" : \"no_org_found\"\n  });\n}else{\n  let orgList = steps.searchOrganizationByName.response.body.data || [];\n  let orgName = steps.searchOrganizationByName.request.query.term;\n  for(var i=0; i < orgList.length; i++){\n    if(orgName === orgList[i]['name']){\n      flag = true;\n      done({\n        \"flag\"  : flag,\n        \"result\" : {\n          \"name\" : orgName,\n          \"id\" : orgList[i]['id']\n        }\n      });\n    }else{\n      flag = false;\n    }\n  }\n  done({\n    \"flag\"  : flag,\n    \"result\" : \"no_org_found\"\n  });\n}\n\n\n"}},{"id":235727,"onSuccess":["HasMatchingOrganization"],"onFailure":[],"name":"checkOrganizationExist_2","type":"script","properties":{"body":"let flag;\n\nif(steps.fetchOrganizationByName.response.body.data === null){\n  done({\n    \"flag\"  : false,\n    \"result\" : \"no_org_found\"\n  });\n}else{\n  let orgList = steps.fetchOrganizationByName.response.body.data || [];\n  let orgName = steps.fetchOrganizationByName.request.query.term;\n  for(var i=0; i < orgList.length; i++){\n    if(orgName === orgList[i]['name']){\n      flag = true;\n      done({\n        \"flag\"  : flag,\n        \"result\" : {\n          \"name\" : orgName,\n          \"id\" : orgList[i]['id']\n        }\n      });\n    }else{\n      flag = false;\n    }\n  }\n  done({\n    \"flag\"  : flag,\n    \"result\" : \"no_org_found\"\n  });\n}\n\n"}},{"id":235728,"onSuccess":["parentOrganizationFound"],"onFailure":[],"name":"checkOrganizationExist_3","type":"script","properties":{"body":"let flag;\n\nif(steps.getParentOrganization.response.body.data.length === 0){\n  done({\n    \"flag\"  : false,\n    \"result\" : \"no_org_found\"\n  });\n}else{\n  let orgList = steps.getParentOrganization.response.body.data || [];\n  let orgName = steps.getParentOrganization.request.query.term;\n  for(var i=0; i < orgList.length; i++){\n    if(orgName === orgList[i]['name']){\n      flag = true;\n      done({\n        \"flag\"  : flag,\n        \"result\" : {\n          \"name\" : orgName,\n          \"id\" : orgList[i]['id']\n        }\n      });\n    }else{\n      flag = false;\n    }\n  }\n  done({\n    \"flag\"  : flag,\n    \"result\" : \"no_org_found\"\n  });\n}\n\n"}},{"id":235729,"onSuccess":["retrievePlan_params"],"onFailure":["useOrganization"],"name":"checkPlan","type":"filter","properties":{"body":"if(steps.fetchSubscriptions.response.body.subscription !== undefined){\n  done(true);\n}\n\ndone(false);"}},{"id":235730,"onSuccess":["getAccountInformationPipedrive"],"onFailure":[],"name":"ConfigParams","type":"script","properties":{"body":"let params ={\n  chooseCustomersToSync: steps.InputParams.input.chooseCustomersToSync,\n  createPerson: steps.InputParams.input.createPerson,\n  useOrganization: steps.InputParams.input.useOrganization,\n  groupUsingOrganization: steps.InputParams.input.groupUsingOrganization,\n  linkSubAttributesToPerson: steps.InputParams.input.linkSubAttributesToPerson,\n  syncAccountHierarchies: steps.InputParams.input.syncAccountHierarchies,\n  deleteAction: steps.InputParams.input.deleteAction,\n  mappedField: steps.InputParams.input.mapped_field,\n  mappedField_pipedrive: steps.InputParams.input.mappedField_pipedrive,\n  organizationId: null,\n  syncStart : Math.round((new Date().getTime())/1000),\n  temp:null,\n  initialSync: steps.InputParams.input.initialSync,\n  records:{\n    customerIds :[],\n    customerSyncedIds:[],\n    errorCSV:[],\n    successCSV:[]\n  }\n};\n\nlet tpConfig = null;\n\nif(steps.getTpConfig.response.body.third_party_configuration !== undefined){\n  tpConfig = steps.getTpConfig.response.body;\n}\n\nif(steps.updateConfiguration !== undefined){\n  if(steps.updateConfiguration.OAuthData !== null){\n    tpConfig.third_party_configuration.config_json.cloudElements.OAuth_Parameters = steps.updateConfiguration.OAuthData.OAuthDetails;\n  }\n}\n\nlet personFields = [\"CB_Customer_ID\",\"CB_Customer_MRR\",\"CB_Customer_CMRR\",\"CB_Customer_Status\"];\nlet orgFields = [\"CB_Status\"];\n\n// let personFields = trigger.args.syncFields.personFields;\n\n\nlet additional_fields = {\n  customerAdditionalFields : steps.getTpConfig.response.body.third_party_configuration.config_json.cloudElements.syncFields.personFields || [],\n  subscriptionAdditionalFields : steps.getTpConfig.response.body.third_party_configuration.config_json.cloudElements.syncFields.subscriptionFields || [],\n  customFields : [],\n  consentFields : []\n};\n\nlet customFieldMap = steps.getTpConfig.response.body.third_party_configuration.config_json.cloudElements.customFieldMap || {\n    \"customerFields\":{},\n    \"organizationFields\":{},\n    \"dealFields\":{}\n  };\n\n\n\n\nlet fieldsToCreate = [];\nlet orgFieldsToCreate = [];\n\n// if((useOrganization === true) && ((customFieldMap.length === 0) || (customFieldMap.organizationFields === undefined))){\n//   orgFieldsToCreate = steps.getTpConfig.response.body.third_party_configuration.config_json.cloudElements.syncFields.subscriptionFields || [];\n// }\n\n\nlet getPersonFieldsPipedrive = {\n  url: \"https://api-proxy.pipedrive.com/personFields\",\n  headers : {\n    \"Authorization\": tpConfig.third_party_configuration.config_json.cloudElements.OAuth_Parameters.access_token || null\n  }\n};\n\nlet getAccountInfomationPipedrive = {\n  url: \"https://api-proxy.pipedrive.com/users/me\",\n  headers : {\n    \"Authorization\": tpConfig.third_party_configuration.config_json.cloudElements.OAuth_Parameters.access_token || null\n  }\n}\n\ndone({\n  tpConfig: tpConfig,\n  params: params,\n  personFields: personFields,\n  orgFields: orgFields,\n  additional_fields: additional_fields,\n  customFieldMap: customFieldMap,\n  fieldsToCreate: fieldsToCreate,\n  orgFieldsToCreate: orgFieldsToCreate,\n  getPersonFieldsPipedrive: getPersonFieldsPipedrive,\n  getAccountInfomationPipedrive: getAccountInfomationPipedrive\n});"}},{"id":235732,"onSuccess":["loopOverCustomers"],"onFailure":[],"name":"createLog","type":"script","properties":{"body":"let customer = steps.loopOverCustomers.entry.customer;\n\nlet chargebee_data_url = \"/admin-console/subscriptions/\"+customer.id;\nlet cb_link = \"<a href='\"+chargebee_data_url+\"' target=\\\"blank\\\">\"+customer.id+\"</a>\";\n\nif((steps.createPersonInPipedrive.response.code !== 200) && (steps.createPersonInPipedrive.response.code !== 201)){\n  steps.ConfigParams.params.records.errorCSV.push(cb_link + \",\" + \"Sync Failed\");\n  done(steps.ConfigParams.params.records.errorCSV);\n}\n\nlet pipedrive = steps.createPersonInPipedrive.response.body.data;\nlet company_domain = steps.getAccountInformationPipedrive.response.body.data.company_domain;\nlet pipedrive_data_url = \"https://\"+company_domain+\".pipedrive.com/person/\" + pipedrive.id;\nlet pipedrive_link = \"<a href='\"+pipedrive_data_url+\"' target=\\\"blank\\\">\"+pipedrive.id+\"</a>\";\n\nsteps.ConfigParams.params.records.successCSV.push(\"Customer ID \" + cb_link + \" is synced as \" + pipedrive_link + \" in Pipedrive\");\n\nsteps.ConfigParams.params.records.customerSyncedIds.push(customer.id);\n\ndone(steps.ConfigParams.params.records.successCSV);\n\n\n"}},{"id":235733,"onSuccess":["createOrganizationFieldFailed"],"onFailure":["createOrganizationFieldFailed"],"name":"createOrganizationField","type":"httpRequest","properties":{"retryDelay":"200","body":"${steps.createOrganizationField_params.payload.body}","url":"${steps.createOrganizationField_params.payload.url}","headers":"${steps.createOrganizationField_params.payload.header}","retry":"true","acceptableStatusCodes":"200,401,500","retryAttempts":"5","method":"POST"}},{"id":240176,"onSuccess":["organizationFieldInformation"],"onFailure":["InvalidAccessToken"],"name":"createOrganizationFieldFailed","type":"filter","properties":{"body":"done(steps.createOrganizationField.response.code === 200);"}},{"id":235734,"onSuccess":["organizationFieldInformation"],"onFailure":[],"name":"createOrganizationFieldOld123","type":"elementRequest","properties":{"query":"","body":"${steps.loopOverSubscriptionFieldsOrg.entry}","api":"/organizationFields","method":"POST","elementInstanceId":"${config.pipedrive}"}},{"id":235735,"onSuccess":["createOrganizationField"],"onFailure":[],"name":"createOrganizationField_params","type":"script","properties":{"body":"let payload = {\n  url : \"https://api-proxy.pipedrive.com/organizationFields\",\n  header: {\n    \"Authorization\": steps.ConfigParams.tpConfig.third_party_configuration.config_json.cloudElements.OAuth_Parameters.access_token || null\n  },\n  body : steps.loopOverSubscriptionFieldsOrg.entry\n};\n\ndone({\n  payload: payload\n});"}},{"id":235736,"onSuccess":["searchOrganizationByName"],"onFailure":["UpdateConfigParams"],"name":"createOrganizationParams","type":"script","properties":{"body":"// if(steps.ConfigParams.params.groupUsingOrganization === true){ //Group Using Organization, Dont create any new organization\n//   done(false);\n// }\n\nlet configuration = {\n  url : \"https://api-proxy.pipedrive.com/organizations\",\n  header: {\n    \"Authorization\": steps.ConfigParams.tpConfig.third_party_configuration.config_json.cloudElements.OAuth_Parameters.access_token || null\n  },\n  body:{\n    \"name\": steps.fetchOrganizationParams.configuration.queryParams.term,\n    \"visible_to\": 3\n  }\n}\n\n\ndone({\n  configuration: configuration\n})"}},{"id":235737,"onSuccess":["createOrganizationPipedriveFailed"],"onFailure":["createOrganizationPipedriveFailed"],"name":"createOrganizationPipedrive","type":"httpRequest","properties":{"retryDelay":"200","body":"${steps.createOrganizationParams.configuration.body}","retryStatusCodes":"","url":"${steps.createOrganizationParams.configuration.url}","headers":"${steps.createOrganizationParams.configuration.header}","acceptableStatusCodes":"200,201,401,500","retry":"true","retryAttempts":"5","method":"POST"}},{"id":240177,"onSuccess":["newOrganizationCreated"],"onFailure":["InvalidAccessToken"],"name":"createOrganizationPipedriveFailed","type":"filter","properties":{"body":"done(steps.createOrganizationPipedrive.response.code === 200);"}},{"id":235738,"onSuccess":["newOrganizationCreated"],"onFailure":[],"name":"createOrganizationPipedriveOld12","type":"elementRequest","properties":{"body":"${steps.createOrganizationParams.configuration.body}","api":"/organizations","method":"POST","elementInstanceId":"${config.pipedrive}"}},{"id":235739,"onSuccess":["createOrganizationRelationshipFailed"],"onFailure":[],"name":"createOrganizationRelationship","type":"httpRequest","properties":{"body":"${steps.createOrgRelationship_params.payload.body}","url":"${steps.createOrgRelationship_params.payload.url}","headers":"${steps.createOrgRelationship_params.payload.headers}","acceptableStatusCodes":"200,401,500","retry":"true","method":"POST"}},{"id":240114,"onSuccess":["getOrgFieldsPipedrive_params"],"onFailure":["InvalidAccessToken"],"name":"createOrganizationRelationshipFailed","type":"filter","properties":{"body":"done(steps.createOrganizationRelationship.response.code === 200);"}},{"id":235740,"onSuccess":["createOrganizationFieldOld123"],"onFailure":[],"name":"createOrgFieldParams","type":"script","properties":{"body":"let createOrganizationFieldOld123 = {\n  body:{\n    \"name\": steps.loopOverSubscriptionFieldsOrg.entry,\n    \"field_type\": \"varchar\"\n  }\n}\n\n\ndone({\n  createOrganizationFieldOld123: createOrganizationFieldOld123\n})\n\n\n"}},{"id":235741,"onSuccess":["createOrganizationRelationship"],"onFailure":[],"name":"createOrgRelationship_params","type":"script","properties":{"body":"let payload = {\n  url : \"https://api-proxy.pipedrive.com/organizationRelationships\",\n  headers : {\n    \"Authorization\": steps.ConfigParams.tpConfig.third_party_configuration.config_json.cloudElements.OAuth_Parameters.access_token || null\n  },\n  body : {\n    \"org_id\": steps.newOrganizationCreated,\n    \"rel_owner_org_id\": steps.checkOrganizationExist_3.result.id,\n    \"rel_linked_org_id\": steps.newOrganizationCreated,\n    \"type\": \"parent\"\n  }\n};\n\n\ndone({\n  payload: payload\n});"}},{"id":235742,"onSuccess":["createPersonPayload"],"onFailure":["loopOverCustomers"],"name":"createPerson","type":"filter","properties":{"body":"done(steps.ConfigParams.params.createPerson);"}},{"id":235743,"onSuccess":["InvalidAccessToken"],"onFailure":["updateTpEntityParams_1"],"name":"createPersonAuthError","type":"filter","properties":{"body":"if(steps.createPersonInPipedrive.response.code === 401){\n  done(true);\n}\n\ndone(false);"}},{"id":235744,"onSuccess":["personFieldInformation"],"onFailure":["ApiError"],"name":"createPersonField","type":"httpRequest","properties":{"retryDelay":"200","body":"${steps.loopOverFieldsToCreate.entry}","url":"${steps.createPersonField_params.payload.url}","headers":"${steps.createPersonField_params.payload.header}","retry":"true","retryAttempts":"5","method":"POST"}},{"id":235745,"onSuccess":[],"onFailure":[],"name":"createPersonField2","type":"elementRequest","properties":{"body":"${steps.loopOverPersonFields2.entry}","api":"/personFields","method":"POST","elementInstanceId":"${config.pipedrive}"}},{"id":235746,"onSuccess":["personFieldInformation"],"onFailure":[],"name":"createPersonFieldOld1233","type":"elementRequest","properties":{"body":"${steps.loopOverFieldsToCreate.entry}","api":"/personFields","method":"POST","elementInstanceId":"${config.pipedrive}"}},{"id":235747,"onSuccess":["createPersonField"],"onFailure":[],"name":"createPersonField_params","type":"script","properties":{"body":"let payload = {\n  url : \"https://api-proxy.pipedrive.com/personFields\",\n  header: {\n    \"Authorization\": steps.ConfigParams.tpConfig.third_party_configuration.config_json.cloudElements.OAuth_Parameters.access_token || null\n  }\n};\n\ndone({\n  payload: payload\n});\n\n"}},{"id":235748,"onSuccess":["createPersonInPipedriveFailed"],"onFailure":["createPersonInPipedriveFailed"],"name":"createPersonInPipedrive","type":"httpRequest","properties":{"retryDelay":"200","body":"${steps.createPersonPayload.payload}","retryStatusCodes":"","url":"${steps.createPersonPayload.requestPayload.url}","headers":"${steps.createPersonPayload.requestPayload.headers}","retry":"true","acceptableStatusCodes":"200,401,500","retryAttempts":"5","method":"POST"}},{"id":240181,"onSuccess":["updateTpEntityParams_1"],"onFailure":["createPersonAuthError"],"name":"createPersonInPipedriveFailed","type":"filter","properties":{"body":"done(steps.createPersonInPipedrive.response.code === 200);"}},{"id":235749,"onSuccess":["updateTpEntityParams_1"],"onFailure":[],"name":"createPersonInPipedriveTest","type":"elementRequest","properties":{"query":"","body":"${steps.createPersonPayload.payload}","headers":"${steps.createPersonPayload.header}","api":"/persons","method":"POST","elementInstanceId":"${config.pipedrive}"}},{"id":235750,"onSuccess":["createPersonInPipedrive"],"onFailure":[],"name":"createPersonPayload","type":"script","properties":{"body":"let customFieldMap = steps.ConfigParams.customFieldMap.customerFields;\nconsole.log(customFieldMap);\n\nlet orgFields = steps.ConfigParams.customFieldMap.organizationFields;\nlet chargebeeCustomer = steps.loopOverCustomers.entry.customer;\n\nlet customer_name = (chargebeeCustomer.last_name === undefined) ? chargebeeCustomer.first_name : chargebeeCustomer.first_name + \" \" + chargebeeCustomer.last_name;\nlet email = chargebeeCustomer.email || '';\nlet phone = chargebeeCustomer.phone;\n\nlet subscriptionData = null;\nif(steps.fetchSubscriptions.response.body.subscription !== undefined){\n  subscriptionData = steps.fetchSubscriptions.response.body.subscription || null;\n}\n\nlet additionalFields = [];\nif(steps.ConfigParams.additional_fields.customerAdditionalFields.length !== 0){\n  additionalFields = additionalFields.concat(steps.ConfigParams.additional_fields.customerAdditionalFields);\n}\n\nif(steps.ConfigParams.params.linkSubAttributesToPerson === true){\n  if(steps.ConfigParams.additional_fields.subscriptionAdditionalFields.length !== 0){\n    additionalFields = additionalFields.concat(steps.ConfigParams.additional_fields.subscriptionAdditionalFields);\n  }\n}\n\nif(steps.ConfigParams.additional_fields.customFields.length !== 0){\n  additionalFields = additionalFields.concat(steps.ConfigParams.additional_fields.customFields);\n}\n\nif(steps.ConfigParams.additional_fields.consentFields.length !== 0){\n  additionalFields = additionalFields.concat(steps.ConfigParams.additional_fields.consentFields);\n}\n\nlet header = {\n  \"Accept\": \"application/json\"\n};\n\nlet payload = {\n  \"name\": customer_name,\n  \"email\": email,\n  \"phone\": phone,\n  \"visible_to\" : 3\n};\n\nif(steps.ConfigParams.params.useOrganization === true){\n  if(steps.ConfigParams.params.groupUsingOrganization === true){\n    if(steps.HasMatchingOrganization.continue === true){\n      payload['org_id'] =  steps.organizationParams.orgId;\n    }else{\n      payload['org_id'] = steps.newOrganizationCreated; \n    }\n  }else{\n    payload['org_id'] = steps.newOrganizationCreated;\n  }\n  \n}\n\n\n// if(steps.groupUsingOrgName !== undefined){\n//   if(steps.groupUsingOrgName.continue === true){\n//     payload['org_id'] = steps.ConfigParams.params.organizationId;\n//   }\n// }\n\nif(customFieldMap['CB_Customer_ID'] !== undefined){\n  payload[customFieldMap['CB_Customer_ID']] = chargebeeCustomer.id;\n}\n\nif(customFieldMap['CB_Customer_MRR'] !== undefined){\n  payload[customFieldMap['CB_Customer_MRR']] = (subscriptionData !== null && subscriptionData.mrr !== undefined) ? parseFloat(parseInt(subscriptionData.mrr, 10) / 100).toFixed(2) : 0;\n}\n\npayload[customFieldMap['CB_Customer_CMRR']] = 0;\n\n\nif(payload[customFieldMap['CB_Customer_MRR']] > 0){\n  if((steps.retrievePlan !== undefined) && (steps.retrievePlan.response.code === 200)){\n    let mrr = payload[customFieldMap['CB_Customer_MRR']];\n    let plan = steps.retrievePlan.response.body.plan.id;\n    let period_unit = steps.retrievePlan.response.body.plan.period_unit;\n    let period = steps.retrievePlan.response.body.plan.period;\n    if((period !== undefined) && (period_unit !== undefined)){\n      period = Number(period);\n      if(isNaN(period) || period === 0){\n        period = 1;\n      }\n      if(period_unit ===\"year\") {\n        payload[customFieldMap['CB_Customer_CMRR']] = mrr *12 * period;\n      }else if (period_unit ===\"month\") {\n        payload[customFieldMap['CB_Customer_CMRR']] = mrr * period;\n      }else if (period_unit === \"week\") {\n        payload[customFieldMap['CB_Customer_CMRR']] = (mrr/4) * period;\n      }else if(period_unit === \"day\"){\n        payload[customFieldMap['CB_Customer_CMRR']] = (mrr/30) * period;\n      }\n    }\n  }\n}\n\n// if(customFieldMap['CB_Customer_CMRR'] !== undefined){\n//   payload[customFieldMap['CB_Customer_CMRR']] = (subscriptionData !== null) ? subscriptionData.mrr : '0';\n//   if((subscriptionData !== null) && (subscriptionData.billing_period_unit === \"month\")){\n//     payload[customFieldMap['CB_Customer_CMRR']] = (subscriptionData !== null) ? (subscriptionData.mrr * subscriptionData.billing_period) : '0';\n//   }\n// }\n\nif((chargebeeCustomer.deleted === false) && (customFieldMap['CB_Customer_Status'] !== undefined)){\n  payload[customFieldMap['CB_Customer_Status']] = \"Active\";\n}else{\n  if(customFieldMap['CB_Customer_Status'] !== undefined){\n    payload[customFieldMap['CB_Customer_Status']] = \"Deleted\";\n  }\n  // if(steps.ConfigParams.params.deleteAction === \"mark_person_and_org_deleted\"){\n  //   if(orgFields['CB_Customer_Status'] !== undefined){\n  //     payload[orgFields['CB_Customer_Status']] = \"Deleted\";\n  //   }\n  // }\n}\n\n\nfor(var i=0; i<additionalFields.length; i++){\n  if((additionalFields[i] === 'CB_Customer_Auto_Collection') && (customFieldMap['CB_Customer_Auto_Collection'] !== undefined)){\n      payload[customFieldMap['CB_Customer_Auto_Collection']] = chargebeeCustomer.auto_collection || 'Not Available';\n  }\n  \n  if((additionalFields[i] === 'CB_Customer_Total_Due_Amount') && (customFieldMap['CB_Customer_Total_Due_Amount'] !== undefined)){\n      payload[customFieldMap['CB_Customer_Total_Due_Amount']] = chargebeeCustomer.unbilled_charges || 'Not Available';\n  }\n  \n  if((additionalFields[i] === 'CB_Customer_Locale') && (customFieldMap['CB_Customer_Locale'] !== undefined)){\n       payload[customFieldMap['CB_Customer_Locale']] = chargebeeCustomer.locale || 'Not Available';\n  }\n  \n  if((additionalFields[i].startsWith(\"cf_\") === true) && (customFieldMap[additionalFields[i]] !== undefined)){\n    payload[customFieldMap[additionalFields[i]]] = chargebeeCustomer[additionalFields[i]] || \"Not Available\";\n  }\n  \n  if((additionalFields[i].startsWith(\"cs_\") === true) && (customFieldMap[additionalFields[i]] !== undefined)){\n    payload[customFieldMap[additionalFields[i]]] = chargebeeCustomer[additionalFields[i]] || \"Not Available\";\n  }\n  \n  if((subscriptionData !== null) && (steps.ConfigParams.params.linkSubAttributesToPerson === true)){\n    console.log(\"Inside\");\n    if((additionalFields[i] === 'CB_Subscription_ID') && (customFieldMap['CB_Subscription_ID'] !== undefined)){\n      payload[customFieldMap['CB_Subscription_ID']] = subscriptionData.id || 'Not Available';\n    }\n    \n    if((additionalFields[i] === 'CB_Subscription_Status') && (customFieldMap['CB_Subscription_Status'] !== undefined)){\n      payload[customFieldMap['CB_Subscription_Status']] = subscriptionData.status || 'Not Available';\n    }\n    \n    if((additionalFields[i] === 'CB_Subscription_Currency') && (customFieldMap['CB_Subscription_Currency'] !== undefined)){\n      payload[customFieldMap['CB_Subscription_Currency']] = subscriptionData.currency_code || 'Not Available';\n    }\n    \n    if((additionalFields[i] === 'CB_Subscription_Plan_Name') && (customFieldMap['CB_Subscription_Plan_Name'] !== undefined)){\n      payload[customFieldMap['CB_Subscription_Plan_Name']] = subscriptionData.plan_id || 'Not Available';\n    }\n    \n    if((additionalFields[i] === 'CB_Subscription_Created_At') && (customFieldMap['CB_Subscription_Created_At'] !== undefined)){\n      payload[customFieldMap['CB_Subscription_Created_At']] = subscriptionData.created_at || 'Not Available';\n    }\n    \n    if((additionalFields[i] === 'CB_Subscription_Trial_start') && (customFieldMap['CB_Subscription_Trial_start'] !== undefined)){\n      payload[customFieldMap['CB_Subscription_Trial_start']] = subscriptionData.trial_start || 'Not Available';\n    }\n    \n    if((additionalFields[i] === 'CB_Subscription_Trial_end') && (customFieldMap['CB_Subscription_Trial_end'] !== undefined)){\n      payload[customFieldMap['CB_Subscription_Trial_end']] = subscriptionData.trial_end || 'Not Available';\n    }\n    \n    if((additionalFields[i] === 'CB_Subscription_Started_At') && (customFieldMap['CB_Subscription_Started_At'] !== undefined)){\n      payload[customFieldMap['CB_Subscription_Started_At']] = subscriptionData.started_at || 'Not Available';\n    }\n    \n    if((additionalFields[i] === 'CB_Subscription_Activated_At') && (customFieldMap['CB_Subscription_Activated_At'] !== undefined)){\n      payload[customFieldMap['CB_Subscription_Activated_At']] = subscriptionData.activated_at || 'Not Available';\n    }\n    \n    if((additionalFields[i] === 'CB_Gift_Subscription') && (customFieldMap['CB_Gift_Subscription'] !== undefined)){\n      payload[customFieldMap['CB_Gift_Subscription']] = subscriptionData.gift_id || 'Not Available';\n    }\n    \n    if((additionalFields[i] === 'CB_Subscription_CMRR') && (customFieldMap['CB_Subscription_CMRR'] !== undefined)){\n      payload[customFieldMap['CB_Subscription_CMRR']] = subscriptionData.cmrr || 'Not Available';\n    }\n    \n    if((additionalFields[i] === 'CB_Subscription_Cancel_Reason') && (customFieldMap['CB_Subscription_Cancel_Reason'] !== undefined)){\n      payload[customFieldMap['CB_Subscription_Cancel_Reason']] = subscriptionData.cancel_reason || 'Not Available';\n    }\n    \n    if((additionalFields[i] === 'CB_Subscription_Cancelled_At') && (customFieldMap['CB_Subscription_Cancelled_At'] !== undefined)){\n      payload[customFieldMap['CB_Subscription_Cancelled_At']] = subscriptionData.cancelled_at || 'Not Available';\n    }\n    \n    if((additionalFields[i] === 'CB_Subscription_Start_At') && (customFieldMap['CB_Subscription_Start_At'] !== undefined)){\n      payload[customFieldMap['CB_Subscription_Start_At']] = subscriptionData.start_date || 'Not Available';\n    }\n    \n    if((additionalFields[i] === 'CB_Subscription_Pause_At') && (customFieldMap['CB_Subscription_Pause_At'] !== undefined)){\n      payload[customFieldMap['CB_Subscription_Pause_At']] = subscriptionData.pause_date || 'Not Available';\n    }\n    \n    if((additionalFields[i] === 'CB_Subscription_Resume_At') && (customFieldMap['CB_Subscription_Resume_At'] !== undefined)){\n      payload[customFieldMap['CB_Subscription_Resume_At']] = subscriptionData.resume_date || 'Not Available';\n    }\n    \n    \n    if((additionalFields[i] === 'CB_Subscription_Next_Billing_At') && (customFieldMap['CB_Subscription_Next_Billing_At'] !== undefined)){\n      payload[customFieldMap['CB_Subscription_Next_Billing_At']] = subscriptionData.next_billing_at || 'Not Available';\n    }\n    \n    if((additionalFields[i] === 'CB_Subscription_Current_term_start') && (customFieldMap['CB_Subscription_Current_term_start'] !== undefined)){\n      payload[customFieldMap['CB_Subscription_Current_term_start']] = subscriptionData.current_term_start || 'Not Available';\n    }\n    \n    if((additionalFields[i] === 'CB_Subscription_Current_term_end') && (customFieldMap['CB_Subscription_Current_term_end'] !== undefined)){\n      payload[customFieldMap['CB_Subscription_Current_term_end']] = subscriptionData.current_term_end || 'Not Available';\n    }\n  }\n}\n\nlet requestPayload = {\n  url: \"https://api-proxy.pipedrive.com/persons\",\n  headers : {\n    \"Authorization\": steps.ConfigParams.tpConfig.third_party_configuration.config_json.cloudElements.OAuth_Parameters.access_token || null\n  }\n}\n\n\ndone({\n  header: header,\n  payload: payload,\n  requestPayload: requestPayload\n});\n\n\n"}},{"id":235751,"onSuccess":["ChargebeeCustomerList"],"onFailure":[],"name":"CustomerChangeList","type":"script","properties":{"body":"if(steps.InputParams.input.initialSync === true){\n  let contactList = steps.getCustomers.response.body.list;\n  done({\n    list: contactList\n  });\n}\n\n// let getSubscriptionList = [];\nlet getCustomerList = steps.customerList.contactList || [];\n\n// let getDeletedList = [];\n\n// if(steps.deletedCustomersList !== undefined){\n//   getDeletedList = steps.deletedCustomersList.deletedList;\n// }\n\n// if(getDeletedList.length > 0){\n//   if(getCustomerList.length >0){\n//     getCustomerList = getCustomerList.concat(getDeletedList);\n//   }else{\n//     getCustomerList = getDeletedList;\n//   }\n// }\n\n// if(steps.subscriptionList !== undefined){\n//   getSubscriptionList = steps.subscriptionList.customerList.list;\n// }\n\n// if(getSubscriptionList.length === 0){ //No Subscription Change\n//   done({\n//     list: getCustomerList\n//   });\n// }\n\n// if((getCustomerList.length === 0) && (getSubscriptionList.length > 0)){ //No Customer Change, But Subscription Changed for a Customer\n//   done({\n//     list: getSubscriptionList\n//   });\n// }\n\n//Both Customer and Subscription Changed\n\n// let list=[];\n// let j;\n// let i\n\n// for(i = 0; i < getSubscriptionList.length; ++i){\n// for(j = 0; j < getCustomerList.length; ++j){\n//   if(getSubscriptionList[i].customer.id === getCustomerList[j].customer.id){\n//     break;\n//   }\n// } \n\n// if(j === getCustomerList.length){\n//   getCustomerList.push(getSubscriptionList[i]);\n// }\n// }\n\ndone({\n  list: getCustomerList\n});"}},{"id":235752,"onSuccess":["hasExistingPerson"],"onFailure":[],"name":"customerInformationParams","type":"script","properties":{"body":"let customerData;\n\nif(steps.searchPersonPipedrive.response.code === 200){\n  customerData = steps.searchPersonPipedrive.response.body.data || null;\n}else{\n  done(false);\n}\n\n\ndone({\n  customerData: customerData\n});\n\n\n"}},{"id":235753,"onSuccess":["hasNextOffsetCustomer"],"onFailure":[],"name":"customerList","type":"script","properties":{"body":"let contactList = [];\nlet configuration = steps.getTpConfig.response.body.third_party_configuration.config_json;\n\nif(steps.InputParams.input.initialSync === true){\n  contactList = steps.getCustomers.response.body.list;\n  done({\n    contactList: contactList\n  });\n}\n\nif(steps.customerList !== undefined){\n  contactList = steps.customerList.contactList;\n}else{\n  contactList = (steps.subscriptionList !== undefined ) ? steps.subscriptionList.customerList.list : [];\n}\n\nif(((steps.getCustomers.response.body.list !== undefined) && (steps.getCustomers.response.body.list.length > 0)) && configuration.batch.sync_customer.get_customer !== null){\n  if(contactList.length === 0){\n    contactList = steps.getCustomers.response.body.list;\n  }else if(contactList.length < configuration.batch.batch_size){\n    contactList = contactList.concat(steps.getCustomers.response.body.list);\n  }else{\n    done({\n        contactList: contactList\n     });\n  }\n}\n\ndone({\n  contactList: contactList\n});"}},{"id":235754,"onSuccess":["GetFailedCustomer"],"onFailure":[],"name":"CustomFieldParamsForErrorRecords","type":"script","properties":{"body":"let params = {\n  query: {\n \t   limit: 10,\n \t   sort_by_asc : \"updated_at\",\n \t   id_in: steps.TransformCustomerIds.ids\n  }\n};\n\nif(steps.GetFailedCustomer !== undefined){\n  params.query.offset = steps.GetFailedCustomer.response.body.next_offset;\n}\n\ndone(params);\n"}},{"id":235755,"onSuccess":[],"onFailure":[],"name":"delayExecution","type":"script","properties":{"body":"let payload = {\n  url: \"https://staging.cloud-elements.com/elements/api-v2/createDelay\",\n  headers:{\n    \"authorization\": \"User XNzP5miZ8LjANZarWA0np2LmNeRkUanHScUEQmQHwDs=, Organization c9584f9cc4a4c8391568438a9a3041a2\",\n    \"Elements-Formula-Instance-Id\": \"391515\"\n  }\n};\n\ndone({\n  payload: payload\n});"}},{"id":235756,"onSuccess":[],"onFailure":[],"name":"deletedCustomersList","type":"script","properties":{"body":"let deletedCustomersList = [];\n\nif(steps.deletedCustomersList !== undefined){\n  deletedCustomersList = steps.deletedCustomersList.deletedList;\n}\n\nif((steps.getCustomersDeleted.response.body.list !== undefined) && (steps.getCustomersDeleted.response.body.list.length > 0)){\n  \n  let data = steps.getCustomersDeleted.response.body.list;\n  let filteredList = {\n    list:[]\n  };\n  \n  for(var i=0; i < steps.getCustomersDeleted.response.body.list.length; i++){\n    if(data[i]['customer']['deleted'] === true){\n      filteredList.list.push(data[i]); \n    }\n  }\n  \n  if((deletedCustomersList.length === 0) && (filteredList.list.length === 0)){\n    done({\n      deletedList : []\n    });\n  }\n  \n  if(deletedCustomersList.length === 0){\n    deletedCustomersList = filteredList.list;\n  }else{\n    deletedCustomersList = deletedCustomersList.concat(filteredList.list);\n  }\n}\n\ndone({\n  deletedList: deletedCustomersList\n});\n"}},{"id":235757,"onSuccess":["GetThirdPartyMappingDetails"],"onFailure":[],"name":"EnityMappingParams","type":"script","properties":{"body":"let apiKey=steps.InputParams.input.cbApiKey;\nlet siteName=steps.InputParams.input.siteName;\nlet siteDomain=steps.InputParams.input.siteDomain;\nlet type = steps.InputParams.input.integrationName;\n\nlet password = \"\";\n\nlet params = {\n    config :{\n      url: \"https://\"+siteName+\".\"+siteDomain+\"/api/v2/third_party_entity_mappings/retrieve\",\n      auth:{\n        Authorization: \"Basic \" + CE.b64(apiKey + \":\" + password)\n      },\n      query:{\n        integration_name: type,\n        entity_id: steps.loopOverCustomers.entry.customer.id,\n        entity_type: \"customer\",\n    }\n  }\n};\n\ndone(params)\n"}},{"id":235758,"onSuccess":["CheckOffset"],"onFailure":[],"name":"ErrorList","type":"script","properties":{"body":"let contactList = [];\n\nif(steps.ErrorList !== undefined){\n  contactList = steps.ErrorList.contactList;\n}\n\nif((steps.GetFailedCustomer.response.body.list !== undefined) && (steps.GetFailedCustomer.response.body.list.length > 0)){\n  if(contactList.length === 0){\n    contactList = steps.GetFailedCustomer.response.body.list;\n  }else{\n    contactList = contactList.concat(steps.GetFailedCustomer.response.body.list);\n  }\n}\n\ndone({\n  contactList: contactList\n});\n"}},{"id":235759,"onSuccess":[],"onFailure":[],"name":"executionStatus_getNewAccessToken","type":"script","properties":{"body":"let executionData = {};\n\nif(steps.checkExecutionStatus_getNewAccessToken.response.body.status === undefined) {\n  executionData.status = \"failed\";\n}else if(steps.checkExecutionStatus_getNewAccessToken.response.body.status === \"failed\"){\n  executionData.status = \"failed\";\n}else if(steps.checkExecutionStatus_getNewAccessToken.response.body.status === \"success\"){\n  executionData.status = \"succeeded\";\n  for(var i=0;i<=steps.checkExecutionStatus_getNewAccessToken.response.body.stepExecutions.length;i++){\n    if(steps.checkExecutionStatus_getNewAccessToken.response.body.stepExecutions[i][\"stepName\"] === \"Success\") {\n      executionData.result = steps.checkExecutionStatus_getNewAccessToken.response.body.stepExecutions[i];\n      break;\n    }\n    \n    if(steps.checkExecutionStatus_getNewAccessToken.response.body.stepExecutions[i][\"stepName\"] === \"Failed\") {\n      executionData.result = steps.checkExecutionStatus_getNewAccessToken.response.body.stepExecutions[i];\n      executionData.status = \"failed\";\n      break;\n    }\n  }\n}else if(steps.checkExecutionStatus_getNewAccessToken.response.body.status === \"pending\"){\n  executionData.status = \"running\";\n}\n\ndone({\n  executionData: executionData\n});"}},{"id":235760,"onSuccess":[],"onFailure":[],"name":"failedToGetAccessToken","type":"script","properties":{"body":"done({\n  message : \"Failed to Get New Access Token\"\n});"}},{"id":235761,"onSuccess":[],"onFailure":[],"name":"FailedToGetAccessToken","type":"script","properties":{"body":"done({\n  message : \"Failed to Get New Access Token\"\n});"}},{"id":235762,"onSuccess":["CheckOffsetValue"],"onFailure":[],"name":"FailedToSync","type":"script","properties":{"body":"let details = steps.GetError.response.body.list;\nlet customerIds = [];\nif(steps.FailedToSync !== undefined){\n  customerIds = steps.FailedToSync.customerIds;\n}\n\nif(details.length !== 0){\n  \n    details.forEach(item => {\n    customerIds.push(item.third_party_entity_mapping.entity_id);\n  });\n  \n}\n\ndone({customerIds : customerIds});\n\n"}},{"id":235763,"onSuccess":["fetchPipedriveCustomer"],"onFailure":[],"name":"fetchCustomerParams","type":"script","properties":{"body":"// let mappedField = steps.ConfigParams.params.mappedField;\n\n// // let queryParams = {\n// //   params: {\n// //     \"api_token\": \"879f1886b30fff94607efc8c74a0f38f760eb834\",\n// //     \"sort\": \"update_time DESC\"\n// //   }\n// // }\n\n// let configuration = {};\n\n// if(mappedField === 'email'){\n//   configuration = {\n//     queryParams : {\n//         term: steps.loopOverCustomers.entry.customer.email,\n//         search_by_email: 1\n//     },\n//     apiEndPoint : \"/persons/find\"\n//   }\n \n//   // queryParams.params.filter = JSON.stringify(\"email='ajaitester3@fake.com'\");\n// }\n// else{\n//   configuration = {\n//       queryParams : {},\n//       apiEndPoint : \"/contacts/\"+steps.loopOverCustomers.entry.customer[mappedField]\n//   }\n//   // queryParams.params.id = steps.loopOverCustomers.entry.customer[mappedField];\n// }\n\n// // if(steps.ConfigParams.params.organizationId !== null){\n// //   configuration.queryParams.org_id = steps.ConfigParams.params.organizationId;\n// // }\n\nlet configuration = {\n  queryParams : {},\n  apiEndPoint : \"/persons/\"+steps.searchPersonPipedrive.response.body.data[0].id || null\n}\n\ndone({\n  configuration: configuration \n});\n\n\n  "}},{"id":235764,"onSuccess":["fetchCustomerWithoutOrgFailed"],"onFailure":["fetchCustomerWithoutOrgFailed"],"name":"fetchCustomerWithoutOrg","type":"httpRequest","properties":{"retryDelay":"200","query":"${steps.fetchCustomerWithoutOrgParams.configuration.queryParams}","retryStatusCodes":"401","url":"${steps.fetchCustomerWithoutOrgParams.configuration.apiEndPoint}","headers":"${steps.fetchCustomerWithoutOrgParams.configuration.headers}","acceptableStatusCodes":"200,403,404,401,500","retry":"true","retryAttempts":"5","method":"GET"}},{"id":240180,"onSuccess":["noPersonFound"],"onFailure":["InvalidAccessToken"],"name":"fetchCustomerWithoutOrgFailed","type":"filter","properties":{"body":"if(steps.fetchCustomerWithoutOrg.response.code !== 200 && steps.fetchCustomerWithoutOrg.response.code !== 404){\n  done(false);\n}\n\ndone(true);"}},{"id":235765,"onSuccess":["noPersonFound"],"onFailure":[],"name":"fetchCustomerWithoutOrgOlddd","type":"elementRequest","properties":{"query":"${steps.fetchCustomerWithoutOrgOldddParams.configuration.queryParams}","api":"${steps.fetchCustomerWithoutOrgOldddParams.configuration.apiEndPoint}","method":"GET","elementInstanceId":"${config.pipedrive}"}},{"id":235766,"onSuccess":["fetchCustomerWithoutOrg"],"onFailure":[],"name":"fetchCustomerWithoutOrgParams","type":"script","properties":{"body":"let mappedField = steps.ConfigParams.params.mappedField;\nlet mappedField_pipedrive = steps.ConfigParams.params.mappedField_pipedrive;\nlet configuration = {};\n\nlet tpEntityId = steps.GetThirdPartyMappingDetails.response.body.third_party_entity_mapping.third_party_entity_id || null;\n\nif(mappedField_pipedrive === 'email'){\n  configuration = {\n     queryParams : {\n        term: steps.loopOverCustomers.entry.customer[mappedField],\n        search_by_email: 1\n    },\n    headers : {\n      \"Authorization\": steps.ConfigParams.tpConfig.third_party_configuration.config_json.cloudElements.OAuth_Parameters.access_token || null\n    },\n    apiEndPoint : \"https://api-proxy.pipedrive.com/persons/find\"\n  }\n}\nelse{\n  let personId = (tpEntityId !== null) ? tpEntityId : steps.loopOverCustomers.entry.customer[mappedField];\n  configuration = {\n      queryParams : {},\n      headers : {\n        \"Authorization\": steps.ConfigParams.tpConfig.third_party_configuration.config_json.cloudElements.OAuth_Parameters.access_token || null\n      },\n      apiEndPoint : \"https://api-proxy.pipedrive.com/persons/\"+personId\n  }\n}\n\ndone({\n  configuration: configuration \n});\n  "}},{"id":235767,"onSuccess":["fetchDetailedInfoCustomerFailed"],"onFailure":["fetchDetailedInfoCustomerFailed"],"name":"fetchDetailedInfoCustomer","type":"httpRequest","properties":{"query":"","url":"${steps.fetchDetailedInfoParam.fetchDetailedInfoConfig.url}","headers":"${steps.fetchDetailedInfoParam.fetchDetailedInfoConfig.header}","acceptableStatusCodes":"200,401,404,500","method":"GET"}},{"id":240179,"onSuccess":["hasExactMatch"],"onFailure":["InvalidAccessToken"],"name":"fetchDetailedInfoCustomerFailed","type":"filter","properties":{"body":"if(steps.fetchDetailedInfoCustomer.response.code === 200 || steps.fetchDetailedInfoCustomer.response.code === 404){\n  done(true);\n}\n\ndone(false);"}},{"id":235768,"onSuccess":["fetchDetailedInfoCustomer"],"onFailure":[],"name":"fetchDetailedInfoParam","type":"script","properties":{"body":"let id = steps.customerInformationParams.customerData[0].id;\n\nlet fetchDetailedInfoConfig = {\n  url : \"https://api-proxy.pipedrive.com/persons/\"+id,\n  header: {\n    \"Authorization\": steps.ConfigParams.tpConfig.third_party_configuration.config_json.cloudElements.OAuth_Parameters.access_token || null\n  }\n}\n\ndone({\n  fetchDetailedInfoConfig: fetchDetailedInfoConfig\n});"}},{"id":240108,"onSuccess":["checkOrganizationExist_2"],"onFailure":["InvalidAccessToken"],"name":"fetchOrganizationApiFailed","type":"filter","properties":{"body":"if(steps.fetchOrganizationByName.response.code === 200){\n  done(true);\n}\n\ndone(false);"}},{"id":235769,"onSuccess":["fetchOrganizationApiFailed"],"onFailure":["fetchOrganizationApiFailed"],"name":"fetchOrganizationByName","type":"httpRequest","properties":{"retryDelay":"200","query":"${steps.fetchOrganizationParams.configuration.queryParams}","retryStatusCodes":"401","url":"${steps.fetchOrganizationParams.configuration.url}","headers":"${steps.fetchOrganizationParams.configuration.header}","retry":"true","acceptableStatusCodes":"200,404,401,500","method":"GET","retryAttempts":"5"}},{"id":235770,"onSuccess":["checkOrganizationExist_2"],"onFailure":[],"name":"fetchOrganizationByNameOld12333","type":"elementRequest","properties":{"query":"${steps.fetchOrganizationParams.configuration.queryParams}","api":"/organizations/find","method":"GET","elementInstanceId":"${config.pipedrive}"}},{"id":235771,"onSuccess":["groupUsingOrgName"],"onFailure":["UpdateConfigParams"],"name":"fetchOrganizationParams","type":"script","properties":{"body":"let email_domain_whitelist = [\"gmail\",\"yahoo\",\"hotmail\"];\nlet email;\nlet company;\nlet flag;\n\nif(steps.loopOverCustomers.entry.customer.company === undefined){\n    flag = false;\n    \n    if(steps.loopOverCustomers.entry.customer.email !== undefined){ //Generate from Email ID\n    \n      flag = true;\n      email = steps.loopOverCustomers.entry.customer.email;\n      let email_split = email.split(\"@\");\n      let email_domain = (email_split[1].split(\".\"))[0];\n      for(var i=0; i<email_domain_whitelist.length;i++){\n       if(email_domain === email_domain_whitelist[i]){\n         flag = false;\n         break;\n       }\n      }\n      \n      if(flag === true){\n        company = email_domain.charAt(0).toUpperCase() + email_domain.slice(1);\n      }\n      else{\n        flag = false;\n      }\n    }\n    \n    if(flag === false){ //Generate from Customer ID\n        company =  steps.loopOverCustomers.entry.customer.id;\n    }\n}\nelse{ //Generate From Company Name in Chargebee Customer API Response\n  company = steps.loopOverCustomers.entry.customer.company;\n}\n\nlet configuration = {\n  url : \"https://api-proxy.pipedrive.com/organizations/find\",\n  header: {\n    \"Authorization\": steps.ConfigParams.tpConfig.third_party_configuration.config_json.cloudElements.OAuth_Parameters.access_token || null\n  },\n  queryParams:{\n    term: company\n  }\n};\n\n\n\ndone({\n  configuration: configuration\n});"}},{"id":235772,"onSuccess":["customerInformationParams"],"onFailure":[],"name":"fetchPipedriveCustomer","type":"elementRequest","properties":{"query":"${steps.fetchCustomerParams.configuration.queryParams}","form":"","api":"${steps.fetchCustomerParams.configuration.apiEndPoint}","method":"GET","elementInstanceId":"${config.pipedrive}"}},{"id":235773,"onSuccess":[],"onFailure":[],"name":"fetchSubscriptionChargebee_2","type":"elementRequest","properties":{"retryDelay":"200","query":"${steps.fetchSubscriptionParams_2.fetchSubscriptionConfig.query}","retry":"true","api":"${steps.fetchSubscriptionParams_2.fetchSubscriptionConfig.url}","retryAttempts":"5","method":"GET","elementInstanceId":"${config.chargebee}"}},{"id":235774,"onSuccess":["fetchSubscriptions"],"onFailure":[],"name":"fetchSubscriptionParams","type":"script","properties":{"body":"// let payload = {\n//   url : \"/subscriptions\",\n//   query: {\n//     \"customer_id\": steps.loopOverCustomers.entry.customer.id\n//   }\n// };\n\n// if(steps.subscriptionInformation !== undefined){\n//     steps.subscriptionInformation = undefined;\n// } \n\n// done({\n//   payload: payload\n// });\n\n\n// let payload = {\n//   url: \"https://\"+steps.InputParams.input.siteName+\".integrations.\"+steps.InputParams.input.siteDomain+\"/api/activecampaign/subscription\",\n//   auth: {\n//     \"Authorization\": \"Basic \" + CE.b64(steps.InputParams.input.cbApiKey + \":\" + \"\"),\n//     \"api_key\": steps.InputParams.input.cbApiKey\n//   },\n//   query: {\n//     customer_id: steps.loopOverCustomers.entry.customer.id\n//   }\n// };\n\n// done({\n//   payload: payload\n// });\n\nlet payload = {\n  url: \"https://\"+steps.InputParams.input.siteName+\".integrations.\"+steps.InputParams.input.siteDomain+\"/api/pipedrive/subscription\",\n  auth: {\n    \"Authorization\": \"Basic \" + CE.b64(steps.InputParams.input.cbApiKey + \":\" + \"\"),\n    \"api_key\": steps.InputParams.input.cbApiKey\n  },\n  query: {\n    customer_id: steps.loopOverCustomers.entry.customer.id\n  }\n};\n\ndone({\n  payload: payload\n});"}},{"id":235775,"onSuccess":[],"onFailure":[],"name":"fetchSubscriptionParams_2","type":"script","properties":{"body":"let customer_id = steps.loopOverCustomers.entry.customer.id;\n\nif((steps.subscriptionInformation !== undefined) && ((steps.subscriptionInformation.customerId !== null) && (steps.subscriptionInformation.subscriptionData !== null))){\n  subscriptionInformation = {\n    customerId: steps.subscriptionInformation.customerId,\n    subscriptionData: steps.subscriptionInformation.subscriptionData\n  };\n}else{\n  subscriptionInformation = {\n    customerId: null,\n    subscriptionData: null\n  };\n}\n\nlet fetchSubscriptionConfig = {\n  url: '/subscriptions',\n  query:{\n    sort_by_asc:\"updated_at\",\n    \"customer_id\" : customer_id,\n    limit: 1,\n\t  status : steps.loopOverSubStatusArray.entry\n  }\n}\n\n// updated_at_after :  \"946684800\",\n// include_deleted: true,\n\n// sort_by_asc:\"created_at\",\n\n// let fetchSubscriptionConfig = {\n//   url: '/subscriptions',\n//   query:{\n//     \"customer_id\" : 'cbdemo_sir',\n//     limit: 1,\n// \t   sort_by:\"updated_at\",\n// \t   status : 'active'\n//   }\n// }\n\ndone({\n  fetchSubscriptionConfig: fetchSubscriptionConfig,\n  subscriptionInformation: subscriptionInformation\n});\n\n\n"}},{"id":235776,"onSuccess":["isSubscriptionExist"],"onFailure":["ApiError"],"name":"fetchSubscriptions","type":"httpRequest","properties":{"retryDelay":"200","query":"${steps.fetchSubscriptionParams.payload.query}","url":"${steps.fetchSubscriptionParams.payload.url}","headers":"${steps.fetchSubscriptionParams.payload.auth}","retry":"true","retryAttempts":"5","method":"GET"}},{"id":235777,"onSuccess":[],"onFailure":[],"name":"findConfiguration","type":"script","properties":{"body":"let configuration = steps.getPipedriveElementConfiguration.response.body || [];\nlet configurationId = null;\n\nlet thirdPartyInstanceId = steps.getTpConfig.response.body.third_party_configuration.config_json.cloudElements.thirdParty.instance || null;\n\nfor(var i=0; i < configuration.length; i++){\n  if(configuration[i]['key'] === \"access_token\"){\n    configurationId = configuration[i]['id'];\n    break;\n  }\n}\n\nlet payload = {\n  url: \"/instances/\"+thirdPartyInstanceId+\"/configuration/\"+configurationId,\n  body: {\n    \"propertyValue\": steps.updateConfiguration.OAuthData.OAuthDetails.access_token\n  }\n};\n\ndone({\n  payload : payload\n});\n\n"}},{"id":235778,"onSuccess":["getParentOrganization"],"onFailure":[],"name":"findParentOrganization","type":"script","properties":{"body":"let email_domain_whitelist = [\"gmail\",\"yahoo\",\"hotmail\"];\nlet email;\nlet company;\nlet flag;\n\nif(steps.getParentCustomer.response.body.data.company === undefined){\n    flag = false;\n    \n    if(steps.getParentCustomer.response.body.data.email !== undefined){ //Generate from Email ID\n    \n      flag = true;\n      email = steps.getParentCustomer.response.body.data.email;\n      let email_split = email.split(\"@\");\n      let email_domain = (email_split[1].split(\".\"))[0];\n      for(var i=0; i<email_domain_whitelist.length;i++){\n       if(email_domain === email_domain_whitelist[i]){\n         flag = false;\n         break;\n       }\n      }\n      \n      if(flag === true){\n        company = email_domain.charAt(0).toUpperCase() + email_domain.slice(1);\n      }\n      else{\n        flag = false;\n      }\n    }\n    \n    if(flag === false){ //Generate from Customer ID\n        company =  steps.getParentCustomer.response.body.data.id;\n    }\n}\nelse{ //Generate From Company Name in Chargebee Customer API Response\n  company = steps.getParentCustomer.response.body.data.company;\n}\n\nlet configuration = {\n  url : \"https://api-proxy.pipedrive.com/organizations/find\",\n  header: {\n    \"Authorization\": steps.ConfigParams.tpConfig.third_party_configuration.config_json.cloudElements.OAuth_Parameters.access_token || null\n  },\n  queryParams:{\n    term: company\n  }\n};\n\ndone({\n  configuration: configuration\n});"}},{"id":235779,"onSuccess":["delayExecution"],"onFailure":[],"name":"getAccessTokenResult_params","type":"script","properties":{"body":"// let executionData = steps.checkExecutionStatus_getNewAccessToken.response.body.entry;\n\n// for(var i=0;i < executionData.stepExecutions.length; i++){\n//   if(executionData.stepExecutions[i]['stepName'] === \"Success\"){\n//     stepId = executionData.stepExecutions[i]['id'];\n//     break;\n//   }\n// }\n\nlet executionData = steps.executionStatus_getNewAccessToken.executionData.result;\nlet stepId = null;\n\nif(executionData.stepName === \"Success\"){\n  stepId = executionData.id;\n}\n\nlet payload = {\n  url: \"/formulas/instances/executions/steps/\"+stepId+\"/values\"\n};\n\ndone({\n    payload: payload\n});"}},{"id":235780,"onSuccess":["isAuthFailed"],"onFailure":["failedToGetAccessToken"],"name":"getAccountInformationPipedrive","type":"httpRequest","properties":{"url":"${steps.ConfigParams.getAccountInfomationPipedrive.url}","headers":"${steps.ConfigParams.getAccountInfomationPipedrive.headers}","acceptableStatusCodes":"200,401","method":"GET"}},{"id":235781,"onSuccess":["updateChargebeeElementParams"],"onFailure":[],"name":"getChargebeeElementInstance","type":"request","properties":{"api":"/instances/${steps.ConfigParams.tpConfig.third_party_configuration.config_json.chargebee.instance}","method":"GET"}},{"id":235782,"onSuccess":["customerList"],"onFailure":["isChargebeeAuthFailed"],"name":"getCustomers","type":"elementRequest","properties":{"retryDelay":"200","query":"${steps.getCustomersParam.getCustomerParams.query}","retryStatusCodes":"429","retry":"true","api":"/customers","retryAttempts":"5","method":"GET","elementInstanceId":"${config.chargebee}"}},{"id":235783,"onSuccess":[],"onFailure":[],"name":"getCustomersDeleted","type":"elementRequest","properties":{"retryDelay":"200","query":"${steps.getDeletedCustomersParam.params.query}","retry":"true","api":"${steps.getDeletedCustomersParam.params.url}","retryAttempts":"5","method":"GET","elementInstanceId":"${config.chargebee}"}},{"id":235784,"onSuccess":["getCustomers"],"onFailure":[],"name":"getCustomersParam","type":"script","properties":{"body":"let recordsCount;\n\nif(steps.setOffset === undefined){\n  recordsCount = 0;\n}\n\nlet params = {\n  query: {\n \t   sort_by_asc : \"updated_at\",\n \t   limit: 50\n  }\n};\n\nif(steps.InputParams.input.initialSync === false){\n  if(steps.ConfigParams.tpConfig.third_party_configuration.config_json.cloudElements.formulas.formula_FullSyncRun.lastSyncTime !== undefined){\n      params.query.updated_at_after = steps.ConfigParams.tpConfig.third_party_configuration.config_json.cloudElements.formulas.formula_FullSyncRun.lastSyncTime;\n    if(steps.ConfigParams.params.deleteAction !== \"do_nothing\"){\n      params.query.include_deleted = true;\n    } \n  }\n}\n\nif(steps.setOffset !== undefined) {\n  // recordsCount = steps.getCustomersParam.recordsCount + steps.setOffsetCustomer.length;\n  params.query.offset = steps.setOffset.offset;\n}else{\n  params.query.offset = steps.ConfigParams.tpConfig.third_party_configuration.config_json.batch.sync_customer.get_customer || undefined;\n}\n\ndone({\n  getCustomerParams: params,\n  recordsCount: recordsCount\n});"}},{"id":235785,"onSuccess":[],"onFailure":[],"name":"getDeletedCustomersParam","type":"script","properties":{"body":"let params = {\n  url: \"/customers\",\n  query: {\n \t   limit: 30,\n \t   include_deleted: true,\n \t   sort_by_asc : \"updated_at\",\n \t   updated_at_after: steps.ConfigParams.tpConfig.third_party_configuration.config_json.cloudElements.formulas.formula_FullSyncRun.lastSyncTime\n  }\n};\n\nif(steps.setOffsetDeleted !== undefined){\n  params.query.offset = steps.setOffsetDeleted.offset;\n}\n\ndone({params:params});"}},{"id":235786,"onSuccess":["getDetailsOfOrganizationFailed"],"onFailure":["getDetailsOfOrganizationFailed"],"name":"getDetailsOfOrganization","type":"httpRequest","properties":{"url":"${steps.getDetailsOfOrganization_params.payload.url}","headers":"${steps.getDetailsOfOrganization_params.payload.header}","acceptableStatusCodes":"200,401,500","method":"GET"}},{"id":240171,"onSuccess":["updateOrgField"],"onFailure":["InvalidAccessToken"],"name":"getDetailsOfOrganizationFailed","type":"filter","properties":{"body":"done(steps.getDetailsOfOrganization.response.code === 200);"}},{"id":235787,"onSuccess":["getDetailsOfOrganization"],"onFailure":[],"name":"getDetailsOfOrganization_params","type":"script","properties":{"body":"let org_id = steps.ConfigParams.params.organizationId;\n\nlet payload = {\n  url : \"https://api-proxy.pipedrive.com/organizations/\"+org_id,\n  header: {\n    \"Authorization\": steps.ConfigParams.tpConfig.third_party_configuration.config_json.cloudElements.OAuth_Parameters.access_token || null\n  }\n};\n\ndone({\n  payload: payload\n});"}},{"id":235788,"onSuccess":["FailedToSync"],"onFailure":["ApiError"],"name":"GetError","type":"httpRequest","properties":{"query":"${steps.GetErrorParams.params.config.query}","url":"${steps.GetErrorParams.params.config.url}","headers":"${steps.GetErrorParams.params.config.auth}","method":"GET"}},{"id":235789,"onSuccess":["GetError"],"onFailure":[],"name":"GetErrorParams","type":"script","properties":{"body":"let params = steps.GetTPErrorParams.params;\nlet configuration =  steps.getTpConfig.response.body.third_party_configuration.config_json;\n\nif(steps.GetErrorParams !== undefined){\n  params.config.query.offset = steps.GetError.response.body.next_offset;\n}else{\n  params.config.query.offset = configuration.batch.sync_customer.get_error;\n}\n\ndone({params: params});"}},{"id":235790,"onSuccess":["ErrorList"],"onFailure":[],"name":"GetFailedCustomer","type":"elementRequest","properties":{"query":"${steps.CustomFieldParamsForErrorRecords.query}","api":"/customers","method":"GET","elementInstanceId":"${config.chargebee}"}},{"id":235791,"onSuccess":[],"onFailure":[],"name":"getNewAccessToken","type":"request","properties":{"body":"${steps.triggerRefreshToken.triggerParams.body}","api":"${steps.triggerRefreshToken.triggerParams.url}","retryAttempts":"1","method":"POST"}},{"id":235792,"onSuccess":["getThirdPartyInstanceDetails"],"onFailure":["FailedToGetAccessToken"],"name":"getNewToken","type":"httpRequest","properties":{"retryDelay":"200","body":"${steps.getNewToken_params.payload.body}","url":"${steps.getNewToken_params.payload.url}","headers":"${steps.getNewToken_params.payload.headers}","retry":"true","retryAttempts":"5","method":"POST"}},{"id":235793,"onSuccess":["getNewToken"],"onFailure":[],"name":"getNewToken_params","type":"script","properties":{"body":"if(steps.getTpConfig.response.body.third_party_configuration.config_json.cloudElements.OAuth_Parameters === undefined){\n  done(false);\n}\n\n\nlet params = steps.getTpConfig.response.body.third_party_configuration.config_json.cloudElements.OAuth_Parameters;\n\nlet payload = {\n  url: \"https://oauth.pipedrive.com/oauth/token\",\n  headers : {\n    \"Content-Type\" : \"application/x-www-form-urlencoded\",\n    \"Authorization\" : \"Basic \" + CE.b64(params.client_info.client_id + \":\" + params.client_info.client_secret)\n  },\n  body : \"grant_type=refresh_token&refresh_token=\" + params.refresh_token\n};\n\ndone({\n  payload: payload\n});"}},{"id":235794,"onSuccess":["getOrgFieldsPipedriveFailed"],"onFailure":[],"name":"getOrgFieldsPipedrive","type":"httpRequest","properties":{"retryDelay":"200","retryStatusCodes":"","url":"${steps.getOrgFieldsPipedrive_params.payload.url}","headers":"${steps.getOrgFieldsPipedrive_params.payload.header}","acceptableStatusCodes":"200,401,500","retry":"true","retryAttempts":"5","method":"GET"}},{"id":240169,"onSuccess":["orgFieldsConfig"],"onFailure":["InvalidAccessToken"],"name":"getOrgFieldsPipedriveFailed","type":"filter","properties":{"body":"done(steps.getOrgFieldsPipedrive.response.code === 200);"}},{"id":235795,"onSuccess":["orgFieldsConfig"],"onFailure":[],"name":"getOrgFieldsPipedriveOld1233","type":"elementRequest","properties":{"api":"/organizationFields","method":"GET","elementInstanceId":"${config.pipedrive}"}},{"id":235796,"onSuccess":["getOrgFieldsPipedrive"],"onFailure":[],"name":"getOrgFieldsPipedrive_params","type":"script","properties":{"body":"let payload = {\n  url : \"https://api-proxy.pipedrive.com/organizationFields\",\n  header: {\n    \"Authorization\": steps.ConfigParams.tpConfig.third_party_configuration.config_json.cloudElements.OAuth_Parameters.access_token || null\n  }\n};\n\ndone({\n  payload: payload\n});"}},{"id":235797,"onSuccess":["getParentCustomerFailed"],"onFailure":["getParentCustomerFailed"],"name":"getParentCustomer","type":"httpRequest","properties":{"retryDelay":"200","retryStatusCodes":"401","url":"${steps.getParentCustomer_params.params.url}","headers":"${steps.getParentCustomer_params.params.header}","acceptableStatusCodes":"200,401,500","retry":"true","method":"GET","retryAttempts":"5"}},{"id":240110,"onSuccess":["findParentOrganization"],"onFailure":["InvalidAccessToken"],"name":"getParentCustomerFailed","type":"filter","properties":{"body":"if(steps.getParentCustomer.response.code === 200){\n  done(true);\n}\n\ndone(false);"}},{"id":235798,"onSuccess":["findParentOrganization"],"onFailure":[],"name":"getParentCustomerOld123","type":"elementRequest","properties":{"api":"/customers/${steps.getParentCustomerOld123_params.params.query.id}","method":"GET","elementInstanceId":"${config.chargebee}"}},{"id":235799,"onSuccess":["getParentCustomer"],"onFailure":[],"name":"getParentCustomer_params","type":"script","properties":{"body":"let params = {\n  url : \"https://api-proxy.pipedrive.com/persons/\"+steps.loopOverCustomers.entry.customer.relationship.parent_id,\n  header: {\n    \"Authorization\": steps.ConfigParams.tpConfig.third_party_configuration.config_json.cloudElements.OAuth_Parameters.access_token || null\n  }\n};\n\n// query: {\n//     \"id\": steps.loopOverCustomers.entry.customer.relationship.parent_id\n//   }\n\n\ndone({\n  params: params\n});"}},{"id":235800,"onSuccess":["getParentOrganizationFailed"],"onFailure":["getParentOrganizationFailed"],"name":"getParentOrganization","type":"httpRequest","properties":{"query":"${steps.findParentOrganization.configuration.queryParams.term}","url":"${steps.findParentOrganization.configuration.queryParams.url}","headers":"${steps.findParentOrganization.configuration.queryParams.header}","acceptableStatusCodes":"200,404,401,500","method":"GET"}},{"id":240112,"onSuccess":["checkOrganizationExist_3"],"onFailure":["InvalidAccessToken"],"name":"getParentOrganizationFailed","type":"filter","properties":{"body":"if(steps.getParentOrganization.response.code === 200){\n  done(true);\n}\n\ndone(false);"}},{"id":235801,"onSuccess":["checkOrganizationExist_3"],"onFailure":[],"name":"getParentOrganizationOld123","type":"elementRequest","properties":{"query":"${steps.findParentOrganization.configuration.queryParams.term}","api":"/organizations/find","method":"GET","elementInstanceId":"${config.pipedrive}"}},{"id":235802,"onSuccess":["getPersonFieldsPipedriveTest"],"onFailure":[],"name":"getPersonFieldsPipedrive","type":"elementRequest","properties":{"retryDelay":"100","retryStatusCodes":"401","retry":"true","api":"/personFields","retryAttempts":"2","method":"GET","elementInstanceId":"${config.pipedrive}"}},{"id":235803,"onSuccess":["personFieldsConfig"],"onFailure":["ApiError"],"name":"getPersonFieldsPipedriveTest","type":"httpRequest","properties":{"retryDelay":"500","retryStatusCodes":"401","url":"${steps.ConfigParams.getPersonFieldsPipedrive.url}","headers":"${steps.ConfigParams.getPersonFieldsPipedrive.headers}","retry":"true","retryAttempts":"5","method":"GET"}},{"id":235804,"onSuccess":["findConfiguration"],"onFailure":[],"name":"getPipedriveElementConfiguration","type":"request","properties":{"api":"/instances/${steps.getTpConfig.response.body.third_party_configuration.config_json.cloudElements.thirdParty.instance}/configuration","method":"GET"}},{"id":235805,"onSuccess":["updatePipedriveElementInstance_params"],"onFailure":[],"name":"getPipedriveElementInstance","type":"request","properties":{"api":"/instances/${steps.ConfigParams.tpConfig.third_party_configuration.config_json.cloudElements.thirdParty.instance}","method":"GET"}},{"id":235806,"onSuccess":["getPipedriveElementConfiguration"],"onFailure":[],"name":"getResultAccessToken","type":"request","properties":{"retryDelay":"200","retry":"true","api":"${steps.getAccessTokenResult_params.payload.url}","retryAttempts":"5","method":"GET"}},{"id":235807,"onSuccess":["subscriptionList"],"onFailure":[],"name":"getSubscription","type":"elementRequest","properties":{"retryDelay":"200","query":"${steps.getSubscriptionParams.params.query}","retry":"true","api":"${steps.getSubscriptionParams.params.url}","retryAttempts":"5","method":"GET","elementInstanceId":"${config.chargebee}"}},{"id":235808,"onSuccess":["getSubscription"],"onFailure":[],"name":"getSubscriptionParams","type":"script","properties":{"body":"let params = {\n  url: \"/subscriptions\",\n  query: {\n \t   limit: 50,\n \t   include_deleted: true,\n \t   sort_by_asc : \"updated_at\",\n \t   updated_at_after : steps.ConfigParams.tpConfig.third_party_configuration.config_json.cloudElements.formulas.formula_FullSyncRun.lastSyncTime,\n  }\n};\n\nif(steps.setOffsetSubscription !== undefined){\n  params.query.offset = steps.setOffsetSubscription.offset;\n}else{\n   params.query.offset = steps.ConfigParams.tpConfig.third_party_configuration.config_json.batch.sync_customer.change_subscription || undefined;\n}\n\n\ndone({\n  params:params\n});"}},{"id":235809,"onSuccess":["updateElementInstanceParams"],"onFailure":[],"name":"getThirdPartyInstanceDetails","type":"request","properties":{"api":"/instances/${steps.getTpConfig.response.body.third_party_configuration.config_json.cloudElements.thirdParty.instance}","method":"GET"}},{"id":235810,"onSuccess":["searchPersonPipedrive_params"],"onFailure":["ApiError"],"name":"GetThirdPartyMappingDetails","type":"httpRequest","properties":{"query":"${steps.EnityMappingParams.config.query}","url":"${steps.EnityMappingParams.config.url}","headers":"${steps.EnityMappingParams.config.auth}","method":"GET"}},{"id":235811,"onSuccess":["isTokenAboutToExpire"],"onFailure":["ApiError"],"name":"getTpConfig","type":"httpRequest","properties":{"retryDelay":"200","query":"${steps.InputParams.getTpConfigParams.query}","url":"${steps.InputParams.getTpConfigParams.url}","headers":"${steps.InputParams.getTpConfigParams.auth}","retry":"true","retryAttempts":"5","method":"GET"}},{"id":240384,"onSuccess":["getTpEntityParamsFailedCustomer"],"onFailure":[],"name":"getTpEntityParamsFailed","type":"script","properties":{"body":"let apiKey=steps.InputParams.input.cbApiKey;\nlet siteName=steps.InputParams.input.siteName;\nlet siteDomain=steps.InputParams.input.siteDomain;\nlet type = steps.InputParams.input.integrationName;\n\nlet password = \"\";\n\nlet params = {\n    config :{\n      url: \"https://\"+siteName+\".\"+siteDomain+\"/api/v2/third_party_entity_mappings/retrieve\",\n      auth:{\n        Authorization: \"Basic \" + CE.b64(apiKey + \":\" + password)\n      },\n      query:{\n        integration_name: type,\n        entity_id: steps.loopOverCustomers.entry.customer.id,\n        entity_type: \"customer\",\n    }\n  }\n};\n\ndone(params);\n"}},{"id":240383,"onSuccess":["updateTpEntityFailedParams"],"onFailure":[],"name":"getTpEntityParamsFailedCustomer","type":"httpRequest","properties":{"query":"${steps.getTpEntityParamsFailed.config.query}","url":"${steps.getTpEntityParamsFailed.config.url}","headers":"${steps.getTpEntityParamsFailed.config.auth}","method":"GET"}},{"id":235812,"onSuccess":["CheckErrorRecords"],"onFailure":[],"name":"GetTPError","type":"httpRequest","properties":{"query":"${steps.GetTPErrorParams.params.config.query}","url":"${steps.GetTPErrorParams.params.config.url}","headers":"${steps.GetTPErrorParams.params.config.auth}","method":"GET"}},{"id":235813,"onSuccess":["GetTPError"],"onFailure":[],"name":"GetTPErrorParams","type":"script","properties":{"body":"let apiKey = steps.InputParams.tpConfigUpdateParams.body.api_key;\nlet siteName = steps.InputParams.tpConfigUpdateParams.body.site_name;\nlet siteDomain = steps.InputParams.input.siteDomain;\nlet type = steps.InputParams.tpConfigUpdateParams.body.integration_name;\n\nlet password = \"\";\nlet startTime;\nlet endTime;\nlet syncStaus = steps.LastSyncDetails.response.body.third_party_sync_detail;\n\nlet params = {\n\n  config: {\n    url: \"https://\" + siteName + \".\" + siteDomain + \"/api/v2/third_party_entity_mappings/list_all\",\n    auth: {\n      Authorization: \"Basic \" + CE.b64(apiKey + \":\" + password)\n    },\n    query: {\n      \"integration_name\": type,\n      \"status[is]\": \"update_failed\",\n      \"modified_at[after]\": syncStaus.context.syncData.previousSyncStart,\n      \"modified_at[before]\": syncStaus.context.syncData.previousSyncEnd\n    }\n  }\n\n};\n\ndone({ params: params });\n\n\n"}},{"id":235814,"onSuccess":["fetchOrganizationByName"],"onFailure":["createOrganizationParams"],"name":"groupUsingOrgName","type":"filter","properties":{"body":"if(steps.ConfigParams.params.groupUsingOrganization === true){\n  done(true);\n}else{\n  done(false);\n}"}},{"id":236449,"onSuccess":["updateTpConfigParams_3"],"onFailure":["UpdateOffsetParams"],"name":"hasBatchingFinished","type":"filter","properties":{"body":"let batch_size = steps.getTpConfig.response.body.third_party_configuration.config_json.batch.batch_size ;\n\nif(steps.InputParams.input.initialSync === true){\n  done(true);\n}\n\nif((steps.getSubscription && steps.getSubscription.response.body.next_offset !== undefined ) || (steps.getCustomers && steps.getCustomers.response.body.next_offset !== undefined) || (steps.GetError && steps.GetError.response.body.next_offset !== undefined)){\ndone(false);\n}else if(steps.subscriptionList && steps.subscriptionList.customerList.list && steps.subscriptionList.customerList.list.length >= batch_size){\n  done(false);\n}else if(steps.customerList && steps.customerList.contactList && steps.customerList.contactList.length >= batch_size){\n  done(false);\n}\nelse{\n  done(true);\n}\n\n\n\n\n\n\n"}},{"id":235815,"onSuccess":["updateCustomerParams"],"onFailure":["createPerson"],"name":"hasExactMatch","type":"filter","properties":{"body":"let mappedField = steps.ConfigParams.params.mappedField;\n\nlet customFieldMap = steps.ConfigParams.customFieldMap.customerFields;\nlet cb_customer_id_pipedrive = null;\nlet cb_customer_id_chargebee = steps.loopOverCustomers.entry.customer.id;\n\nif(mappedField === \"email\"){\n  done(true);\n}\n\nif(steps.fetchDetailedInfoCustomer.response.body !== undefined){\n  if(steps.fetchDetailedInfoCustomer.response.body.data !== null){\n    let body = steps.fetchDetailedInfoCustomer.response.body;\n    cb_customer_id_pipedrive = body['data'][customFieldMap['CB_Customer_ID']];\n    if(cb_customer_id_chargebee === cb_customer_id_pipedrive){\n      done(true);\n    }\n  }\n}\n\n\ndone(false);"}},{"id":235816,"onSuccess":["noMultiMatchFound"],"onFailure":["useOrgDisabled"],"name":"hasExistingPerson","type":"filter","properties":{"body":"if(steps.searchPersonPipedrive.response.body.data === null){\n  done(false);\n}else{\n  if((steps.searchPersonPipedrive.response.body.data.length === 0)){\n    done(false);\n  }else{\n    done(true);\n  }\n}\n  \n\n\n"}},{"id":235817,"onSuccess":["organizationParams"],"onFailure":["createOrganizationParams"],"name":"HasMatchingOrganization","type":"filter","properties":{"body":"if(steps.checkOrganizationExist_2.flag === false){\n  done(false);\n}else{\n  done(true);\n}"}},{"id":235818,"onSuccess":["CustomerChangeList"],"onFailure":["setOffset"],"name":"hasNextOffsetCustomer","type":"filter","properties":{"body":"let contactLength = steps.customerList.contactList !== undefined ? steps.customerList.contactList.length : 0;\nlet configuration = steps.ConfigParams.tpConfig.third_party_configuration.config_json;\nlet batch_size = configuration.batch.batch_size;\n\n\nif(steps.InputParams.input.initialSync === true){\n  done(true);\n}\nelse {\n  if(steps.getCustomers.response.body.next_offset !== undefined){\n    if(((steps.setOffset !== undefined) && (steps.setOffset.offset === steps.getCustomers.response.body.next_offset)) || contactLength >= batch_size || configuration.batch.get_customer === null){\n      done(true);\n    }\n    done(false);\n  }else{\n    done(true);\n  }\n}"}},{"id":235819,"onSuccess":[],"onFailure":[],"name":"hasNextOffsetForDeletedCustomer","type":"filter","properties":{"body":"if(steps.getCustomersDeleted.response.body.next_offset !== undefined){\n    if((steps.setOffsetDeleted !== undefined) && (steps.setOffsetDeleted.offset === steps.getCustomersDeleted.response.body.next_offset)){\n      done(false);\n    }\n    done(true);\n}else{\n  done(false);\n}\n"}},{"id":235820,"onSuccess":["setOffsetSubscription"],"onFailure":["getCustomersParam"],"name":"HasNextOffset_Subscription","type":"filter","properties":{"body":"let batch_size = steps.getTpConfig.response.body.third_party_configuration.config_json.batch.batch_size;\nlet contactLength = steps.subscriptionList.customerList.list !== undefined ? steps.subscriptionList.customerList.list.length : 0;\n\nif(steps.getSubscription.response.body.next_offset !== undefined) {\n  if(((steps.setOffsetSubscription !== undefined) && (steps.setOffsetSubscription.offset === steps.getSubscription.response.body.next_offset)) || contactLength >= batch_size){\n    done(false);\n  }\n  done(true);\n}\nelse{\n  done(false);\n}\n\n"}},{"id":235821,"onSuccess":["updateTpConfigParams_3"],"onFailure":[],"name":"hasNoNextOffset","type":"filter","properties":{"body":"if(steps.ConfigParams.params.initialSync === true) {\n  done(true);\n}\nelse {\n  if(steps.getCustomers.response.body.next_offset) {\n    done(false);\n  }else {\n  done(true);\n  }\n}\n"}},{"id":235823,"onSuccess":["getTpConfig"],"onFailure":[],"name":"InputParams","type":"script","properties":{"body":"\nlet apiToken = trigger.args.apiToken;\nlet cbApiKey = trigger.args.cbApiKey;\nlet siteName = trigger.args.siteName;\nlet siteDomain = trigger.args.siteDomain;\nlet integrationName = trigger.args.integrationName;\nlet initialSync = trigger.args.initialSync;\nlet password = trigger.args.cbPassword;\n\n// let apiKey = \"586baccb1fdb63feeb696862cecf7388f0962f20\"; \n// let mapped_field = \"email\";\n// let initialSync = \"false\";\n// let create_person = true;\n\nlet rules = trigger.args.rules;\nlet mapped_field = rules.mappedField;\nlet mappedField_pipedrive = rules.mappedField_pipedrive;\n\nif(rules.chooseCustomersToSync === \"option1\"){ //Sync All Customers\n  chooseCustomersToSync = \"sync_all_customers\";\n}\nif(rules.chooseCustomersToSync === \"option2\"){ //Sync Customers only with Subscriptions\n  chooseCustomersToSync = \"sync_customers_only_with_subscriptions\";\n}\n\nif(rules.createPeopleInPipedrive === \"true\"){\n  create_person = true;\n}else{\n  create_person = false;\n}\n\nif(rules.manageOrganizationInPipedrive === \"true\"){\n  useOrganization = true;\n}else{\n  useOrganization = false;\n}\n\nif(rules.actionCustomerSyncedToPipedrive === \"option1\"){ //Group using Organization Name\n  groupUsingOrganization = true;\n}else{\n  groupUsingOrganization = false;\n}\n\nif(rules.linkSubAttributesToPerson === \"option1\"){ //Link Attributes to Person\n  linkSubAttributesToPerson = true;\n}else{ //Link Attributes to Organization\n  linkSubAttributesToPerson = false;\n}\n\nif(rules.syncAccountHierarchies === \"true\"){ //Sync based on Account Hierarchies\n  syncAccountHierarchies = true;\n}else{\n  syncAccountHierarchies = false;\n}\n\nif(rules.customerDeletedInCB === \"option1\"){\n  deleteAction = \"do_nothing\";\n}\nif(rules.customerDeletedInCB === \"option2\"){\n  deleteAction = \"mark_person_deleted\";\n}\nif(rules.customerDeletedInCB === \"option3\"){\n  deleteAction = \"mark_person_and_org_deleted\";\n}\n\nlet getTpConfigParams = {\n    url: \"https://\"+siteName+\".\"+siteDomain+\"/api/v2/third_party_configurations\",\n    auth:{\n      Authorization: \"Basic \" + CE.b64(cbApiKey + \":\" + password)\n    },\n    query:{\n      integration_name: integrationName\n    }\n};\n\nlet tpConfigUpdateParams = {\n  url: \"https://\"+siteName+\".integrations.\"+siteDomain+\"/integrations/update_tp_integ_conf\",\n  headers: {\n    \"Content-Type\": \"application/json\",\n    \"cache-control\": \"no-cache\"\n  },\n  body:  {\n     site_name: siteName,\n     api_key: cbApiKey,\n     integration_name: integrationName\n  }\n};\n\nlet syncParams = {\n\n    url: \"https://\" + siteName + \".\" + siteDomain + \"/api/v2/third_party_sync_details/retrieve_latest_sync\",\n    auth: {\n      Authorization: \"Basic \" + CE.b64(cbApiKey + \":\" + password)\n    },\n    query: {\n      'third_party_configuration[integration_name]': integrationName\n    }\n  \n};\n\nlet input = {\n  api_token: apiToken,\n  chooseCustomersToSync: chooseCustomersToSync,\n  createPerson : create_person,\n  useOrganization: useOrganization,\n  groupUsingOrganization: groupUsingOrganization,\n  linkSubAttributesToPerson: linkSubAttributesToPerson,\n  syncAccountHierarchies: syncAccountHierarchies,\n  deleteAction: deleteAction,\n  mapped_field : mapped_field,\n  mappedField_pipedrive: mappedField_pipedrive,\n  updatePerson: true,\n  siteName: siteName,\n  siteDomain: siteDomain,\n  integrationName: integrationName,\n  cbApiKey: cbApiKey,\n  password: password,\n  initialSync: initialSync\n};\n\ndone({\n  input: input,\n  getTpConfigParams: getTpConfigParams,\n  tpConfigUpdateParams: tpConfigUpdateParams,\n  syncParams : syncParams\n});"}},{"id":235824,"onSuccess":["requestNewPipedriveToken_params"],"onFailure":["getTpEntityParamsFailed"],"name":"InvalidAccessToken","type":"filter","properties":{"body":"if((steps.searchPersonPipedrive !== undefined) && (steps.searchPersonPipedrive.response.code === 401)){\n  done(true);\n}\n\nif((steps.createPersonInPipedrive !== undefined) && (steps.createPersonInPipedrive.response.code === 401)){\n  done(true);\n}\n\nif((steps.fetchCustomerWithoutOrg !== undefined) && (steps.fetchCustomerWithoutOrg.response.code === 401)){\n  done(true);\n}\n\nif((steps.fetchDetailedInfoCustomer !== undefined) && (steps.fetchDetailedInfoCustomer.response.code === 401)){\n  done(true);\n}\n\nif((steps.updatePipedriveCustomer !== undefined) && (steps.updatePipedriveCustomer.response.code === 401)){\n  done(true);\n}\n\nif((steps.fetchOrganizationByName !== undefined) && (steps.fetchOrganizationByName.response.code === 401)){\n  done(true);\n}\n\nif((steps.searchOrganizationByName !== undefined) && (steps.searchOrganizationByName.response.code === 401)){\n  done(true);\n}\n\nif((steps.createOrganizationPipedrive !== undefined) && (steps.createOrganizationPipedrive.response.code === 401)){\n  done(true);\n}\n\nif((steps.getParentCustomer !== undefined) && (steps.getParentCustomer.response.code === 401)){\n  done(true);\n}\n\nif((steps.getParentOrganization !== undefined) && (steps.getParentOrganization.response.code === 401)){\n  done(true);\n}\n\nif((steps.createOrganizationRelationship !== undefined) && (steps.createOrganizationRelationship.response.code === 401)){\n  done(true);\n}\n\nif((steps.getOrgFieldsPipedrive !== undefined) && (steps.getOrgFieldsPipedrive.response.code === 401)){\n  done(true);\n}\n\nif((steps.getDetailsOfOrganization !== undefined) && (steps.getDetailsOfOrganization.response.code === 401)){\n  done(true);\n}\n\nif((steps.updateOrgFieldStatus !== undefined) && (steps.updateOrgFieldStatus.response.code === 401)){\n  done(true);\n}\n\nif((steps.createOrganizationField !== undefined) && (steps.createOrganizationField.response.code === 401)){\n  done(true);\n}\n\n\n\ndone(false);"}},{"id":235827,"onSuccess":["getPersonFieldsPipedriveTest"],"onFailure":["getNewToken_params"],"name":"isAuthFailed","type":"filter","properties":{"body":"if(steps.getAccountInformationPipedrive.response.code === 401){\n  done(false);\n}\n\ndone(true);"}},{"id":235828,"onSuccess":["getChargebeeElementInstance"],"onFailure":[],"name":"isChargebeeAuthFailed","type":"filter","properties":{"body":"if(steps.getCustomers.response.code === 401){\n  done(true);\n}\n\ndone(false);\n\n"}},{"id":235830,"onSuccess":["getCustomersParam"],"onFailure":["getSubscriptionParams"],"name":"isFetchSubscriptionChangedFalse","type":"filter","properties":{"body":"if(steps.InputParams.input.initialSync === false){\n  if(steps.ConfigParams.tpConfig.third_party_configuration.config_json.cloudElements.formulas.formula_FullSyncRun.lastSyncTime === undefined || steps.ConfigParams.tpConfig.third_party_configuration.config_json.batch.sync_customer.change_subscription === null){\n    done(true);\n  }else{\n    done(false);\n  }\n}\n\ndone(true);"}},{"id":240322,"onSuccess":["updateTpEntityFailedParams"],"onFailure":["ApiError"],"name":"isServerTimeout","type":"filter","properties":{"body":"if((steps.searchPersonPipedrive !== undefined) && (steps.searchPersonPipedrive.response.code === 500 || steps.searchPersonPipedrive.request.error !== undefined)){\n  done(true);\n}\n\nif((steps.createPersonInPipedrive !== undefined) && (steps.createPersonInPipedrive.response.code === 500 || steps.createPersonInPipedrive.request.error !== undefined)){\n  done(true);\n}\n\nif((steps.fetchCustomerWithoutOrg !== undefined) && (steps.fetchCustomerWithoutOrg.response.code === 500 || steps.fetchCustomerWithoutOrg.request.error !== undefined)){\n  done(true);\n}\n\nif((steps.fetchDetailedInfoCustomer !== undefined) && (steps.fetchDetailedInfoCustomer.response.code === 500 || steps.fetchDetailedInfoCustomer.request.error !== undefined)){\n  done(true);\n}\n\nif((steps.updatePipedriveCustomer !== undefined) && (steps.updatePipedriveCustomer.response.code === 500 || steps.updatePipedriveCustomer.request.error !== undefined)){\n  done(true);\n}\n\nif((steps.fetchOrganizationByName !== undefined) && (steps.fetchOrganizationByName.response.code === 500 || steps.fetchOrganizationByName.request.error !== undefined)){\n  done(true);\n}\n\nif((steps.searchOrganizationByName !== undefined) && (steps.searchOrganizationByName.response.code === 500 || steps.searchOrganizationByName.request.error !== undefined)){\n  done(true);\n}\n\nif((steps.createOrganizationPipedrive !== undefined) && (steps.createOrganizationPipedrive.response.code === 500 || steps.createOrganizationPipedrive.request.error !== undefined)){\n  done(true);\n}\n\nif((steps.getParentCustomer !== undefined) && (steps.getParentCustomer.response.code === 500 || steps.getParentCustomer.request.error !== undefined)){\n  done(true);\n}\n\nif((steps.getParentOrganization !== undefined) && (steps.getParentOrganization.response.code === 500 || steps.getParentOrganization.request.error !== undefined)){\n  done(true);\n}\n\nif((steps.createOrganizationRelationship !== undefined) && (steps.createOrganizationRelationship.response.code === 500 || steps.createOrganizationRelationship.request.error !== undefined)){\n  done(true);\n}\n\nif((steps.getOrgFieldsPipedrive !== undefined) && (steps.getOrgFieldsPipedrive.response.code === 500 || steps.getOrgFieldsPipedrive.request.error !== undefined)){\n  done(true);\n}\n\nif((steps.getDetailsOfOrganization !== undefined) && (steps.getDetailsOfOrganization.response.code === 500 || steps.getDetailsOfOrganization.request.error !== undefined)){\n  done(true);\n}\n\nif((steps.updateOrgFieldStatus !== undefined) && (steps.updateOrgFieldStatus.response.code === 500 || steps.updateOrgFieldStatus.request.error !== undefined)){\n  done(true);\n}\n\nif((steps.createOrganizationField !== undefined) && (steps.createOrganizationField.response.code === 500 || steps.createOrganizationField.request.error !== undefined)){\n  done(true);\n}\n\ndone(false);"}},{"id":235831,"onSuccess":["checkPlan"],"onFailure":["updateTpEntityParams_4"],"name":"isSubscriptionExist","type":"filter","properties":{"body":"// if(steps.fetchSubscriptions.response.code === 200){\n//   if(steps.fetchSubscriptions.response.body.list !== undefined){\n//     if(steps.fetchSubscriptions.response.body.list.length !== 0){\n//       done(true);\n//     }\n//   }\n// }\n\n// done(false);\n\n\nlet customer = steps.loopOverCustomers.entry.customer;\nlet mappedField = steps.ConfigParams.params.mappedField;\n\nsteps.ConfigParams.params.records.customerIds.push(customer.id);\n\nlet validContactFlag = true;\n\nlet chargebee_data_url = \"/admin-console/customers/\"+customer.id;\nlet cb_link = \"<a href='\"+chargebee_data_url+\"'>\"+customer.id+\"</a>\";\n\n// if(customer[mappedField] === undefined){\n//   steps.ConfigParams.params.records.errorCSV.push(cb_link +  mappedField + \" Not Available\");\n//   validContactFlag = false;\n// }\n\nif(customer[mappedField] === undefined){\n  if(mappedField === \"email\"){\n    steps.ConfigParams.params.records.errorCSV.push(cb_link + \" - No Email ID found\");\n  }else{\n    steps.ConfigParams.params.records.errorCSV.push(cb_link + \" - Custom field value is missing\");\n  }\n  validContactFlag = false;\n}\n\nif((customer[mappedField] !== undefined) && (mappedField === \"email\")){// If email domain name lenght is less than two characters. we cannot update it in Pipedrive.\n  let email_split = customer[mappedField].split(\"@\");\n  let email_domain = (email_split[1].split(\".\"))[0];\n  if(email_domain.length < 2){\n    validContactFlag = false;\n  }\n}\n\n\nif(validContactFlag === false){ //if there is no valid mapped field, then no need to check subscription\n  done(validContactFlag);\n}\n\n\nif(steps.InputParams.input.chooseCustomersToSync === \"sync_all_customers\"){\n  validContactFlag = true;\n}\n\nif(steps.InputParams.input.chooseCustomersToSync === \"sync_customers_only_with_subscriptions\"){\n  validContactFlag = false;\n  if(steps.fetchSubscriptions.response.code === 200){\n    if(steps.fetchSubscriptions.response.body !== undefined){\n      if(steps.fetchSubscriptions.response.body.Subscription !== undefined){\n        validContactFlag = true;\n      }\n      if((steps.fetchSubscriptions.response.body.status !== undefined) && ((steps.fetchSubscriptions.response.body.status === \"failuare\") || (steps.fetchSubscriptions.response.body.status === \"failure\"))){\n        validContactFlag = false;\n      }\n    }\n  }\n  if(validContactFlag === false){\n    steps.ConfigParams.params.records.errorCSV.push(cb_link + \"Subscription is missing\");\n  }\n}\n\ndone(validContactFlag);"}},{"id":235832,"onSuccess":["ConfigParams"],"onFailure":["getNewToken_params"],"name":"isTokenAboutToExpire","type":"filter","properties":{"body":"let currentTime = Math.round((new Date().getTime())/1000);\nlet expiryTime = steps.getTpConfig.response.body.third_party_configuration.config_json.cloudElements.OAuth_Parameters.expiry_time || 0;\n\nconsole.log(\"Current Time:\"+currentTime);\nconsole.log(\"Token Expiry Time:\"+expiryTime);\n\nif((expiryTime - currentTime) > (50 * 60)){ //Difference greater than 30 minutes (Unix Timestamp)\n  done(true);\n}\n\ndone(false);"}},{"id":235833,"onSuccess":["GetTPErrorParams"],"onFailure":[],"name":"LastSyncDetails","type":"httpRequest","properties":{"query":"${steps.InputParams.syncParams.query}","url":"${steps.InputParams.syncParams.url}","headers":"${steps.InputParams.syncParams.auth}","method":"GET"}},{"id":235837,"onSuccess":["fetchSubscriptionParams"],"onFailure":["hasBatchingFinished"],"name":"loopOverCustomers","type":"loop","properties":{"list":"${steps.ChargebeeCustomerList.list}"}},{"id":235838,"onSuccess":["createPersonField_params"],"onFailure":["updateTpConfigParams_1"],"name":"loopOverFieldsToCreate","type":"loop","properties":{"list":"${steps.personFieldsConfig.fieldsToCreate}"}},{"id":235841,"onSuccess":["createOrganizationField_params"],"onFailure":["updateTpConfigParams_2"],"name":"loopOverSubscriptionFieldsOrg","type":"loop","properties":{"list":"${steps.orgFieldsConfig.orgFieldsToCreate}"}},{"id":235843,"onSuccess":["updateTpEntityParams_5"],"onFailure":[],"name":"multiMatchParams","type":"script","properties":{"body":"let customer = steps.loopOverCustomers.entry.customer;\n\nlet chargebee_data_url = \"/admin-console/customers/\"+customer.id;\nlet cb_link = \"<a href='\"+chargebee_data_url+\"'>\"+customer.id+\"</a>\";\n\nsteps.ConfigParams.params.records.errorCSV.push(cb_link + \",\" + \" - Multiple Records Found in Pipedrive\");\n\ndone(steps.ConfigParams.params.records.errorCSV);"}},{"id":235844,"onSuccess":["syncAccountHierarchies"],"onFailure":[],"name":"newOrganizationCreated","type":"script","properties":{"body":"if(steps.ConfigParams.params.groupUsingOrganization === false){ //If Create New Organization Option is selected, then create a new organization for every customer synced\n  steps.ConfigParams.params.organizationId = steps.createOrganizationPipedrive.response.body.data.id;\n  done(steps.createOrganizationPipedrive.response.body.data.id);\n}\n\nif(steps.checkOrganizationExist !== undefined && steps.checkOrganizationExist.flag === true){\n  steps.ConfigParams.params.organizationId = steps.checkOrganizationExist.result.id;\n  done(steps.checkOrganizationExist.result.id);\n}else{\n  steps.ConfigParams.params.organizationId = steps.createOrganizationPipedrive.response.body.data.id;\n  done(steps.createOrganizationPipedrive.response.body.data.id);\n}"}},{"id":236999,"onSuccess":["loopOverCustomers"],"onFailure":["hasBatchingFinished"],"name":"noDataToSync","type":"filter","properties":{"body":"if(steps.CBList.list.length === 0){\n  done(false);\n}\n\ndone(true);"}},{"id":235846,"onSuccess":["fetchDetailedInfoParam"],"onFailure":["multiMatchParams"],"name":"noMultiMatchFound","type":"filter","properties":{"body":"if(steps.customerInformationParams.customerData.length > 1){\n  done(false);\n}else{\n  done(true);\n}\n"}},{"id":235847,"onSuccess":["getDetailsOfOrganization_params"],"onFailure":["loopOverSubscriptionFieldsOrg"],"name":"noOrgFieldsToCreate","type":"filter","properties":{"body":"if(steps.orgFieldsConfig.orgFieldsToCreate.length !== 0){\n  done(false);\n}\n\ndone(true);"}},{"id":235848,"onSuccess":["isFetchSubscriptionChangedFalse"],"onFailure":["loopOverFieldsToCreate"],"name":"noPersonFieldToCreate","type":"filter","properties":{"body":"if(steps.personFieldsConfig.fieldsToCreate.length !== 0){\n  done(false);\n}\n\ndone(true);"}},{"id":235849,"onSuccess":["createPerson"],"onFailure":["noMultiMatchFound"],"name":"noPersonFound","type":"filter","properties":{"body":"// if((steps.fetchCustomerWithoutOrg.response.code === 200) && (steps.fetchCustomerWithoutOrg.response.body.data === null)){\n//   done(true);\n// }\n\n// steps.customerInformationParams.customerData = steps.fetchCustomerWithoutOrg.response.body.data;\n// done(false);\n\n\nif(steps.fetchCustomerWithoutOrg.response.code !== 200){\n  done(true);\n}else{\n  if(steps.fetchCustomerWithoutOrg.response.body.data !== null){\n    if(steps.fetchCustomerWithoutOrg.response.body.data.active_flag === false){\n      done(true);\n    }else{\n      steps.customerInformationParams.customerData = steps.fetchCustomerWithoutOrg.response.body.data;\n      done(false);\n    }\n  }\n  if(steps.fetchCustomerWithoutOrg.response.body.data === null){\n    done(true);\n  }\n}"}},{"id":235850,"onSuccess":["loopOverSubscriptionFieldsOrg"],"onFailure":[],"name":"organizationFieldInformation","type":"script","properties":{"body":"let orgField = steps.createOrganizationField.response.body.data;\n\n// let organizationFieldInfo = {\n//   id: orgField.id,\n//   name: orgField.name,\n//   key: orgField.key\n// }\n\n// steps.ConfigParams.organizationFields.push(organizationFieldInfo);\n\nfieldName = orgField.name.replace(/ /g, \"_\"); //Replacing white spaces in field name with underscore while saving customfield map to tpconfig\nfieldKey = orgField.key;\n\n\nsteps.ConfigParams.customFieldMap.organizationFields[fieldName] = fieldKey;\n\ndone({\n  customFieldMap: steps.ConfigParams.customFieldMap,\n  organizationFields: steps.ConfigParams.organizationFields\n});"}},{"id":235851,"onSuccess":["newOrganizationCreated"],"onFailure":["createOrganizationPipedrive"],"name":"organizationFound","type":"filter","properties":{"body":"if(steps.ConfigParams.params.groupUsingOrganization === false){ //If Create New Organization Option is selected, then create a new organization for every customer synced\n  done(false);\n}\n\n\nif(steps.checkOrganizationExist.flag === false){\n  done(false);\n}else{\n  done(true);\n}"}},{"id":235852,"onSuccess":["getOrgFieldsPipedrive_params"],"onFailure":[],"name":"organizationParams","type":"script","properties":{"body":"let orgId = steps.checkOrganizationExist_2.result.id;\nsteps.ConfigParams.params.organizationId = orgId;\n\ndone({\n  orgId: orgId\n});\n"}},{"id":235853,"onSuccess":["noOrgFieldsToCreate"],"onFailure":[],"name":"orgFieldsConfig","type":"script","properties":{"body":"let orgFieldsToCreate = [];\nlet orgFields = steps.ConfigParams.orgFields;\nlet customFieldMap_Org = steps.ConfigParams.customFieldMap.organizationFields;\n\nlet orgFieldsInPipedrive = steps.getOrgFieldsPipedrive.response.body.data;\n\nif(steps.ConfigParams.additional_fields.customerAdditionalFields.length !== 0){\n  orgFields = orgFields.concat(steps.ConfigParams.additional_fields.customerAdditionalFields);\n}\n\nif(steps.ConfigParams.additional_fields.customFields.length !== 0){\n  orgFields = orgFields.concat(steps.ConfigParams.additional_fields.customFields);\n}\n\nif(steps.ConfigParams.additional_fields.consentFields.length !== 0){\n  orgFields = orgFields.concat(steps.ConfigParams.additional_fields.consentFields);\n}\n\nif(steps.ConfigParams.params.linkSubAttributesToPerson === false){\n  if(steps.ConfigParams.additional_fields.subscriptionAdditionalFields.length !== 0){\n    orgFields = orgFields.concat(steps.ConfigParams.additional_fields.subscriptionAdditionalFields)\n  }\n}\n\nlet orgFieldName;\n\nfor(var i=0; i < orgFields.length; i++){\n  for(var j=0; j < orgFieldsInPipedrive.length ; j++){\n    orgFieldName = orgFields[i].replace(/_/g,\" \");//Removes underscores from field name before checking whether it exists in Pipedrive. Pipedrive will be having these  Field names without underscores.\n    if(orgFieldName !== orgFieldsInPipedrive[j]['name']){\n      if(j === orgFieldsInPipedrive.length-1){\n        fieldName = orgFieldName; //Removing underscores from Field Name which is to be created in Pipedrive\n        orgFieldsParams = {\n          \"name\": fieldName,\n          \"field_type\": \"varchar\"\n        };\n       orgFieldsToCreate.push(orgFieldsParams);\n      }\n    }else{\n      customFieldMap_Org[orgFields[i]] = orgFieldsInPipedrive[j]['key'];\n      break;\n    }\n  }\n}\n\nsteps.ConfigParams.orgFieldsToCreate = orgFieldsToCreate;\n\ndone({\n  orgFieldsToCreate: orgFieldsToCreate,\n  orgFields: orgFields,\n  customFieldMap_Org: customFieldMap_Org\n});"}},{"id":235854,"onSuccess":["createOrgRelationship_params"],"onFailure":["getOrgFieldsPipedrive_params"],"name":"parentOrganizationFound","type":"filter","properties":{"body":"if(steps.checkOrganizationExist_3.flag === false){\n  done(false);\n}else{\n  done(true);\n}"}},{"id":235855,"onSuccess":["loopOverFieldsToCreate"],"onFailure":[],"name":"personFieldInformation","type":"script","properties":{"body":"let personField = steps.createPersonField.response.body.data;\n\nlet personFieldInfo = {\n  id: personField.id,\n  name: personField.name,\n  key: personField.key\n};\n\n// steps.ConfigParams.personFieldsCreated.push(personFieldInfo);\n\nfieldName = personField.name.replace(/ /g, \"_\");//Replacing white spaces in field name with underscore while saving customfield map to tpconfig\nfieldKey = personField.key;\n\n\nsteps.ConfigParams.customFieldMap.customerFields[fieldName] = fieldKey;\n\ndone({\n  customFieldMap: steps.ConfigParams.customFieldMap,\n  // personFields: steps.ConfigParams.personFieldsCreated\n});"}},{"id":235857,"onSuccess":["noPersonFieldToCreate"],"onFailure":[],"name":"personFieldsConfig","type":"script","properties":{"body":"let fieldsToCreate = [];\nlet personFields = steps.ConfigParams.personFields;\nlet customFieldMap_Person = steps.ConfigParams.customFieldMap.customerFields;\n\nif(steps.ConfigParams.additional_fields.customerAdditionalFields.length !== 0){\n  personFields = personFields.concat(steps.ConfigParams.additional_fields.customerAdditionalFields);\n}\n\nif(steps.ConfigParams.additional_fields.customFields.length !== 0){\n  personFields = personFields.concat(steps.ConfigParams.additional_fields.customFields);\n}\n\nif(steps.ConfigParams.additional_fields.consentFields.length !== 0){\n  personFields = personFields.concat(steps.ConfigParams.additional_fields.consentFields);\n}\n\nif(steps.ConfigParams.params.linkSubAttributesToPerson === true){\n  if(steps.ConfigParams.additional_fields.subscriptionAdditionalFields.length !== 0){\n    personFields = personFields.concat(steps.ConfigParams.additional_fields.subscriptionAdditionalFields);\n  }\n}\nlet personFieldsInPipedrive = null;\nif((steps.getPersonFieldsPipedriveTest.response.body.data !== undefined) && (steps.getPersonFieldsPipedriveTest.response.body.data !== null)){\n  personFieldsInPipedrive = steps.getPersonFieldsPipedriveTest.response.body.data;\n}\n\n\n// for(let i=0; i < personFields.length; i++){\n//   for(let j=0; j < personFieldsInPipedrive.length ; j++){\n//     if(personFields[i] !== personFieldsInPipedrive[j]['name']){\n//       console.log(\"pi:\"+personFields[i]);\n//       console.log(\"pj:\"+personFieldsInPipedrive[j]['name']);\n//       if(j === personFieldsInPipedrive.length){\n//         fieldName = personFields[i];\n//         personFieldParams = {\n//           \"name\": fieldName,\n//           \"field_type\": \"varchar\"\n//         };\n//       fieldsToCreate.push(personFieldParams);\n//       }\n//     }else{\n//       customFieldMap_Person[personFieldsInPipedrive[j]['name']] = personFieldsInPipedrive[j]['key'];\n//       break;\n//     }\n//   }\n// }\n\nlet i = 0;\nlet j = 0;\nlet personFieldName;\nfor(i=0; i < personFields.length; i++){\n    for(j=0; j < personFieldsInPipedrive.length ; j++){\n        personFieldName = personFields[i].replace(/_/g, \" \"); //Removes underscores from field name before checking whether it exists in Pipedrive. Pipedrive will be having these  Field names without underscores.\n        if(personFieldName === personFieldsInPipedrive[j]['name']){\n          console.log(\"pi:\"+personFields[i].replace(/_/g, \" \"));\n          console.log(\"pj:\"+personFieldsInPipedrive[j]['name']);\n            customFieldMap_Person[personFields[i]] = personFieldsInPipedrive[j]['key'];\n            break;\n        }\n    } \n    if(j === personFieldsInPipedrive.length){\n        fieldName = personFields[i].replace(/_/g, \" \"); //Removes underscores in field name while creating it in Pipedrive\n        personFieldParams = {\n          \"name\": fieldName,\n          \"field_type\": \"varchar\"\n        };\n       fieldsToCreate.push(personFieldParams);\n    }\n}\n\nsteps.ConfigParams.fieldsToCreate = fieldsToCreate;\nsteps.ConfigParams.customFieldMap.customerFields = customFieldMap_Person;\n\ndone({\n  personFields : personFields,\n  fieldsToCreate: fieldsToCreate,\n  customFieldMap_Person: customFieldMap_Person\n});"}},{"id":235862,"onSuccess":["getPipedriveElementInstance"],"onFailure":["ApiError"],"name":"requestNewPipedriveToken","type":"httpRequest","properties":{"body":"${steps.requestNewPipedriveToken_params.payload.body}","url":"${steps.requestNewPipedriveToken_params.payload.url}","headers":"${steps.requestNewPipedriveToken_params.payload.headers}","method":"POST"}},{"id":235863,"onSuccess":["requestNewPipedriveToken"],"onFailure":[],"name":"requestNewPipedriveToken_params","type":"script","properties":{"body":"let tpConfig = steps.ConfigParams.tpConfig;\n\nif(tpConfig.third_party_configuration.config_json.cloudElements.OAuth_Parameters === undefined){\n  done(false);\n}\n\nlet params = tpConfig.third_party_configuration.config_json.cloudElements.OAuth_Parameters;\n\nlet payload = {\n  url: \"https://oauth.pipedrive.com/oauth/token\",\n  headers : {\n    \"Content-Type\" : \"application/x-www-form-urlencoded\",\n    \"Authorization\" : \"Basic \" + CE.b64(params.client_info.client_id + \":\" + params.client_info.client_secret)\n  },\n  body : \"grant_type=refresh_token&refresh_token=\" + params.refresh_token\n};\n\ndone({\n  payload: payload\n});"}},{"id":235864,"onSuccess":["useOrganization"],"onFailure":["ApiError"],"name":"retrievePlan","type":"elementRequest","properties":{"api":"${steps.retrievePlan_params.payload.url}","method":"GET","elementInstanceId":"${config.chargebee}"}},{"id":235865,"onSuccess":["retrievePlan"],"onFailure":[],"name":"retrievePlan_params","type":"script","properties":{"body":"let payload = {\n  url: \"/plans/\"+steps.fetchSubscriptions.response.body.subscription.plan_id,\n};\n\n\ndone({\n  payload: payload\n});"}},{"id":235866,"onSuccess":["searchOrganizationByNameFailed"],"onFailure":["searchOrganizationByNameFailed"],"name":"searchOrganizationByName","type":"httpRequest","properties":{"retryDelay":"200","query":"${steps.fetchOrganizationParams.configuration.queryParams}","retryStatusCodes":"","url":"${steps.fetchOrganizationParams.configuration.url}","headers":"${steps.fetchOrganizationParams.configuration.header}","acceptableStatusCodes":"200,404,401,500","retry":"true","retryAttempts":"5","method":"GET"}},{"id":240115,"onSuccess":["checkOrganizationExist"],"onFailure":["InvalidAccessToken"],"name":"searchOrganizationByNameFailed","type":"filter","properties":{"body":"done(steps.searchOrganizationByName.response.code === 200);"}},{"id":235868,"onSuccess":["searchPersonPipedriveFailed"],"onFailure":["searchPersonPipedriveFailed"],"name":"searchPersonPipedrive","type":"httpRequest","properties":{"query":"${steps.searchPersonPipedrive_params.payload.query}","url":"${steps.searchPersonPipedrive_params.payload.url}","headers":"${steps.searchPersonPipedrive_params.payload.headers}","acceptableStatusCodes":"200,401,404,500","method":"GET"}},{"id":240178,"onSuccess":["customerInformationParams"],"onFailure":["InvalidAccessToken"],"name":"searchPersonPipedriveFailed","type":"filter","properties":{"body":"if(steps.searchPersonPipedrive.response.code === 200 || steps.searchPersonPipedrive.response.code === 404){\n  done(true);\n}\n\ndone(false);"}},{"id":235869,"onSuccess":["searchPersonPipedrive"],"onFailure":[],"name":"searchPersonPipedrive_params","type":"script","properties":{"body":"let mappedField = steps.ConfigParams.params.mappedField;\nlet mappedField_pipedrive = steps.ConfigParams.params.mappedField_pipedrive;\nlet TPMapping = steps.GetThirdPartyMappingDetails.response.body.third_party_entity_mapping || undefined;\n\nlet payload = {\n  url: \"https://api-proxy.pipedrive.com/searchResults/field\",\n  headers : {\n    \"Authorization\": steps.ConfigParams.tpConfig.third_party_configuration.config_json.cloudElements.OAuth_Parameters.access_token || null\n  },\n  query: {\n    exact_match : \"1\",\n    field_type : \"personField\",\n    return_item_ids : \"1\",\n    start : \"0\"\n  }\n};\n\nif(mappedField_pipedrive === \"email\"){\n  payload.query.field_key = \"email\";\n  payload.query.term = steps.loopOverCustomers.entry.customer[mappedField];\n}\n\nif(mappedField_pipedrive === \"pipedrive_person_id\"){\n  payload.query.field_key = \"id\";\n  payload.query.term = ( TPMapping === undefined || TPMapping.third_party_entity_id === undefined ) ? steps.loopOverCustomers.entry.customer[mappedField] : TPMapping.third_party_entity_id;\n}\n\n// if(mappedField === 'email'){\n//   payload.query.field_key = \"email\";\n//   payload.query.term = steps.loopOverCustomers.entry.customer.email;\n// }\n// else if(mappedField === \"id\"){\n//   payload.query.field_key = customFieldMap['CB_Customer_ID'];\n//   payload.query.term = steps.loopOverCustomers.entry.customer[mappedField];\n// }\n// else{\n//   payload.query.field_key = customFieldMap[mappedField];\n//   payload.query.term = steps.loopOverCustomers.entry.customer[mappedField];\n// }\n\ndone({\n  payload: payload\n});"}},{"id":235870,"onSuccess":["getCustomersParam"],"onFailure":[],"name":"setOffset","type":"script","properties":{"body":"done({offset: steps.getCustomers.response.body.next_offset});"}},{"id":235873,"onSuccess":["getSubscriptionParams"],"onFailure":[],"name":"setOffsetSubscription","type":"script","properties":{"body":"done({\n  offset: steps.getSubscription.response.body.next_offset \n});"}},{"id":235874,"onSuccess":["updateLoopIndex"],"onFailure":[],"name":"storeLatestAuthData","type":"script","properties":{"body":"let OAuth_Parameters = {\n  \"OAuthDetails\": steps.ConfigParams.tpConfig.third_party_configuration.config_json.cloudElements.OAuth_Parameters\n};\n\nOAuth_Parameters.OAuthDetails.access_token = steps.requestNewPipedriveToken.response.body.token_type + \" \" + steps.requestNewPipedriveToken.response.body.access_token;\nOAuth_Parameters.OAuthDetails.expiry_time = Math.round((new Date().getTime())/1000) + Number(steps.requestNewPipedriveToken.response.body.expires_in);\nOAuth_Parameters.OAuthDetails.refresh_token = steps.requestNewPipedriveToken.response.body.refresh_token;\nOAuth_Parameters.OAuthDetails.scope = steps.requestNewPipedriveToken.response.body.scope;\nOAuth_Parameters.OAuthDetails.token_type = steps.requestNewPipedriveToken.response.body.token_type;\n\nsteps.ConfigParams.tpConfig.third_party_configuration.config_json.cloudElements.OAuth_Parameters = OAuth_Parameters.OAuthDetails;\n\ndone(steps.ConfigParams.tpConfig.third_party_configuration.config_json.cloudElements.OAuth_Parameters);\n\n"}},{"id":235877,"onSuccess":["HasNextOffset_Subscription"],"onFailure":[],"name":"subscriptionList","type":"script","properties":{"body":"let subscriptions = [];\nlet temp;\nlet customerList = {\n  list: []\n};\n\nif(steps.subscriptionList !== undefined){\n  steps.subscriptionList.customerList = customerList;\n}\n\nif((steps.getSubscription.response.body.list !== undefined) && (steps.getSubscription.response.body.list.length > 0)){\n  subscriptions = steps.getSubscription.response.body.list;\n}\n\nfor(var i=0; i < subscriptions.length; i++){\n  temp = {\n          \"customer\":subscriptions[i].customer\n        };\n  customerList.list.push(temp);\n}\n\ndone({\n  customerList:customerList\n});"}},{"id":235879,"onSuccess":[],"onFailure":[],"name":"Success","type":"script","properties":{"body":"let successCSV = steps.ConfigParams.params.records.successCSV || '';\nif(successCSV !== ''){\n  successCSVLength = successCSV.length;\n}else{\n  successCSVLength = 0;\n  successCSV=[];\n}\n\nlet errorCSV =  steps.ConfigParams.params.records.errorCSV || '';\nif(errorCSV !== ''){\n  errorCSVLength = errorCSV.length;\n}else{\n  errorCSVLength = 0;\n  errorCSV=[];\n}\n\nlet sync_result = {\n  \"successCSVLength\": successCSVLength,\n  \"errorCSVLength\" : errorCSVLength,\n  \"listContent_successCSV\": successCSV,\n  \"listContent_errorCSV\": errorCSV\n};\n\ndone(sync_result);"}},{"id":235880,"onSuccess":["anyRelationshipExist"],"onFailure":["getOrgFieldsPipedrive_params"],"name":"syncAccountHierarchies","type":"filter","properties":{"body":"if(steps.ConfigParams.params.syncAccountHierarchies === true){\n  done(true);\n}else{\n  done(false);\n}"}},{"id":235881,"onSuccess":["EnityMappingParams"],"onFailure":["loopOverCustomers"],"name":"syncAllCustomers","type":"filter","properties":{"body":"done(steps.UpdateConfigParams.validContactFlag);"}},{"id":235882,"onSuccess":["CustomFieldParamsForErrorRecords"],"onFailure":[],"name":"TransformCustomerIds","type":"script","properties":{"body":"\nlet customerList = steps.CustomerChangeList.list;\nlet list;\nlet ids;\nlet errorList = steps.FailedToSync.customerIds;\n\nif(errorList.length > 0){\nfor(let i = 0; i < customerList.length; ++i){\n  if(errorList.indexOf(customerList[i].customer.id) > -1){\n     errorList.splice(errorList.indexOf(customerList[i].customer.id),1);\n  }\n} \n}\n\nif(errorList.length > 0){\n  ids = \"[\";\nfor( let i = 0; i < errorList.length; ++i){\n  ids += errorList[i];\n  if(i+1 !==  errorList.length){\n    ids += \",\";\n  }\n}\n ids += \"]\";\n}\n\ndone({errorList: errorList ,\n  ids : ids\n});\n\n\n"}},{"id":235884,"onSuccess":["getCustomers"],"onFailure":[],"name":"updateChargebeeElementInstance","type":"request","properties":{"body":"${steps.updateChargebeeElementParams.updateParams.body}","api":"${steps.updateChargebeeElementParams.updateParams.url}","method":"PUT"}},{"id":235885,"onSuccess":["updateChargebeeElementInstance"],"onFailure":[],"name":"updateChargebeeElementParams","type":"script","properties":{"body":"let chargebeeInstanceId = steps.ConfigParams.tpConfig.third_party_configuration.config_json.chargebee.instance || null;\n\nlet config = steps.getChargebeeElementInstance.response.body;\n\nlet username  = steps.InputParams.input.cbApiKey;\n\nconfig.configuration['username'] = username;\n\nlet updateParams={\n  url: \"/instances/\"+chargebeeInstanceId,\n  body: config\n};\n\ndone({\n  updateParams: updateParams\n});"}},{"id":235886,"onSuccess":["checkMappedFieldExist"],"onFailure":[],"name":"UpdateConfigParams","type":"script","properties":{"body":"let customer = steps.loopOverCustomers.entry.customer;\nlet mappedField = steps.ConfigParams.params.mappedField;\n\nsteps.ConfigParams.params.records.customerIds.push(customer.id);\nlet mappedFieldFlag = true;\nlet validContactFlag = true;\n\nlet chargebee_data_url = \"/admin-console/customers/\"+customer.id;\nlet cb_link = \"<a href='\"+chargebee_data_url+\"'>\"+customer.id+\"</a>\";\n\n// if(customer[mappedField] === undefined){\n//   steps.ConfigParams.params.records.errorCSV.push(cb_link + \",\" + mappedField + \" Not Available\");\n//   mappedFieldFlag = false;\n// }\n\nif(customer[mappedField] === undefined){\n  if(mappedField === \"email\"){\n    steps.ConfigParams.params.records.errorCSV.push(cb_link + \" - No Email ID found\");\n  }\n  steps.ConfigParams.params.records.errorCSV.push(cb_link + \" - Custom field value is missing\");\n  mappedFieldFlag = false;\n}\n\nif(mappedFieldFlag === false){ //if there is valid mapped field, then no need to check subscription\n  done({\n    hasMappedField:mappedFieldFlag,\n    validContactFlag: false\n  });\n}\n\n\nif(steps.InputParams.input.chooseCustomersToSync === \"sync_all_customers\"){\n  validContactFlag = true;\n}\n\nif(steps.InputParams.input.chooseCustomersToSync === \"sync_customers_only_with_subscriptions\"){\n  validContactFlag = false;\n  if(steps.fetchSubscriptions.response.body !== undefined){\n    if(steps.fetchSubscriptions.response.body.subscription !== undefined){\n      validContactFlag = true;\n    }\n    if((steps.fetchSubscriptions.response.body.status !== undefined) && ((steps.fetchSubscriptions.response.body.status === \"failuare\") || (steps.fetchSubscriptions.response.body.status === \"failure\"))){\n      validContactFlag = false;\n    }\n  }\n  if(validContactFlag === false){\n    steps.ConfigParams.params.records.errorCSV.push(cb_link + \",\" + \"Subscription Not Available\");\n  }\n}\n\ndone({\n  hasMappedField:mappedFieldFlag,\n  validContactFlag: validContactFlag\n});"}},{"id":235887,"onSuccess":["ConfigParams"],"onFailure":[],"name":"updateConfiguration","type":"script","properties":{"body":"let OAuth_Parameters = {\n  \"OAuthDetails\": steps.getTpConfig.response.body.third_party_configuration.config_json.cloudElements.OAuth_Parameters\n};\n\nOAuth_Parameters.OAuthDetails.access_token = steps.getNewToken.response.body.token_type + \" \" + steps.getNewToken.response.body.access_token;\nOAuth_Parameters.OAuthDetails.expiry_time = Math.round((new Date().getTime())/1000) + Number(steps.getNewToken.response.body.expires_in);\nOAuth_Parameters.OAuthDetails.refresh_token = steps.getNewToken.response.body.refresh_token;\nOAuth_Parameters.OAuthDetails.scope = steps.getNewToken.response.body.scope;\nOAuth_Parameters.OAuthDetails.token_type = steps.getNewToken.response.body.token_type;\n\ndone({\n  OAuthData: OAuth_Parameters\n});"}},{"id":235888,"onSuccess":["updatePipedriveCustomer"],"onFailure":[],"name":"updateCustomerParams","type":"script","properties":{"body":"let customFieldMap = steps.ConfigParams.customFieldMap.customerFields;\nlet orgFields = steps.ConfigParams.customFieldMap.organizationFields;\nlet chargebeeCustomer = steps.loopOverCustomers.entry.customer;\nlet pipedriveCustomerId = steps.customerInformationParams.customerData[0].id;\n\nlet subscriptionData = null;\nif(steps.fetchSubscriptions.response.body.subscription !== undefined){\n  subscriptionData = steps.fetchSubscriptions.response.body.subscription || null;\n}\n\nlet additionalFields = [];\nif(steps.ConfigParams.additional_fields.customerAdditionalFields.length !== 0){\n  additionalFields = additionalFields.concat(steps.ConfigParams.additional_fields.customerAdditionalFields);\n}\n\nif(steps.ConfigParams.params.linkSubAttributesToPerson === true){\n  if(steps.ConfigParams.additional_fields.subscriptionAdditionalFields.length !== 0){\n    additionalFields = additionalFields.concat(steps.ConfigParams.additional_fields.subscriptionAdditionalFields);\n  }\n}\n\nif(steps.ConfigParams.additional_fields.customFields.length !== 0){\n  additionalFields = additionalFields.concat(steps.ConfigParams.additional_fields.customFields);\n}\n\nif(steps.ConfigParams.additional_fields.consentFields.length !== 0){\n  additionalFields = additionalFields.concat(steps.ConfigParams.additional_fields.consentFields);\n}\n\n\nlet updatePayload = {\n  \"name\": (chargebeeCustomer.last_name === undefined) ? chargebeeCustomer.first_name : chargebeeCustomer.first_name + \" \" + chargebeeCustomer.last_name,\n  \"email\": chargebeeCustomer.email || '',\n  \"phone\": chargebeeCustomer.phone || '',\n  \"visible_to\": 3\n};\n\n// if(steps.ConfigParams.params.useOrganization === true){\n//   updatePayload[\"org_id\"] = steps.newOrganizationCreated ;\n// }\n\nif(steps.ConfigParams.params.useOrganization === true){\n  if(steps.ConfigParams.params.groupUsingOrganization === true){\n    if(steps.HasMatchingOrganization.continue === true){\n      updatePayload['org_id'] =  steps.organizationParams.orgId;\n    }else{\n      updatePayload['org_id'] = steps.newOrganizationCreated; \n    }\n  }else{\n    updatePayload['org_id'] = steps.newOrganizationCreated;\n  }\n  \n}\n\n\n// if(steps.groupUsingOrgName !== undefined){\n//   if(steps.groupUsingOrgName.continue === true){\n//     updatePayload['org_id'] = steps.ConfigParams.params.organizationId;\n//   }\n// }\n\nupdatePayload[customFieldMap['CB_Customer_ID']] = chargebeeCustomer.id;\nupdatePayload[customFieldMap['CB_Customer_MRR']] = (subscriptionData !== null && subscriptionData.mrr !== undefined) ? parseFloat(parseInt(subscriptionData.mrr, 10) / 100).toFixed(2) : 0;\nupdatePayload[customFieldMap['CB_Customer_CMRR']] = 0;\n\nif(updatePayload[customFieldMap['CB_Customer_MRR']] > 0){\n  if((steps.retrievePlan !== undefined) && (steps.retrievePlan.response.code === 200)){\n    let mrr = updatePayload[customFieldMap['CB_Customer_MRR']];\n    let plan = steps.retrievePlan.response.body.plan.id;\n    let period_unit = steps.retrievePlan.response.body.plan.period_unit;\n    let period = steps.retrievePlan.response.body.plan.period;\n    if((period !== undefined) && (period_unit !== undefined)){\n      period = Number(period);\n      if(isNaN(period) || period === 0){\n        period = 1;\n      }\n      if(period_unit ===\"year\") {\n        updatePayload[customFieldMap['CB_Customer_CMRR']] = mrr *12 * period;\n      }else if (period_unit ===\"month\") {\n        updatePayload[customFieldMap['CB_Customer_CMRR']] = mrr * period;\n      }else if (period_unit === \"week\") {\n        updatePayload[customFieldMap['CB_Customer_CMRR']] = (mrr/4) * period;\n      }else if(period_unit === \"day\"){\n        updatePayload[customFieldMap['CB_Customer_CMRR']] = (mrr/30) * period;\n      }\n    }\n  }\n}\n\n// updatePayload[customFieldMap['CB_Customer_CMRR']] = (subscriptionData !== null) ? subscriptionData.mrr : '0';\n// if((subscriptionData !== null) && (subscriptionData.billing_period_unit === \"month\")){\n//   updatePayload[customFieldMap['CB_Customer_CMRR']] = (subscriptionData !== null) ? (subscriptionData.mrr * subscriptionData.billing_period) : '0';\n// }\n\n\nif(chargebeeCustomer.deleted === false){\n  updatePayload[customFieldMap['CB_Customer_Status']] = \"Active\";\n}else{\n  updatePayload[customFieldMap['CB_Customer_Status']] = \"Deleted\";\n  if(steps.ConfigParams.params.deleteAction === \"mark_person_and_org_deleted\"){\n    updatePayload[orgFields['CB_Status']] = \"Deleted\";\n  }\n}\n\n\nfor(var i=0; i<additionalFields.length; i++){\n  if((additionalFields[i] === 'CB_Customer_Auto_Collection') && (customFieldMap['CB_Customer_Auto_Collection'] !== undefined)){\n      updatePayload[customFieldMap['CB_Customer_Auto_Collection']] = chargebeeCustomer.auto_collection || 'Not Available';\n  }\n  \n  if((additionalFields[i] === 'CB_Customer_Total_Due_Amount') && (customFieldMap['CB_Customer_Total_Due_Amount'] !== undefined)){\n      updatePayload[customFieldMap['CB_Customer_Total_Due_Amount']] = chargebeeCustomer.unbilled_charges || 'Not Available';\n  }\n  \n  if((additionalFields[i] === 'CB_Customer_Locale') && (customFieldMap['CB_Customer_Locale'] !== undefined)){\n       updatePayload[customFieldMap['CB_Customer_Locale']] = chargebeeCustomer.locale || 'Not Available';\n  }\n  \n  \n  if((additionalFields[i].startsWith(\"cf_\") === true) && (customFieldMap[additionalFields[i]] !== undefined)){\n    updatePayload[customFieldMap[additionalFields[i]]] = chargebeeCustomer[additionalFields[i]] || \"Not Available\";\n  }\n  \n  if((additionalFields[i].startsWith(\"cs_\") === true) && (customFieldMap[additionalFields[i]] !== undefined)){\n    updatePayload[customFieldMap[additionalFields[i]]] = chargebeeCustomer[additionalFields[i]] || \"Not Available\";\n  }\n  \n  if((subscriptionData !== null) && (steps.ConfigParams.params.linkSubAttributesToPerson === true)){\n    if((additionalFields[i] === 'CB_Subscription_ID') && (customFieldMap['CB_Subscription_ID'] !== undefined)){\n      updatePayload[customFieldMap['CB_Subscription_ID']] = subscriptionData.id || 'Not Available';\n    }\n    \n    if((additionalFields[i] === 'CB_Subscription_Status') && (customFieldMap['CB_Subscription_Status'] !== undefined)){\n      updatePayload[customFieldMap['CB_Subscription_Status']] = subscriptionData.status || 'Not Available';\n    }\n    \n    if((additionalFields[i] === 'CB_Subscription_Currency') && (customFieldMap['CB_Subscription_Currency'] !== undefined)){\n      updatePayload[customFieldMap['CB_Subscription_Currency']] = subscriptionData.currency_code || 'Not Available';\n    }\n    \n    if((additionalFields[i] === 'CB_Subscription_Plan_Name') && (customFieldMap['CB_Subscription_Plan_Name'] !== undefined)){\n      updatePayload[customFieldMap['CB_Subscription_Plan_Name']] = subscriptionData.plan_id || 'Not Available';\n    }\n    \n    if((additionalFields[i] === 'CB_Subscription_Created_At') && (customFieldMap['CB_Subscription_Created_At'] !== undefined)){\n      updatePayload[customFieldMap['CB_Subscription_Created_At']] = subscriptionData.created_at || 'Not Available';\n    }\n    \n    if((additionalFields[i] === 'CB_Subscription_Trial_start') && (customFieldMap['CB_Subscription_Trial_start'] !== undefined)){\n      updatePayload[customFieldMap['CB_Subscription_Trial_start']] = subscriptionData.trial_start || 'Not Available';\n    }\n    \n    if((additionalFields[i] === 'CB_Subscription_Trial_end') && (customFieldMap['CB_Subscription_Trial_end'] !== undefined)){\n      updatePayload[customFieldMap['CB_Subscription_Trial_end']] = subscriptionData.trial_end || 'Not Available';\n    }\n    \n    if((additionalFields[i] === 'CB_Subscription_Started_At') && (customFieldMap['CB_Subscription_Started_At'] !== undefined)){\n      updatePayload[customFieldMap['CB_Subscription_Started_At']] = subscriptionData.started_at || 'Not Available';\n    }\n    \n    if((additionalFields[i] === 'CB_Subscription_Activated_At') && (customFieldMap['CB_Subscription_Activated_At'] !== undefined)){\n      updatePayload[customFieldMap['CB_Subscription_Activated_At']] = subscriptionData.activated_at || 'Not Available';\n    }\n    \n    if((additionalFields[i] === 'CB_Gift_Subscription') && (customFieldMap['CB_Gift_Subscription'] !== undefined)){\n      updatePayload[customFieldMap['CB_Gift_Subscription']] = subscriptionData.gift_id || 'Not Available';\n    }\n    \n    if((additionalFields[i] === 'CB_Subscription_CMRR') && (customFieldMap['CB_Subscription_CMRR'] !== undefined)){\n      updatePayload[customFieldMap['CB_Subscription_CMRR']] = subscriptionData.cmrr || 'Not Available';\n    }\n    \n    if((additionalFields[i] === 'CB_Subscription_Cancel_Reason') && (customFieldMap['CB_Subscription_Cancel_Reason'] !== undefined)){\n      updatePayload[customFieldMap['CB_Subscription_Cancel_Reason']] = subscriptionData.cancel_reason || 'Not Available';\n    }\n    \n    if((additionalFields[i] === 'CB_Subscription_Cancelled_At') && (customFieldMap['CB_Subscription_Cancelled_At'] !== undefined)){\n      updatePayload[customFieldMap['CB_Subscription_Cancelled_At']] = subscriptionData.cancelled_at || 'Not Available';\n    }\n    \n    if((additionalFields[i] === 'CB_Subscription_Start_At') && (customFieldMap['CB_Subscription_Start_At'] !== undefined)){\n      updatePayload[customFieldMap['CB_Subscription_Start_At']] = subscriptionData.start_date || 'Not Available';\n    }\n    \n    if((additionalFields[i] === 'CB_Subscription_Pause_At') && (customFieldMap['CB_Subscription_Pause_At'] !== undefined)){\n      updatePayload[customFieldMap['CB_Subscription_Pause_At']] = subscriptionData.pause_date || 'Not Available';\n    }\n    \n    if((additionalFields[i] === 'CB_Subscription_Resume_At') && (customFieldMap['CB_Subscription_Resume_At'] !== undefined)){\n      updatePayload[customFieldMap['CB_Subscription_Resume_At']] = subscriptionData.resume_date || 'Not Available';\n    }\n    \n    if((additionalFields[i] === 'CB_Subscription_Next_Billing_At') && (customFieldMap['CB_Subscription_Next_Billing_At'] !== undefined)){\n      updatePayload[customFieldMap['CB_Subscription_Next_Billing_At']] = subscriptionData.next_billing_at || 'Not Available';\n    }\n    \n    if((additionalFields[i] === 'CB_Subscription_Current_term_start') && (customFieldMap['CB_Subscription_Current_term_start'] !== undefined)){\n      updatePayload[customFieldMap['CB_Subscription_Current_term_start']] = subscriptionData.current_term_start || 'Not Available';\n    }\n    \n    if((additionalFields[i] === 'CB_Subscription_Current_term_end') && (customFieldMap['CB_Subscription_Current_term_end'] !== undefined)){\n      updatePayload[customFieldMap['CB_Subscription_Current_term_end']] = subscriptionData.current_term_end || 'Not Available';\n    }\n  }\n}\n\n// if(customFieldMap['CB_Customer_Auto_Collection'] !== undefined){\n//   updatePayload[customFieldMap['CB_Customer_Auto_Collection']] = chargebeeCustomer.auto_collection || 'Not Available';\n// }\n\n// if(customFieldMap['CB_Customer_Total_Due_Amount'] !== undefined){\n//   updatePayload[customFieldMap['CB_Customer_Total_Due_Amount']] = chargebeeCustomer.unbilled_charges || 'Not Available';\n// }\n\n// if(customFieldMap['CB_Customer_Locale'] !== undefined){\n//   updatePayload[customFieldMap['CB_Customer_Locale']] = chargebeeCustomer.locale || 'Not Available';\n// }\n\nlet requestPayload = {\n  url: \"https://api-proxy.pipedrive.com/persons/\"+pipedriveCustomerId,\n  headers : {\n    \"Authorization\": steps.ConfigParams.tpConfig.third_party_configuration.config_json.cloudElements.OAuth_Parameters.access_token || null\n  }\n}\n\n\ndone({\n  pipedriveCustomerId: pipedriveCustomerId,\n  updatePayload: updatePayload,\n  requestPayload: requestPayload\n});\n"}},{"id":235890,"onSuccess":["updateThirdPartyInstance"],"onFailure":[],"name":"updateElementInstanceParams","type":"script","properties":{"body":"let thirdPartyElementId = steps.getTpConfig.response.body.third_party_configuration.config_json.cloudElements.thirdParty.instance || null;\n\nlet config = steps.getThirdPartyInstanceDetails.response.body;\n\nlet accessToken  = steps.getNewToken.response.body.access_token;\nlet tokenType = steps.getNewToken.response.body.token_type;\n\nconfig.configuration['access_token'] = tokenType + \" \" + accessToken;\n\nlet updateParams={\n  url: \"/instances/\"+thirdPartyElementId,\n  body: config\n};\n\ndone({\n  updateParams: updateParams\n});"}},{"id":235892,"onSuccess":["loopOverCustomers"],"onFailure":[],"name":"updateLog","type":"script","properties":{"body":"let customer = steps.loopOverCustomers.entry.customer;\nlet chargebee_data_url = \"/admin-console/customers/\"+customer.id;\nlet cb_link = \"<a href='\"+chargebee_data_url+\"' target=\\\"blank\\\">\"+customer.id+\"</a>\";\n\nif((steps.updatePipedriveCustomer.response.code !== 200) && (steps.updatePipedriveCustomer.response.code !== 201)){\n  steps.ConfigParams.params.records.errorCSV.push(cb_link + \",\" + \"Sync Failed\");\n  done(steps.ConfigParams.params.records.errorCSV);\n}\n\n\nlet pipedrive = steps.updatePipedriveCustomer.response.body.data;\nlet company_domain = steps.getAccountInformationPipedrive.response.body.data.company_domain;\nlet pipedrive_data_url = \"https://\"+company_domain+\".pipedrive.com/person/\" + pipedrive.id;\nlet pipedrive_link = \"<a href='\"+pipedrive_data_url+\"' target=\\\"blank\\\">\"+pipedrive.id+\"</a>\";\n\nsteps.ConfigParams.params.records.successCSV.push(\"Customer ID \" + cb_link + \" is synced as \" + pipedrive_link + \" in Pipedrive\");\nsteps.ConfigParams.params.records.customerSyncedIds.push(customer.id);\n\ndone(steps.ConfigParams.params.records.successCSV);\n\n"}},{"id":235893,"onSuccess":["loopOverCustomers"],"onFailure":[],"name":"updateLoopIndex","type":"script","properties":{"body":"steps.loopOverCustomers.index = (steps.loopOverCustomers.index-1);\n\ndone(steps.loopOverCustomers.index);"}},{"id":236451,"onSuccess":["BatchSuccess"],"onFailure":[],"name":"UpdateOffset","type":"httpRequest","properties":{"body":"${steps.UpdateOffsetParams.tpConfigUpdateParams.body}","url":"${steps.UpdateOffsetParams.tpConfigUpdateParams.url}","headers":"${steps.UpdateOffsetParams.tpConfigUpdateParams.headers}","method":"POST"}},{"id":236450,"onSuccess":["UpdateOffset"],"onFailure":[],"name":"UpdateOffsetParams","type":"script","properties":{"body":"let offset;\n\nlet apiKey = steps.InputParams.tpConfigUpdateParams.body.api_key;\nlet siteName = steps.InputParams.tpConfigUpdateParams.body.site_name;\nlet siteDomain = steps.InputParams.input.siteDomain;\nlet type = steps.InputParams.tpConfigUpdateParams.body.integration_name;\n\nlet configuration = steps.getTpConfig.response.body.third_party_configuration.config_json;\nlet batch_size = configuration.batch.batch_size;\n\nif(steps.getSubscription && steps.getSubscription.response.body.next_offset !== undefined) {\n  offset = steps.getSubscription.response.body.next_offset;\n   configuration.batch.sync_customer.change_subscription = offset;\n}\nelse if(steps.GetError && steps.GetError.response.body.next_offset !== undefined){\n  offset =  steps.GetError.response.body.next_offset;\n   configuration.batch.sync_customer={\n     \"get_error\" : offset,\n     \"get_customer\":null,\n     \"change_subscription\" : null,\n     \"batch_size\":batch_size\n   }\n     ;\n}\nelse if(steps.getCustomers && steps.getCustomers.response.body.next_offset !== undefined){\n  offset = steps.getCustomers.response.body.next_offset;\n   configuration.batch.sync_customer={\n     \"get_customer\" : offset,\n     \"change_subscription\" : null,\n     \"batch_size\":batch_size\n   };\n}\nelse{\n  \n   if(steps.subscriptionList && steps.subscriptionList.customerList.list.length >= batch_size){\n  configuration.batch.sync_customer = {\n     \"change_subscription\" : null,\n     \"batch_size\":batch_size\n   };\n} if(steps.customerList && steps.customerList.contactList.length >= batch_size && steps.subscriptionList &&  steps.subscriptionList.customerList.list.length < steps.customerList.contactList.length){\n    configuration.batch.sync_customer = {\n     \"get_customer\" : null,\n     \"change_subscription\" : null,\n     \"batch_size\":batch_size\n   };\n}if(steps.customerList && steps.customerList.contactList.length >= batch_size && steps.subscriptionList === undefined){\n    configuration.batch.sync_customer = {\n     \"get_customer\" : null,\n     \"change_subscription\" : null,\n     \"batch_size\":batch_size\n   };\n} \n\n  // offset = undefined;\n}\n\n// configuration.batch.batch_no =configuration.batch.batch_no + 1;\nconfiguration.batch.sync_customer.status = \"running\";\n\n// if(trigger.args['siteName'] === \"actcamp-test\"){\n//   configuration.batch.batch_size = \"1000\";\n// }\n\nlet tpConfigUpdateParams = {\n  url: \"https://\" + siteName + \".integrations.\" + siteDomain + \"/integrations/update_tp_integ_conf\",\n  headers: {\n    \"Content-Type\": \"application/json\",\n    \"cache-control\": \"no-cache\"\n  },\n  body: {\n    integration_name: type,\n    site_name: siteName,\n    api_key: apiKey,\n    config_json: configuration\n  }\n};\n\ndone({\n  tpConfigUpdateParams: tpConfigUpdateParams\n});\n\n\n\n"}},{"id":235894,"onSuccess":["updateOrgFieldStatus"],"onFailure":[],"name":"updateOrgField","type":"script","properties":{"body":"let customFieldMap = steps.ConfigParams.customFieldMap.organizationFields;\nlet org_id = steps.ConfigParams.params.organizationId;\n\nlet subscriptionData = null;\n// if(steps.fetchSubscriptions.response.body.length !== 0){\n//   subscriptionData = steps.fetchSubscriptions.response.body || null;\n// }\nif(steps.fetchSubscriptions.response.body.subscription !== undefined){\n  subscriptionData = steps.fetchSubscriptions.response.body.subscription || null;\n}\n\nlet subscription_mrr = (subscriptionData !== null && subscriptionData.mrr !== undefined) ? parseFloat(parseInt(subscriptionData.mrr, 10) / 100).toFixed(2) : 0;\n\nlet subscription_cmrr = 0;\n\nif(subscription_mrr > 0){\n  if((steps.retrievePlan !== undefined) && (steps.retrievePlan.response.code === 200)){\n    let mrr = subscription_mrr;\n    let plan = steps.retrievePlan.response.body.plan.id;\n    let period_unit = steps.retrievePlan.response.body.plan.period_unit;\n    let period = steps.retrievePlan.response.body.plan.period;\n    if((period !== undefined) && (period_unit !== undefined)){\n      period = Number(period);\n      if(isNaN(period) || period === 0){\n        period = 1;\n      }\n      if(period_unit ===\"year\") {\n        subscription_cmrr = mrr *12 * period;\n      }else if (period_unit ===\"month\") {\n        subscription_cmrr = mrr * period;\n      }else if (period_unit === \"week\") {\n        subscription_cmrr = (mrr/4) * period;\n      }else if(period_unit === \"day\"){\n        subscription_cmrr = (mrr/30) * period;\n      }\n    }\n  }\n}\n\nlet updateOrgConfig = {\n  url : \"https://api-proxy.pipedrive.com/organizations/\"+org_id,\n  header: {\n    \"Authorization\": steps.ConfigParams.tpConfig.third_party_configuration.config_json.cloudElements.OAuth_Parameters.access_token || null\n  },\n  body:{\n  }\n};\n\nupdateOrgConfig.body[customFieldMap['CB_Status']] = \"Active\";\n\nif(steps.ConfigParams.params.deleteAction === \"mark_person_and_org_deleted\"){\n  if((steps.getDetailsOfOrganization.response.code === 200) && (steps.getDetailsOfOrganization.response.body.data.people_count < 2)){\n    updateOrgConfig.body[customFieldMap['CB_Status']] = \"Deleted\";\n  }\n}\n\nif((subscriptionData !== null) && (steps.ConfigParams.params.linkSubAttributesToPerson === false)){\n  let additionalFields = ((steps.ConfigParams.additional_fields.subscriptionAdditionalFields !== undefined) && (steps.ConfigParams.additional_fields.subscriptionAdditionalFields.length !== 0)) ? steps.ConfigParams.additional_fields.subscriptionAdditionalFields : [];\n  \n  for(var i=0; i < additionalFields.length; i++){\n    if((additionalFields[i] === 'CB_Subscription_ID') && (customFieldMap['CB_Subscription_ID'] !== undefined)){\n      updateOrgConfig.body[customFieldMap['CB_Subscription_ID']] = subscriptionData.id || 'Not Available';\n    }\n    \n    if((additionalFields[i] === 'CB_Subscription_MRR') && (customFieldMap['CB_Subscription_MRR'] !== undefined)){\n      updateOrgConfig.body[customFieldMap['CB_Subscription_MRR']] = subscription_mrr;\n    }\n    \n    if((additionalFields[i] === 'CB_Subscription_Status') && (customFieldMap['CB_Subscription_Status'] !== undefined)){\n      updateOrgConfig.body[customFieldMap['CB_Subscription_Status']] = subscriptionData.status || 'Not Available';\n    }\n    \n    if((additionalFields[i] === 'CB_Subscription_Currency') && (customFieldMap['CB_Subscription_Currency'] !== undefined)){\n      updateOrgConfig.body[customFieldMap['CB_Subscription_Currency']] = subscriptionData.currency_code || 'Not Available';\n    }\n    \n    if((additionalFields[i] === 'CB_Subscription_Plan_Name') && (customFieldMap['CB_Subscription_Plan_Name'] !== undefined)){\n      updateOrgConfig.body[customFieldMap['CB_Subscription_Plan_Name']] = subscriptionData.plan_id || 'Not Available';\n    }\n    \n    if((additionalFields[i] === 'CB_Subscription_Created_At') && (customFieldMap['CB_Subscription_Created_At'] !== undefined)){\n      updateOrgConfig.body[customFieldMap['CB_Subscription_Created_At']] = subscriptionData.created_at || 'Not Available';\n    }\n    \n    if((additionalFields[i] === 'CB_Subscription_Trial_start') && (customFieldMap['CB_Subscription_Trial_start'] !== undefined)){\n      updateOrgConfig.body[customFieldMap['CB_Subscription_Trial_start']] = subscriptionData.trial_start || 'Not Available';\n    }\n    \n    if((additionalFields[i] === 'CB_Subscription_Trial_end') && (customFieldMap['CB_Subscription_Trial_end'] !== undefined)){\n      updateOrgConfig.body[customFieldMap['CB_Subscription_Trial_end']] = subscriptionData.trial_end || 'Not Available';\n    }\n    \n    if((additionalFields[i] === 'CB_Subscription_Started_At') && (customFieldMap['CB_Subscription_Started_At'] !== undefined)){\n      updateOrgConfig.body[customFieldMap['CB_Subscription_Started_At']] = subscriptionData.started_at || 'Not Available';\n    }\n    \n    if((additionalFields[i] === 'CB_Subscription_Activated_At') && (customFieldMap['CB_Subscription_Activated_At'] !== undefined)){\n      updateOrgConfig.body[customFieldMap['CB_Subscription_Activated_At']] = subscriptionData.activated_at || 'Not Available';\n    }\n    \n    if((additionalFields[i] === 'CB_Gift_Subscription') && (customFieldMap['CB_Gift_Subscription'] !== undefined)){\n      updateOrgConfig.body[customFieldMap['CB_Gift_Subscription']] = subscriptionData.gift_id || 'Not Available';\n    }\n    \n    if((additionalFields[i] === 'CB_Subscription_CMRR') && (customFieldMap['CB_Subscription_CMRR'] !== undefined)){\n      updateOrgConfig.body[customFieldMap['CB_Subscription_CMRR']] = subscription_cmrr;\n    }\n    \n    if((additionalFields[i] === 'CB_Subscription_Cancel_Reason') && (customFieldMap['CB_Subscription_Cancel_Reason'] !== undefined)){\n      updateOrgConfig.body[customFieldMap['CB_Subscription_Cancel_Reason']] = subscriptionData.cancel_reason || 'Not Available';\n    }\n    \n    if((additionalFields[i] === 'CB_Subscription_Cancelled_At') && (customFieldMap['CB_Subscription_Cancelled_At'] !== undefined)){\n      updateOrgConfig.body[customFieldMap['CB_Subscription_Cancelled_At']] = subscriptionData.cancelled_at || 'Not Available';\n    }\n    \n    if((additionalFields[i] === 'CB_Subscription_Start_At') && (customFieldMap['CB_Subscription_Start_At'] !== undefined)){\n      updateOrgConfig.body[customFieldMap['CB_Subscription_Start_At']] = subscriptionData.start_date || 'Not Available';\n    }\n    \n    if((additionalFields[i] === 'CB_Subscription_Pause_At') && (customFieldMap['CB_Subscription_Pause_At'] !== undefined)){\n      updateOrgConfig.body[customFieldMap['CB_Subscription_Pause_At']] = subscriptionData.pause_date || 'Not Available';\n    }\n    \n    if((additionalFields[i] === 'CB_Subscription_Resume_At') && (customFieldMap['CB_Subscription_Resume_At'] !== undefined)){\n      updateOrgConfig.body[customFieldMap['CB_Subscription_Resume_At']] = subscriptionData.resume_date || 'Not Available';\n    }\n    \n    if((additionalFields[i] === 'CB_Subscription_Next_Billing_At') && (customFieldMap['CB_Subscription_Next_Billing_At'] !== undefined)){\n      updateOrgConfig.body[customFieldMap['CB_Subscription_Next_Billing_At']] = subscriptionData.next_billing_at || 'Not Available';\n    }\n    \n    if((additionalFields[i] === 'CB_Subscription_Current_term_start') && (customFieldMap['CB_Subscription_Current_term_start'] !== undefined)){\n      updateOrgConfig.body[customFieldMap['CB_Subscription_Current_term_start']] = subscriptionData.current_term_start || 'Not Available';\n    }\n    \n    if((additionalFields[i] === 'CB_Subscription_Current_term_end') && (customFieldMap['CB_Subscription_Current_term_end'] !== undefined)){\n      updateOrgConfig.body[customFieldMap['CB_Subscription_Current_term_end']] = subscriptionData.current_term_end || 'Not Available';\n    }\n  }\n}\n\ndone({\n  org_id: org_id,\n  updateOrgConfig: updateOrgConfig\n});\n\n"}},{"id":235895,"onSuccess":["updateOrgFieldStatusFailed"],"onFailure":["updateOrgFieldStatusFailed"],"name":"updateOrgFieldStatus","type":"httpRequest","properties":{"query":"","body":"${steps.updateOrgField.updateOrgConfig.body}","url":"${steps.updateOrgField.updateOrgConfig.url}","headers":"${steps.updateOrgField.updateOrgConfig.header}","acceptableStatusCodes":"200,401,500","method":"PUT"}},{"id":240173,"onSuccess":["UpdateConfigParams"],"onFailure":["InvalidAccessToken"],"name":"updateOrgFieldStatusFailed","type":"filter","properties":{"body":"done(steps.updateOrgFieldStatus.response.code === 200);"}},{"id":235897,"onSuccess":["InvalidAccessToken"],"onFailure":["updateTpEntityParams_2"],"name":"updatePersonAuthError","type":"filter","properties":{"body":"if(steps.updatePipedriveCustomer.response.code === 401){\n  done(true);\n}\n\ndone(false);"}},{"id":235898,"onSuccess":["updatePipedriveCustomerFailed"],"onFailure":["updatePipedriveCustomerFailed"],"name":"updatePipedriveCustomer","type":"httpRequest","properties":{"retryDelay":"200","body":"${steps.updateCustomerParams.updatePayload}","url":"${steps.updateCustomerParams.requestPayload.url}","headers":"${steps.updateCustomerParams.requestPayload.headers}","acceptableStatusCodes":"200,201,401,500","retry":"true","retryAttempts":"5","method":"PUT"}},{"id":240182,"onSuccess":["updateTpEntityParams_2"],"onFailure":["updatePersonAuthError"],"name":"updatePipedriveCustomerFailed","type":"filter","properties":{"body":"done(steps.updatePipedriveCustomer.response.code === 200 || steps.updatePipedriveCustomer.response.code === 201);"}},{"id":235900,"onSuccess":["storeLatestAuthData"],"onFailure":[],"name":"updatePipedriveElementInstance","type":"request","properties":{"body":"${steps.updatePipedriveElementInstance_params.updateParams.body}","api":"${steps.updatePipedriveElementInstance_params.updateParams.url}","method":"PUT"}},{"id":235901,"onSuccess":["updatePipedriveElementInstance"],"onFailure":[],"name":"updatePipedriveElementInstance_params","type":"script","properties":{"body":"let thirdPartyElementId = steps.ConfigParams.tpConfig.third_party_configuration.config_json.cloudElements.thirdParty.instance || null;\n\nlet config = steps.getPipedriveElementInstance.response.body;\n\nlet accessToken  = steps.requestNewPipedriveToken.response.body.access_token;\nlet tokenType = steps.requestNewPipedriveToken.response.body.token_type;\n\nconfig.configuration['access_token'] = tokenType + \" \" + accessToken;\n\nlet updateParams={\n  url: \"/instances/\"+thirdPartyElementId,\n  body: config\n};\n\ndone({\n  updateParams: updateParams\n});"}},{"id":235902,"onSuccess":["updateConfiguration"],"onFailure":[],"name":"updateThirdPartyInstance","type":"request","properties":{"body":"${steps.updateElementInstanceParams.updateParams.body}","api":"${steps.updateElementInstanceParams.updateParams.url}","method":"PUT"}},{"id":235903,"onSuccess":["isFetchSubscriptionChangedFalse"],"onFailure":["ApiError"],"name":"updateTpConfig_1","type":"httpRequest","properties":{"retryDelay":"200","body":"${steps.updateTpConfigParams_1.tpConfigUpdateParams.body}","url":"${steps.updateTpConfigParams_1.tpConfigUpdateParams.url}","headers":"${steps.updateTpConfigParams_1.tpConfigUpdateParams.headers}","retry":"true","retryAttempts":"5","method":"POST"}},{"id":235904,"onSuccess":["getDetailsOfOrganization_params"],"onFailure":["ApiError"],"name":"updateTpConfig_2","type":"httpRequest","properties":{"retryDelay":"200","body":"${steps.updateTpConfigParams_2.tpConfigUpdateParams.body}","url":"${steps.updateTpConfigParams_2.tpConfigUpdateParams.url}","headers":"${steps.updateTpConfigParams_2.tpConfigUpdateParams.headers}","retry":"true","retryAttempts":"5","method":"POST"}},{"id":235905,"onSuccess":["Success"],"onFailure":["ApiError"],"name":"updateTpConfig_3","type":"httpRequest","properties":{"retryDelay":"200","body":"${steps.updateTpConfigParams_3.tpConfigUpdateParams.body}","url":"${steps.updateTpConfigParams_3.tpConfigUpdateParams.url}","headers":"${steps.updateTpConfigParams_3.tpConfigUpdateParams.headers}","retry":"true","retryAttempts":"5","method":"POST"}},{"id":235906,"onSuccess":["updateTpConfig_1"],"onFailure":[],"name":"updateTpConfigParams_1","type":"script","properties":{"body":"let customFieldMap = steps.ConfigParams.customFieldMap;\nlet configJson = steps.ConfigParams.tpConfig.third_party_configuration.config_json;\n\nconfigJson.cloudElements.customFieldMap = customFieldMap;\n\nlet tpConfigUpdateParams = steps.InputParams.tpConfigUpdateParams;\n\ntpConfigUpdateParams.body.config_json = configJson;\n\ndone({\n  tpConfigUpdateParams: tpConfigUpdateParams\n});\n\n\n\n"}},{"id":235907,"onSuccess":["updateTpConfig_2"],"onFailure":[],"name":"updateTpConfigParams_2","type":"script","properties":{"body":"let customFieldMap = steps.ConfigParams.customFieldMap;\nlet configJson = steps.ConfigParams.tpConfig.third_party_configuration.config_json;\n\nconfigJson.cloudElements.customFieldMap = customFieldMap;\n\nlet tpConfigUpdateParams = steps.InputParams.tpConfigUpdateParams;\n\ntpConfigUpdateParams.body.config_json = configJson;\n\ndone({\n  tpConfigUpdateParams: tpConfigUpdateParams\n});"}},{"id":235908,"onSuccess":["updateTpConfig_3"],"onFailure":[],"name":"updateTpConfigParams_3","type":"script","properties":{"body":"let customFieldMap = steps.ConfigParams.customFieldMap;\nlet configJson = steps.ConfigParams.tpConfig.third_party_configuration.config_json;\n\nconfigJson.cloudElements.customFieldMap = customFieldMap;\nconfigJson.cloudElements.thirdParty.company_domain = steps.getAccountInformationPipedrive.response.body.data.company_domain || null;\n\nlet tpConfigUpdateParams = steps.InputParams.tpConfigUpdateParams;\n\nif(steps.InputParams.input.initialSync === false){\n  configJson.batch.sync_customer = {\n     \"get_customer\" : null,\n     \"get_error\" : null,\n     \"change_subscription\" : null,\n     \"status\": \"success\"\n   };\n   \n}\n\ntpConfigUpdateParams.body.config_json = configJson;\n\n\ndone({\n  tpConfigUpdateParams: tpConfigUpdateParams\n});"}},{"id":235909,"onSuccess":["createLog"],"onFailure":["ApiError"],"name":"updateTpEntity_1","type":"httpRequest","properties":{"retryDelay":"200","query":"${steps.updateTpEntityParams_1.input.config.query}","url":"${steps.updateTpEntityParams_1.input.config.url}","headers":"${steps.updateTpEntityParams_1.input.config.auth}","retry":"true","retryAttempts":"5","method":"POST"}},{"id":235910,"onSuccess":["updateLog"],"onFailure":["ApiError"],"name":"updateTpEntity_2","type":"httpRequest","properties":{"retryDelay":"200","query":"${steps.updateTpEntityParams_2.input.config.query}","url":"${steps.updateTpEntityParams_2.input.config.url}","headers":"${steps.updateTpEntityParams_2.input.config.auth}","retry":"true","retryAttempts":"5","method":"POST"}},{"id":235911,"onSuccess":["loopOverCustomers"],"onFailure":[],"name":"updateTpEntity_4","type":"httpRequest","properties":{"query":"${steps.updateTpEntityParams_4.input.config.query}","url":"${steps.updateTpEntityParams_4.input.config.url}","headers":"${steps.updateTpEntityParams_4.input.config.auth}","method":"POST"}},{"id":235912,"onSuccess":["loopOverCustomers"],"onFailure":[],"name":"updateTpEntity_5","type":"httpRequest","properties":{"query":"${steps.updateTpEntityParams_3.input.config.query}","url":"${steps.updateTpEntityParams_3.input.config.url}","headers":"${steps.updateTpEntityParams_3.input.config.auth}","method":"POST"}},{"id":235913,"onSuccess":["loopOverCustomers"],"onFailure":[],"name":"updateTpEntity_6","type":"httpRequest","properties":{"query":"${steps.updateTpEntityParams_5.params.config.query}","url":"${steps.updateTpEntityParams_5.params.config.url}","headers":"${steps.updateTpEntityParams_5.params.config.auth}","method":"POST"}},{"id":240365,"onSuccess":["loopOverCustomers"],"onFailure":["ApiError"],"name":"updateTpEntityFailed","type":"httpRequest","properties":{"retryDelay":"200","query":"${steps.updateTpEntityFailedParams.input.config.query}","retryStatusCodes":"429","url":"${steps.updateTpEntityFailedParams.input.config.url}","headers":"${steps.updateTpEntityFailedParams.input.config.auth}","retry":"true","retryAttempts":"5","method":"POST"}},{"id":240363,"onSuccess":["updateTpEntityFailed"],"onFailure":[],"name":"updateTpEntityFailedParams","type":"script","properties":{"body":"let apiKey = steps.InputParams.input.cbApiKey;\nlet siteName = steps.InputParams.input.siteName;\nlet siteDomain = steps.InputParams.input.siteDomain;\nlet type = steps.InputParams.input.integrationName;\nlet password = \"\";\n\n\nlet syncStatus = \"update_failed\";\nlet customer = steps.loopOverCustomers.entry.customer;\nlet chargebee_data_url = \"/admin-console/customers/\"+customer.id;\nlet cb_link = \"<a href='\"+chargebee_data_url+\"' target=\\\"blank\\\">\"+customer.id+\"</a>\";\nlet errorMessage = cb_link + \" - Sync Failed\";\n\nlet tpEntityId = (steps.getTpEntityParamsFailedCustomer.response.body.third_party_entity_mapping !== undefined) ? steps.getTpEntityParamsFailedCustomer.response.body.third_party_entity_mapping.third_party_entity_id : undefined;\n\n\nlet params = {\n  input: {\n    apiKey: apiKey,\n    siteName: siteName,\n    siteDomain:siteDomain,\n    type: type,\n    config :{\n      url: \"https://\"+siteName+\".\"+siteDomain+\"/api/v2/third_party_entity_mappings/update_entity\",\n      auth:{\n        Authorization: \"Basic \" + CE.b64(apiKey + \":\" + password)\n      },\n      query:{\n        integration_name: type,\n        entity_id: customer.id,\n        third_party_entity_id : tpEntityId,\n        entity_type: \"customer\",\n        status: syncStatus,\n        error_message: errorMessage\n      }\n    }\n  }\n};\n\ndone(params)"}},{"id":235914,"onSuccess":["updateTpEntity_1"],"onFailure":[],"name":"updateTpEntityParams_1","type":"script","properties":{"body":"let apiKey=steps.InputParams.input.cbApiKey;\nlet siteName=steps.InputParams.input.siteName;\nlet siteDomain=steps.InputParams.input.siteDomain;\nlet type = steps.InputParams.input.integrationName;\n\nlet password = \"\";\n\n\nlet resource = steps.createPersonPayload.payload;\nlet syncStatus = \"synced\";\nlet tpEntityId = steps.createPersonInPipedrive.response.body.data.id || '';\nlet errorMessage;\nlet customer = steps.loopOverCustomers.entry.customer;\n\nlet chargebee_data_url = \"/admin-console/customers/\"+customer.id;\nlet cb_link = \"<a href='\"+chargebee_data_url+\"' target=\\\"blank\\\">\"+customer.id+\"</a>\";\n\nif((steps.createPersonInPipedrive.response.code !== 200) && (steps.createPersonInPipedrive.response.code !== 201)){\n  syncStatus = \"update_failed\";\n  errorMessage = cb_link + \" - Sync Failed\"\n}\n\n// let params = {\n//   input: {\n//     apiKey: apiKey,\n//     siteName: siteName,\n//     siteDomain:siteDomain,\n//     type: type,\n//     config :{\n//       url: \"https://\"+siteName+\".\"+siteDomain+\"/api/v2/third_party_entity_mappings/update_entity\",\n//       auth:{\n//         Authorization: \"Basic \" + CE.b64(apiKey + \":\" + password)\n//       },\n//       query:{\n//         integration_name: type,\n//         entity_id: steps.loopOverCustomers.entry.customer.id,\n//         entity_type: \"customer\",\n//         third_party_entity_id: tpEntityId,\n//         status: syncStatus,\n//         old_resource: JSON.stringify(resource)     \n//       }\n//     }\n//   }\n// };\n\n// done(params)\n\nlet params = {\n  input: {\n    apiKey: apiKey,\n    siteName: siteName,\n    siteDomain:siteDomain,\n    type: type,\n    config :{\n      url: \"https://\"+siteName+\".\"+siteDomain+\"/api/v2/third_party_entity_mappings/update_entity\",\n      auth:{\n        Authorization: \"Basic \" + CE.b64(apiKey + \":\" + password)\n      },\n      query:{\n        integration_name: type,\n        entity_id: steps.loopOverCustomers.entry.customer.id,\n        entity_type: \"customer\",\n        third_party_entity_id: syncStatus !== \"update_failed\"? tpEntityId : undefined,\n        status: syncStatus,\n        old_resource: syncStatus !== \"update_failed\"? JSON.stringify(resource): undefined,\n        error_message: errorMessage\n      }\n    }\n  }\n};\n\ndone(params)"}},{"id":235915,"onSuccess":["updateTpEntity_2"],"onFailure":[],"name":"updateTpEntityParams_2","type":"script","properties":{"body":"let apiKey=steps.InputParams.input.cbApiKey;\nlet siteName=steps.InputParams.input.siteName;\nlet siteDomain=steps.InputParams.input.siteDomain;\nlet type = steps.InputParams.input.integrationName;\n\nlet password = \"\";\n\n\nlet resource = steps.updateCustomerParams.updatePayload;\nlet syncStatus = \"synced\";\nlet tpEntityId = steps.updatePipedriveCustomer.response.body.data.id || '';\nlet errorMessage;\n\nlet customer = steps.loopOverCustomers.entry.customer;\nlet chargebee_data_url = \"/admin-console/customers/\"+customer.id;\nlet cb_link = \"<a href='\"+chargebee_data_url+\"' target=\\\"blank\\\">\"+customer.id+\"</a>\";\n\nif(steps.updatePipedriveCustomer.response.code !== 200){\n  syncStatus = \"update_failed\";\n  errorMessage = cb_link  + \" - Sync Failed\";\n}\n\nif(steps.GetThirdPartyMappingDetails.response.code === 200){\n  if(steps.GetThirdPartyMappingDetails.response.body.third_party_entity_mapping.old_resource !== undefined){\n    resource.invoice_deal_id = (steps.GetThirdPartyMappingDetails.response.body.third_party_entity_mapping.old_resource.invoice_deal_id !== undefined) ? steps.GetThirdPartyMappingDetails.response.body.third_party_entity_mapping.old_resource.invoice_deal_id : undefined;\n    resource.subscription_deal_id = (steps.GetThirdPartyMappingDetails.response.body.third_party_entity_mapping.old_resource.subscription_deal_id !== undefined) ? steps.GetThirdPartyMappingDetails.response.body.third_party_entity_mapping.old_resource.subscription_deal_id : undefined;\n    resource.subscription_status = (steps.GetThirdPartyMappingDetails.response.body.third_party_entity_mapping.old_resource.subscription_status !== undefined) ? steps.GetThirdPartyMappingDetails.response.body.third_party_entity_mapping.old_resource.subscription_status : undefined;\n    resource.subscription_id = (steps.GetThirdPartyMappingDetails.response.body.third_party_entity_mapping.old_resource.subscription_id !== undefined) ? steps.GetThirdPartyMappingDetails.response.body.third_party_entity_mapping.old_resource.subscription_id : undefined;\n    resource.invoice_status = (steps.GetThirdPartyMappingDetails.response.body.third_party_entity_mapping.old_resource.invoice_status !== undefined) ? steps.GetThirdPartyMappingDetails.response.body.third_party_entity_mapping.old_resource.invoice_status : undefined;\n    resource.invoice_id = (steps.GetThirdPartyMappingDetails.response.body.third_party_entity_mapping.old_resource.invoice_id !== undefined) ? steps.GetThirdPartyMappingDetails.response.body.third_party_entity_mapping.old_resource.invoice_id : undefined;\n  }\n}\n\nlet params = {\n  input: {\n    apiKey: apiKey,\n    siteName: siteName,\n    siteDomain:siteDomain,\n    type: type,\n    config :{\n      url: \"https://\"+siteName+\".\"+siteDomain+\"/api/v2/third_party_entity_mappings/update_entity\",\n      auth:{\n        Authorization: \"Basic \" + CE.b64(apiKey + \":\" + password)\n      },\n      query:{\n        integration_name: type,\n        entity_id: steps.loopOverCustomers.entry.customer.id,\n        entity_type: \"customer\",\n        third_party_entity_id: syncStatus !== \"update_failed\" ? tpEntityId: undefined,\n        status: syncStatus,\n        old_resource: syncStatus !== \"update_failed\" ? JSON.stringify(resource): undefined,\n        error_message: errorMessage\n        \n      }\n    }\n  }\n};\n\ndone(params)"}},{"id":235916,"onSuccess":["updateTpEntity_5"],"onFailure":[],"name":"updateTpEntityParams_3","type":"script","properties":{"body":"let apiKey = steps.InputParams.input.cbApiKey;\nlet siteName = steps.InputParams.input.siteName;\nlet siteDomain = steps.InputParams.input.siteDomain;\nlet type = steps.InputParams.input.integrationName;\nlet password = \"\";\nlet errorMessage;\nlet customer = steps.loopOverCustomers.entry.customer;\n\nlet chargebee_data_url = \"/admin-console/subscriptions/\"+customer.id;\nlet cb_link = \"<a href='\"+chargebee_data_url+\"' target=\\\"blank\\\">\"+customer.id+\"</a>\";\n\n  errorMessage = cb_link +  \" - Sync Failed\"\n\nlet params = {\n  input: {\n    apiKey: apiKey,\n    siteName: siteName,\n    siteDomain:siteDomain,\n    type: type,\n    config :{\n      url: \"https://\"+siteName+\".\"+siteDomain+\"/api/v2/third_party_entity_mappings/update_entity\",\n      auth:{\n        Authorization: \"Basic \" + CE.b64(apiKey + \":\" + password)\n      },\n      query:{\n        integration_name: type,\n        entity_id: steps.loopOverCustomers.entry.customer.id,\n        entity_type: \"customer\",\n        status: \"update_failed\",\n        error_message: errorMessage\n      }\n    }\n  }\n};\n\ndone(params)"}},{"id":235917,"onSuccess":["updateTpEntity_4"],"onFailure":[],"name":"updateTpEntityParams_4","type":"script","properties":{"body":"let apiKey = steps.InputParams.input.cbApiKey;\nlet siteName = steps.InputParams.input.siteName;\nlet siteDomain = steps.InputParams.input.siteDomain;\nlet type = steps.InputParams.input.integrationName;\nlet password = \"\";\nlet errorMessage;\nlet customer = steps.loopOverCustomers.entry.customer;\nlet errorCsv = steps.ConfigParams.params.records.errorCSV;\n\nerrorMessage =  errorCsv[errorCsv.length - 1];\n\nlet params = {\n  input: {\n    apiKey: apiKey,\n    siteName: siteName,\n    siteDomain:siteDomain,\n    type: type,\n    config :{\n      url: \"https://\"+siteName+\".\"+siteDomain+\"/api/v2/third_party_entity_mappings/update_entity\",\n      auth:{\n        Authorization: \"Basic \" + CE.b64(apiKey + \":\" + password)\n      },\n      query:{\n        integration_name: type,\n        entity_id: steps.loopOverCustomers.entry.customer.id,\n        entity_type: \"customer\",\n        status: \"update_failed\",\n        error_message: errorMessage\n      }\n    }\n  }\n};\n\ndone(params)"}},{"id":235918,"onSuccess":["updateTpEntity_6"],"onFailure":[],"name":"updateTpEntityParams_5","type":"script","properties":{"body":"let apiKey = steps.InputParams.input.cbApiKey;\nlet siteName = steps.InputParams.input.siteName;\nlet siteDomain = steps.InputParams.input.siteDomain;\nlet type = steps.InputParams.input.integrationName;\nlet password = \"\";\n\nlet customer = steps.loopOverCustomers.entry.customer;\nlet chargebee_data_url = \"/admin-console/customers/\" + customer.id;\nlet cb_link = \"<a href='\" + chargebee_data_url + \"' target=\\\"blank\\\">\" + customer.id + \"</a>\";\nlet errorMessage = cb_link + \" - Multiple Records Found in Pipedrive\"\n\nlet params = {\n\n    config: {\n        url: \"https://\" + siteName + \".\" + siteDomain + \"/api/v2/third_party_entity_mappings/update_entity\",\n        auth: {\n            Authorization: \"Basic \" + CE.b64(apiKey + \":\" + password)\n        },\n        query: {\n            integration_name: type,\n            entity_id: steps.loopOverCustomers.entry.customer.id,\n            entity_type: \"customer\",\n            status: \"update_failed\",\n            error_message: errorMessage\n        }\n    }\n};\n\ndone({ params: params })\n"}},{"id":235919,"onSuccess":["fetchOrganizationParams"],"onFailure":["UpdateConfigParams"],"name":"useOrganization","type":"filter","properties":{"body":"done(steps.ConfigParams.params.useOrganization);"}},{"id":235920,"onSuccess":["fetchCustomerWithoutOrgParams"],"onFailure":["createPerson"],"name":"useOrgDisabled","type":"filter","properties":{"body":"if(steps.ConfigParams.params.useOrganization === true){\n  done(false);\n}\n\ndone(true);"}}],"triggers":[{"id":27241,"onSuccess":["InputParams"],"onFailure":[],"type":"manual","async":true,"name":"trigger","properties":{}}],"engine":"v3","active":true,"debugLoggingEnabled":true,"singleThreaded":false,"configuration":[{"id":56879,"key":"chargebee","name":"chargebee","type":"elementInstance","required":true},{"id":56880,"key":"pipedrive","name":"pipedrive","type":"elementInstance","required":true}]}